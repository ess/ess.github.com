// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message)   - if this function is defined it is called
//                        instead of the Dart [print] method.
// dartMainRunner(main) - if this function is defined, the Dart [main]
//                        method will not be invoked directly.
//                        Instead, a closure that will invoke [main] is
//                        passed to [dartMainRunner].
function Isolate() {}
init();

var $$ = {};
var $ = Isolate.$isolateProperties;
$$.ListIterator = {"": ["i", "list"],
 "super": "Object",
 get$hasNext: function() {
  return this.i < this.list.length;
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  var value = this.list[this.i];
  this.i = this.i + 1;
  return value;
}
};

$$.StackTrace = {"": ["stack"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.stack;
  return !(t1 == null) ? t1 : '';
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
}
};

$$.MetaInfo = {"": ["_tag>", "_tags", "_set>"],
 "super": "Object"
};

$$.JSSyntaxRegExp = {"": ["_liblib0$_pattern", "_multiLine", "_ignoreCase"],
 "super": "Object",
 hasMatch$1: function(str) {
  return $.regExpTest(this, $.checkString(str));
},
 get$pattern: function() {
  return this._liblib0$_pattern;
},
 get$multiLine: function() {
  return this._multiLine;
},
 get$ignoreCase: function() {
  return this._ignoreCase;
},
 is$JSSyntaxRegExp: true,
 is$RegExp: true
};

$$.ArgumentError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  if (!(t1 == null))
    return 'Illegal argument(s): ' + $.S(t1);
  return 'Illegal argument(s)';
}
};

$$.RangeError = {"": ["message"],
 "super": "ArgumentError",
 toString$0: function() {
  return 'RangeError: ' + $.S(this.message);
}
};

$$.NoSuchMethodError = {"": ["_receiver", "_memberName", "_arguments", "_namedArguments", "_existingArgumentNames"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3, t4, t5, actualParameters, i, formalParameters;
  t1 = {};
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  t1.i_2 = 0;
  t2 = this._arguments;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(1, t1, t2);
  for (; $.ltB(t1.i_2, t2.length); t1.i_2 = $.add(t1.i_2, 1)) {
    if ($.gtB(t1.i_2, 0)) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ', ');
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    t5 = t1.i_2;
    if (t5 !== (t5 | 0))
      throw $.iae(t5);
    if (t5 < 0 || t5 >= t2.length)
      throw $.ioore(t5);
    t4.add$1(t3, $.NoSuchMethodError_safeToString(t2[t5]));
  }
  t2 = this._namedArguments;
  if (!(t2 == null))
    $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
  t2 = this._existingArgumentNames;
  if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
    return this.toString$0$bailout(2, t1, t2);
  actualParameters = $.toString(t1.sb_1);
  t1.sb_1 = $.StringBuffer_StringBuffer('');
  for (i = 0; i < t2.length; ++i) {
    if (i > 0) {
      t3 = t1.sb_1;
      $.getInterceptor(t3).add$1(t3, ', ');
    }
    t3 = t1.sb_1;
    t4 = $.getInterceptor(t3);
    if (i >= t2.length)
      throw $.ioore(i);
    t4.add$1(t3, t2[i]);
  }
  formalParameters = $.toString(t1.sb_1);
  t2 = this._memberName;
  return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
},
 toString$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t2 = env1;
      t1 = env0;
      break;
    case 2:
      t2 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      t1.sb_1 = $.StringBuffer_StringBuffer('');
      t1.i_2 = 0;
      t2 = this._arguments;
    case 1:
      state0 = 0;
      if (!(t2 == null))
        for (; $.ltB(t1.i_2, $.get$length(t2)); t1.i_2 = $.add(t1.i_2, 1)) {
          if ($.gtB(t1.i_2, 0)) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ', ');
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.NoSuchMethodError_safeToString($.index(t2, t1.i_2)));
        }
      t2 = this._namedArguments;
      if (!(t2 == null))
        $.getInterceptor(t2).forEach$1(t2, new $.NoSuchMethodError_toString_anon(t1));
      t2 = this._existingArgumentNames;
    case 2:
      var t1, t2, t3, actualParameters, i, formalParameters;
      state0 = 0;
      if (t2 == null)
        return 'NoSuchMethodError : method not found: \'' + $.S(this._memberName) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Arguments: [' + $.S(t1.sb_1) + ']';
      else {
        actualParameters = $.toString(t1.sb_1);
        t1.sb_1 = $.StringBuffer_StringBuffer('');
        for (i = 0; $.ltB(i, $.get$length(t2)); ++i) {
          if (i > 0) {
            t3 = t1.sb_1;
            $.getInterceptor(t3).add$1(t3, ', ');
          }
          t3 = t1.sb_1;
          $.getInterceptor(t3).add$1(t3, $.index(t2, i));
        }
        formalParameters = $.toString(t1.sb_1);
        t2 = this._memberName;
        return 'NoSuchMethodError: incorrect number of arguments passed to method named \'' + $.S(t2) + '\'\n' + 'Receiver: ' + $.S($.NoSuchMethodError_safeToString(this._receiver)) + '\n' + 'Tried calling: ' + $.S(t2) + '(' + $.S(actualParameters) + ')\n' + 'Found: ' + $.S(t2) + '(' + $.S(formalParameters) + ')';
      }
  }
}
};

$$.UnsupportedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  return 'Unsupported operation: ' + $.S(this.get$message());
}
};

$$.UnimplementedError = {"": ["message>"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return !(t1 == null) ? 'UnimplementedError: ' + $.S(t1) : 'UnimplementedError';
}
};

$$.StateError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'Bad state: ' + this.message;
}
};

$$.StackOverflowError = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Stack Overflow';
}
};

$$._ExceptionImplementation = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.message;
  return t1 == null ? 'Exception' : 'Exception: ' + $.S(t1);
},
 is$Exception: true
};

$$.FormatException = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'FormatException: ' + $.S(this.message);
},
 is$Exception: true
};

$$.NullPointerException = {"": ["functionName", "arguments"],
 "super": "Object",
 toString$0: function() {
  var t1 = this.functionName;
  if (t1 == null)
    return this.get$exceptionName();
  else
    return $.S(this.get$exceptionName()) + ' : method: \'' + $.S(t1) + '\'\n' + 'Receiver: null\n' + 'Arguments: ' + $.S(this.arguments);
},
 get$exceptionName: function() {
  return 'NullPointerException';
},
 is$Exception: true
};

$$.IllegalJSRegExpException = {"": ["_pattern", "_errmsg"],
 "super": "Object",
 toString$0: function() {
  return 'IllegalJSRegExpException: \'' + $.S(this._pattern) + '\' \'' + this._errmsg + '\'';
},
 is$Exception: true
};

$$.RuntimeError = {"": ["message"],
 "super": "Object",
 toString$0: function() {
  return 'RuntimeError: ' + this.message;
},
 is$Exception: true
};

$$.FutureNotCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future has not been completed';
},
 is$Exception: true
};

$$.FutureAlreadyCompleteException = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Exception: future already completed';
},
 is$Exception: true
};

$$.FutureUnhandledException = {"": ["source", "stackTrace>"],
 "super": "Object",
 toString$0: function() {
  var t1, t2, t3;
  t1 = $.toString(this.source);
  t2 = 'FutureUnhandledException: exception while executing Future\n  ' + $.S($.getInterceptor(t1).replaceAll$2(t1, '\n', '\n  ')) + '\n' + 'original stack trace:\n  ';
  t3 = $.toString(this.stackTrace);
  return t2 + $.S($.getInterceptor(t3).replaceAll$2(t3, '\n', '\n  '));
},
 is$Exception: true
};

$$._FutureImpl = {"": ["_isComplete", "_value", "_exception", "_stackTrace", "_exceptionHandled", "_successListeners", "_exceptionHandlers", "_completionListeners"],
 "super": "Object",
 get$value: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  var t1 = this._exception;
  if (!(t1 == null))
    throw $.$$throw($.FutureUnhandledException$(t1, this.get$stackTrace()));
  return this._value;
},
 get$stackTrace: function() {
  if (this.get$isComplete() !== true)
    throw $.$$throw($.FutureNotCompleteException$());
  return this._stackTrace;
},
 get$isComplete: function() {
  return this._isComplete;
},
 get$hasValue: function() {
  return this.get$isComplete() === true && this._exception == null;
},
 then$1: function(onSuccess) {
  var t1;
  if (this.get$hasValue() === true)
    onSuccess.call$1(this.get$value());
  else if (this.get$isComplete() !== true) {
    t1 = this._successListeners;
    $.getInterceptor(t1).add$1(t1, onSuccess);
  } else if (this._exceptionHandled !== true)
    throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
},
 handleException$1: function(onException) {
  var t1;
  if (this._exceptionHandled === true)
    return;
  if (this._isComplete) {
    t1 = this._exception;
    if (!(t1 == null))
      this._exceptionHandled = onException.call$1(t1);
  } else {
    t1 = this._exceptionHandlers;
    $.getInterceptor(t1).add$1(t1, onException);
  }
},
 _complete$0: function(exception) {
  var t1, handler, listener, listener0;
  this._isComplete = true;
  try {
    if (!(this._exception == null))
      for (t1 = $.iterator(this._exceptionHandlers); t1.get$hasNext() === true;) {
        handler = t1.next$0();
        if ($.eqB(handler.call$1(this._exception), true)) {
          this._exceptionHandled = true;
          break;
        }
      }
    if (this.get$hasValue() === true)
      for (t1 = $.iterator(this._successListeners); t1.get$hasNext() === true;) {
        listener = t1.next$0();
        listener.call$1(this.get$value());
      }
    else if (this._exceptionHandled !== true && this._successListeners.length > 0)
      throw $.$$throw($.FutureUnhandledException$(this._exception, this.get$stackTrace()));
  } finally {
    for (t1 = $.iterator(this._completionListeners); t1.get$hasNext() === true;) {
      listener0 = t1.next$0();
      try {
        listener0.call$1(this);
      } catch (exception) {
        $.unwrapException(exception);
      }

    }
  }
},
 _setValue$1: function(value) {
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._value = value;
  this._complete$0();
},
 _setException$2: function(exception, stackTrace) {
  if (exception == null)
    throw $.$$throw($.ArgumentError$(null));
  if (this._isComplete)
    throw $.$$throw($.FutureAlreadyCompleteException$());
  this._exception = exception;
  this._stackTrace = stackTrace;
  this._complete$0();
}
};

$$._CompleterImpl = {"": ["_futureImpl"],
 "super": "Object",
 get$future: function() {
  return this._futureImpl;
},
 complete$1: function(value) {
  this._futureImpl._setValue$1(value);
},
 completeException$2: function(exception, stackTrace) {
  this._futureImpl._setException$2(exception, stackTrace);
},
 completeException$1: function(exception) {
  return this.completeException$2(exception,null)
}
};

$$.List = {"": [],
 "super": "Object",
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._HashMapImpl = {"": ["_keys", "_values", "_loadLimit", "_numberOfEntries", "_numberOfDeleted"],
 "super": "Object",
 _probeForAdding$1: function(key) {
  var t1, hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC2);
  t1 = $.get$hashCode(key);
  if (t1 !== (t1 | 0))
    return this._probeForAdding$1$bailout(1, key, t1);
  hash = (t1 & this._keys.length - 1) >>> 0;
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC4)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForAdding$1$bailout: function(state0, key, t1) {
  var hash, numberOfProbes, insertionIndex, existingKey, numberOfProbes0;
  hash = $.and(t1, this._keys.length - 1);
  for (numberOfProbes = 1, insertionIndex = -1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null) {
      if (insertionIndex < 0)
        return hash;
      return insertionIndex;
    } else if ($.eqB(existingKey, key))
      return hash;
    else if (insertionIndex < 0 && existingKey === $.CTC4)
      insertionIndex = hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1: function(key) {
  var hash, numberOfProbes, t1, existingKey, numberOfProbes0;
  if (key == null)
    throw $.$$throw($.CTC2);
  hash = $.and($.get$hashCode(key), this._keys.length - 1);
  if (hash !== (hash | 0))
    return this._probeForLookup$1$bailout(1, key, hash);
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _probeForLookup$1$bailout: function(state0, key, hash) {
  var numberOfProbes, t1, existingKey, numberOfProbes0;
  for (numberOfProbes = 1; true; numberOfProbes = numberOfProbes0) {
    t1 = this._keys;
    if (hash !== (hash | 0))
      throw $.iae(hash);
    if (hash < 0 || hash >= t1.length)
      throw $.ioore(hash);
    existingKey = t1[hash];
    if (existingKey == null)
      return -1;
    if ($.eqB(existingKey, key))
      return hash;
    numberOfProbes0 = numberOfProbes + 1;
    hash = $._HashMapImpl__nextProbe(hash, numberOfProbes, this._keys.length);
  }
},
 _ensureCapacity$0: function() {
  var newNumberOfEntries, capacity, numberOfFreeOrDeleted, t1;
  newNumberOfEntries = this._numberOfEntries + 1;
  if ($.geB(newNumberOfEntries, this._loadLimit)) {
    this._grow$1(this._keys.length * 2);
    return;
  }
  capacity = this._keys.length;
  numberOfFreeOrDeleted = capacity - newNumberOfEntries;
  t1 = this._numberOfDeleted;
  if (t1 > numberOfFreeOrDeleted - t1)
    this._grow$1(capacity);
},
 _grow$1: function(newCapacity) {
  var capacity, oldKeys, oldValues, t1, t2, i, key, value, newIndex, t3;
  capacity = this._keys.length;
  this._loadLimit = $.tdiv(newCapacity * 3, 4);
  oldKeys = this._keys;
  oldValues = this._values;
  this._keys = $._ListImpl_List(newCapacity);
  this._values = $._ListImpl_List(newCapacity);
  for (t1 = oldKeys.length, t2 = oldValues.length, i = 0; i < capacity; ++i) {
    if (i >= t1)
      throw $.ioore(i);
    key = oldKeys[i];
    if (key == null || key === $.CTC4)
      continue;
    if (i >= t2)
      throw $.ioore(i);
    value = oldValues[i];
    newIndex = this._probeForAdding$1(key);
    t3 = this._keys;
    if (newIndex !== (newIndex | 0))
      throw $.iae(newIndex);
    if (newIndex < 0 || newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = key;
    t3 = this._values;
    if (newIndex >= t3.length)
      throw $.ioore(newIndex);
    t3[newIndex] = value;
  }
  this._numberOfDeleted = 0;
},
 clear$0: function() {
  var t1, length$, t2, t3, i;
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  t1 = this._keys;
  length$ = t1.length;
  for (t2 = this._values, t3 = t2.length, i = 0; i < length$; ++i) {
    t1[i] = null;
    if (i >= t3)
      throw $.ioore(i);
    t2[i] = null;
  }
},
 oprator$indexSet$2: function(key, value) {
  var index, t1;
  this._ensureCapacity$0();
  index = this._probeForAdding$1(key);
  t1 = this._keys;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  t1 = t1[index];
  if (t1 == null || t1 === $.CTC4)
    this._numberOfEntries = this._numberOfEntries + 1;
  t1 = this._keys;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = key;
  t1 = this._values;
  if (index >= t1.length)
    throw $.ioore(index);
  t1[index] = value;
},
 operator$index$1: function(key) {
  var index, t1;
  index = this._probeForLookup$1(key);
  if ($.ltB(index, 0))
    return;
  t1 = this._values;
  if (index !== (index | 0))
    throw $.iae(index);
  if (index < 0 || index >= t1.length)
    throw $.ioore(index);
  return t1[index];
},
 remove$1: function(key) {
  var index, t1, value;
  index = this._probeForLookup$1(key);
  if (typeof index !== 'number')
    return this.remove$1$bailout(1, index);
  if (index >= 0) {
    this._numberOfEntries = this._numberOfEntries - 1;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC4;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 remove$1$bailout: function(state0, index) {
  var t1, value;
  if ($.geB(index, 0)) {
    this._numberOfEntries = this._numberOfEntries - 1;
    t1 = this._values;
    if (index !== (index | 0))
      throw $.iae(index);
    if (index < 0 || index >= t1.length)
      throw $.ioore(index);
    value = t1[index];
    t1[index] = null;
    t1 = this._keys;
    if (index >= t1.length)
      throw $.ioore(index);
    t1[index] = $.CTC4;
    this._numberOfDeleted = this._numberOfDeleted + 1;
    return value;
  }
  return;
},
 get$isEmpty: function() {
  return this._numberOfEntries === 0;
},
 get$length: function() {
  return this._numberOfEntries;
},
 forEach$1: function(f) {
  var length$, i, t1, key;
  length$ = this._keys.length;
  for (i = 0; i < length$; ++i) {
    t1 = this._keys;
    if (i >= t1.length)
      throw $.ioore(i);
    key = t1[i];
    if (!(key == null) && !(key === $.CTC4)) {
      t1 = this._values;
      if (i >= t1.length)
        throw $.ioore(i);
      f.call$2(key, t1[i]);
    }
  }
},
 get$keys: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.i_10 = 0;
  this.forEach$1(new $._HashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.i_1 = 0;
  this.forEach$1(new $._HashMapImpl_values_anon(t1, list));
  return list;
},
 containsKey$1: function(key) {
  return !$.eqB(this._probeForLookup$1(key), -1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _HashMapImpl$0: function() {
  this._numberOfEntries = 0;
  this._numberOfDeleted = 0;
  this._loadLimit = $._HashMapImpl__computeLoadLimit(8);
  this._keys = $._ListImpl_List(8);
  this._values = $._ListImpl_List(8);
},
 is$Map: function() { return true; }
};

$$._DeletedKeySentinel = {"": [],
 "super": "Object"
};

$$._KeyValuePair = {"": ["key>", "value="],
 "super": "Object"
};

$$._LinkedHashMapImpl = {"": ["_list", "_map"],
 "super": "Object",
 oprator$indexSet$2: function(key, value) {
  var t1;
  if (this._map.containsKey$1(key) === true)
    $.index(this._map, key).get$element().set$value(value);
  else {
    t1 = this._list;
    $.getInterceptor(t1).addLast$1(t1, $._KeyValuePair$(key, value));
    $.indexSet(this._map, key, this._list.lastEntry$0());
  }
},
 operator$index$1: function(key) {
  var entry = $.index(this._map, key);
  if (entry == null)
    return;
  return entry.get$element().get$value();
},
 remove$1: function(key) {
  var entry = this._map.remove$1(key);
  if (entry == null)
    return;
  entry.remove$0();
  return entry.get$element().get$value();
},
 get$keys: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.index_10 = 0;
  t2 = this._list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_keys_anon(t1, list));
  return list;
},
 get$values: function() {
  var t1, list, t2;
  t1 = {};
  list = $._ListImpl_List(this.get$length());
  t1.index_1 = 0;
  t2 = this._list;
  $.getInterceptor(t2).forEach$1(t2, new $._LinkedHashMapImpl_values_anon(t1, list));
  return list;
},
 forEach$1: function(f) {
  var t1 = this._list;
  $.getInterceptor(t1).forEach$1(t1, new $._LinkedHashMapImpl_forEach_anon(f));
},
 containsKey$1: function(key) {
  return this._map.containsKey$1(key);
},
 get$length: function() {
  return $.get$length(this._map);
},
 get$isEmpty: function() {
  return $.eq(this.get$length(), 0);
},
 clear$0: function() {
  var t1 = this._map;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._list;
  $.getInterceptor(t1).clear$0(t1);
},
 toString$0: function() {
  return $.Maps_mapToString(this);
},
 _LinkedHashMapImpl$0: function() {
  this._map = $.HashMap_HashMap();
  this._list = $.DoubleLinkedQueue$();
},
 is$Map: function() { return true; }
};

$$.Object = {"": [],
 "super": "",
 operator$eq$1: function(other) {
  return this === other;
},
 get$hashCode: function() {
  return $.Primitives_objectHashCode(this);
},
 toString$0: function() {
  return $.Primitives_objectToString(this);
}
};

$$.DoubleLinkedQueueEntry = {"": ["_previous<", "_next=", "_element>"],
 "super": "Object",
 _link$2: function(p, n) {
  this._next = n;
  this._previous = p;
  p.set$_next(this);
  n.set$_previous(this);
},
 prepend$1: function(e) {
  $.DoubleLinkedQueueEntry$(e)._link$2(this._previous, this);
},
 remove$0: function() {
  var t1 = this._next;
  this._previous.set$_next(t1);
  t1 = this._previous;
  this._next.set$_previous(t1);
  this._next = null;
  this._previous = null;
  return this._element;
},
 _asNonSentinelEntry$0: function() {
  return this;
},
 previousEntry$0: function() {
  return this._previous._asNonSentinelEntry$0();
},
 get$element: function() {
  return this._element;
},
 DoubleLinkedQueueEntry$1: function(e) {
  this._element = e;
}
};

$$._DoubleLinkedQueueEntrySentinel = {"": ["_previous", "_next", "_element"],
 "super": "DoubleLinkedQueueEntry",
 remove$0: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _asNonSentinelEntry$0: function() {
  return;
},
 get$element: function() {
  throw $.$$throw($.StateError$('Empty queue'));
},
 _DoubleLinkedQueueEntrySentinel$0: function() {
  this._link$2(this, this);
}
};

$$.DoubleLinkedQueue = {"": ["_sentinel"],
 "super": "Object",
 addLast$1: function(value) {
  this._sentinel.prepend$1(value);
},
 add$1: function(value) {
  this._sentinel.prepend$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    this._sentinel.prepend$1(t2);
  }
},
 removeLast$0: function() {
  return this._sentinel._previous.remove$0();
},
 removeFirst$0: function() {
  return this._sentinel._next.remove$0();
},
 get$last: function() {
  return this._sentinel._previous.get$element();
},
 lastEntry$0: function() {
  return this._sentinel.previousEntry$0();
},
 get$length: function() {
  var t1 = {};
  t1.counter_1 = 0;
  this.forEach$1(new $.DoubleLinkedQueue_length_anon(t1));
  return t1.counter_1;
},
 get$isEmpty: function() {
  var t1 = this._sentinel;
  return t1._next === t1;
},
 clear$0: function() {
  var t1 = this._sentinel;
  t1._next = t1;
  t1 = this._sentinel;
  t1._previous = t1;
},
 forEach$1: function(f) {
  var entry, nextEntry;
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    f.call$1(entry.get$_element());
  }
},
 filter$1: function(f) {
  var other, entry, nextEntry;
  other = $.Queue_Queue();
  entry = this._sentinel._next;
  for (; !(entry === this._sentinel); entry = nextEntry) {
    nextEntry = entry.get$_next();
    if (f.call$1(entry.get$_element()) === true)
      $.getInterceptor(other).addLast$1(other, entry.get$_element());
  }
  return other;
},
 iterator$0: function() {
  return $._DoubleLinkedQueueIterator$(this._sentinel);
},
 toString$0: function() {
  return $.Collections_collectionToString(this);
},
 DoubleLinkedQueue$0: function() {
  this._sentinel = $._DoubleLinkedQueueEntrySentinel$();
},
 is$Collection: function() { return true; }
};

$$._DoubleLinkedQueueIterator = {"": ["_sentinel", "_currentEntry"],
 "super": "Object",
 get$hasNext: function() {
  return !(this._currentEntry.get$_next() === this._sentinel);
},
 next$0: function() {
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  this._currentEntry = this._currentEntry.get$_next();
  return this._currentEntry.get$element();
},
 _DoubleLinkedQueueIterator$1: function(_sentinel) {
  this._currentEntry = this._sentinel;
}
};

$$.String = {"": [],
 "super": "Object",
 is$String: true
};

$$._StringBufferImpl = {"": ["_buffer", "_length"],
 "super": "Object",
 get$length: function() {
  return this._length;
},
 get$isEmpty: function() {
  return $.eq(this._length, 0);
},
 add$1: function(obj) {
  var str, t1, t3;
  str = $.toString(obj);
  if (str == null || $.get$isEmpty(str) === true)
    return this;
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, str);
  t1 = this._length;
  if (typeof t1 !== 'number')
    return this.add$1$bailout(1, t1, str);
  t3 = $.get$length(str);
  if (typeof t3 !== 'number')
    return this.add$1$bailout(2, t1, t3);
  this._length = t1 + t3;
  return this;
},
 add$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      str = env1;
      t1 = env0;
      break;
    case 2:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      str = $.toString(obj);
      if (str == null || $.get$isEmpty(str) === true)
        return this;
      t1 = this._buffer;
      $.getInterceptor(t1).add$1(t1, str);
      t1 = this._length;
    case 1:
      state0 = 0;
      t3 = $.get$length(str);
    case 2:
      var str, t1, t3;
      state0 = 0;
      this._length = $.add(t1, t3);
      return this;
  }
},
 addAll$1: function(objects) {
  var t1;
  for (t1 = $.iterator(objects); t1.get$hasNext() === true;)
    this.add$1(t1.next$0());
  return this;
},
 clear$0: function() {
  this._buffer = $._ListImpl_List(null);
  this._length = 0;
  return this;
},
 toString$0: function() {
  var result, t1;
  if ($.eqB($.get$length(this._buffer), 0))
    return '';
  if ($.eqB($.get$length(this._buffer), 1))
    return $.index(this._buffer, 0);
  result = $.stringJoinUnchecked($.Strings__toJsStringArray(this._buffer), '');
  t1 = this._buffer;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this._buffer;
  $.getInterceptor(t1).add$1(t1, result);
  return result;
},
 _StringBufferImpl$1: function(content$) {
  this.clear$0();
  this.add$1(content$);
}
};

$$.ObjectInterceptor = {"": [],
 "super": "Object",
 removeLast$0: function(receiver) { return receiver.removeLast$0(); },
 add$1: function(receiver, a0) { return receiver.add$1(a0); },
 charCodeAt$1: function(receiver, a0) { return receiver.charCodeAt$1(a0); },
 clear$0: function(receiver) { return receiver.clear$0(); },
 substring$1: function(receiver, a0) { return receiver.substring$1(a0); },
 substring$2: function(receiver, a0, a1) { return receiver.substring$2(a0, a1); },
 endsWith$1: function(receiver, a0) { return receiver.endsWith$1(a0); },
 replaceAll$2: function(receiver, a0, a1) { return receiver.replaceAll$2(a0, a1); },
 forEach$1: function(receiver, a0) { return receiver.forEach$1(a0); },
 getRange$2: function(receiver, a0, a1) { return receiver.getRange$2(a0, a1); },
 split$1: function(receiver, a0) { return receiver.split$1(a0); },
 addLast$1: function(receiver, a0) { return receiver.addLast$1(a0); },
 filter$1: function(receiver, a0) { return receiver.filter$1(a0); },
 addAll$1: function(receiver, a0) { return receiver.addAll$1(a0); }
};

$$.JSArray = {"": [],
 "super": "Object",
 add$1: function(receiver, value) {
  $.checkGrowable(receiver, 'add');
  receiver.push(value);
},
 removeLast$0: function(receiver) {
  $.checkGrowable(receiver, 'removeLast');
  if ($.eqB($.get$length(receiver), 0))
    throw $.$$throw($.RangeError$value(-1));
  return receiver.pop();
},
 filter$1: function(receiver, f) {
  return $.Collections_filter(receiver, [], f);
},
 addAll$1: function(receiver, collection) {
  var t1, t2;
  for (t1 = $.iterator(collection); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(receiver).add$1(receiver, t2);
  }
},
 addLast$1: function(receiver, value) {
  $.checkGrowable(receiver, 'addLast');
  receiver.push(value);
},
 clear$0: function(receiver) {
  $.set$length(receiver, 0);
},
 forEach$1: function(receiver, f) {
  return $.Collections_forEach(receiver, f);
},
 getRange$2: function(receiver, start, length$) {
  var t1, end;
  if (0 === length$)
    return [];
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$))
    throw $.$$throw($.ArgumentError$(length$));
  t1 = length$ < 0;
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  end = start + length$;
  if ($.gtB(end, $.get$length(receiver)))
    throw $.$$throw($.RangeError$value(length$));
  if (t1)
    throw $.$$throw($.ArgumentError$(length$));
  return receiver.slice(start, end);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.JSString = {"": [],
 "super": "Object",
 charCodeAt$1: function(receiver, index) {
  if (!(typeof index === 'number'))
    throw $.$$throw($.ArgumentError$(index));
  if (index < 0)
    throw $.$$throw($.RangeError$value(index));
  if ($.geB(index, $.get$length(receiver)))
    throw $.$$throw($.RangeError$value(index));
  return receiver.charCodeAt(index);
},
 endsWith$1: function(receiver, other) {
  var otherLength;
  $.checkString(other);
  otherLength = $.get$length(other);
  if ($.gtB(otherLength, $.get$length(receiver)))
    return false;
  return $.eq(other, this.substring$1(receiver, $.sub($.get$length(receiver), otherLength)));
},
 replaceAll$2: function(receiver, from, to) {
  $.checkString(to);
  return $.stringReplaceAllUnchecked(receiver, from, to);
},
 split$1: function(receiver, pattern) {
  $.checkNull(pattern);
  return $.stringSplitUnchecked(receiver, pattern);
},
 substring$2: function(receiver, startIndex, endIndex) {
  $.checkNum(startIndex);
  if (endIndex == null)
    endIndex = $.get$length(receiver);
  $.checkNum(endIndex);
  if ($.ltB(startIndex, 0))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(startIndex, endIndex))
    throw $.$$throw($.RangeError$value(startIndex));
  if ($.gtB(endIndex, $.get$length(receiver)))
    throw $.$$throw($.RangeError$value(endIndex));
  return receiver.substring(startIndex, endIndex);
},
 substring$1: function($,startIndex) {
  return this.substring$2($,startIndex,null)
},
 is$String: true
};

$$.AbstractWorkerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.AudioContextEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.BatteryManagerEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.BodyElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$load: function() {
  return this.operator$index$1('load');
}
};

$$.DOMApplicationCacheEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.DedicatedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.DocumentEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$keyDown: function() {
  return this.operator$index$1('keydown');
},
 get$keyUp: function() {
  return this.operator$index$1('keyup');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$readyStateChange: function() {
  return this.operator$index$1('readystatechange');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 reset$2: function(arg0, arg1) { return this.get$reset().call$2(arg0, arg1); }
};

$$._ChildrenElementList = {"": ["_liblib$_element>", "_childElements"],
 "super": "Object",
 _toList$0: function() {
  var t1, t3, output, len, i, t2;
  t1 = this._childElements;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this._toList$0$bailout(1, t1);
  t3 = t1.length;
  output = $._ListImpl_List(t3);
  for (len = t1.length, i = 0; i < len; ++i) {
    t2 = t1[i];
    if (i >= t3)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 _toList$0$bailout: function(state0, t1) {
  var output, len, i, t2;
  output = $._ListImpl_List($.get$length(t1));
  for (len = $.get$length(t1), i = 0; $.ltB(i, len); ++i) {
    t2 = $.index(t1, i);
    if (i >= output.length)
      throw $.ioore(i);
    output[i] = t2;
  }
  return output;
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this._childElements); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var output, t1, t2;
  output = [];
  t1 = new $._ChildrenElementList_filter_anon(output, f);
  for (t2 = $.iterator(this._childElements); t2.get$hasNext() === true;)
    t1.call$1(t2.next$0());
  return $._FrozenElementList$_wrap(output);
},
 get$isEmpty: function() {
  return this._liblib$_element.get$$$dom_firstElementChild() == null;
},
 get$length: function() {
  return $.get$length(this._childElements);
},
 operator$index$1: function(index) {
  return $.index(this._childElements, index);
},
 oprator$indexSet$2: function(index, value) {
  this._liblib$_element.$$dom_replaceChild$2(value, $.index(this._childElements, index));
},
 set$length: function(newLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 add$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 addLast$1: function(value) {
  this._liblib$_element.$$dom_appendChild$1(value);
  return value;
},
 iterator$0: function() {
  return $.iterator(this._toList$0());
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection), t2 = this._liblib$_element; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnimplementedError$(null));
},
 getRange$2: function(start, rangeLength) {
  return $._FrozenElementList$_wrap($._Lists_getRange(this, start, rangeLength, []));
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  this._liblib$_element.set$text('');
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._liblib$_element.$$dom_removeChild$1(result);
  return result;
},
 get$last: function() {
  return this._liblib$_element.get$$$dom_lastElementChild();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementList = {"": ["_nodeList"],
 "super": "Object",
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
},
 filter$1: function(f) {
  var out, t1, t2;
  out = [];
  for (t1 = $.iterator(this); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(out).add$1(out, t2);
  }
  return out;
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._nodeList);
},
 get$length: function() {
  return $.get$length(this._nodeList);
},
 operator$index$1: function(index) {
  return $.index(this._nodeList, index);
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 set$length: function(newLength) {
  $.set$length(this._nodeList, newLength);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$(''));
},
 iterator$0: function() {
  return $._FrozenElementListIterator$(this);
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$(''));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._nodeList;
  return $._FrozenElementList$_wrap($.getInterceptor(t1).getRange$2(t1, start, rangeLength));
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._nodeList, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$(''));
},
 get$last: function() {
  return $.get$last(this._nodeList);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._FrozenElementListIterator = {"": ["_liblib$_list", "_index"],
 "super": "Object",
 next$0: function() {
  var t1, t2;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._liblib$_list;
  t2 = this._index;
  this._index = t2 + 1;
  return t1.operator$index$1(t2);
},
 get$hasNext: function() {
  return $.lt(this._index, $.get$length(this._liblib$_list));
}
};

$$.ElementEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$keyDown: function() {
  return this.operator$index$1('keydown');
},
 get$keyUp: function() {
  return this.operator$index$1('keyup');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 reset$2: function(arg0, arg1) { return this.get$reset().call$2(arg0, arg1); }
};

$$.EventSourceEvents = {"": ["_ptr"],
 "super": "Events",
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.Events = {"": ["_ptr"],
 "super": "Object",
 operator$index$1: function(type) {
  return $.EventListenerList$(this._ptr, type);
}
};

$$.EventListenerList = {"": ["_ptr", "_type"],
 "super": "Object",
 add$2: function(listener, useCapture) {
  this._ptr.$$dom_addEventListener$3(this._type, listener, useCapture);
  return this;
},
 add$1: function(listener) {
  return this.add$2(listener,false)
},
 remove$2: function(listener, useCapture) {
  this._ptr.$$dom_removeEventListener$3(this._type, listener, useCapture);
  return this;
},
 remove$1: function(listener) {
  return this.remove$2(listener,false)
}
};

$$.FileReaderEvents = {"": ["_ptr"],
 "super": "Events",
 get$load: function() {
  return this.operator$index$1('load');
}
};

$$.FileWriterEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FrameSetElementEvents = {"": ["_ptr"],
 "super": "ElementEvents",
 get$load: function() {
  return this.operator$index$1('load');
}
};

$$.HttpRequestEvents = {"": ["_ptr"],
 "super": "Events",
 get$load: function() {
  return this.operator$index$1('load');
},
 get$readyStateChange: function() {
  return this.operator$index$1('readystatechange');
}
};

$$.HttpRequestUploadEvents = {"": ["_ptr"],
 "super": "Events",
 get$load: function() {
  return this.operator$index$1('load');
}
};

$$.IDBDatabaseEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBOpenDBRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.IDBRequestEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.IDBTransactionEvents = {"": ["_ptr"],
 "super": "Events",
 get$complete: function() {
  return this.operator$index$1('complete');
},
 complete$1: function(arg0) { return this.get$complete().call$1(arg0); }
};

$$.IDBVersionChangeRequestEvents = {"": ["_ptr"],
 "super": "IDBRequestEvents"
};

$$.InputElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.LocalWindowEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$keyDown: function() {
  return this.operator$index$1('keydown');
},
 get$keyUp: function() {
  return this.operator$index$1('keyup');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 reset$2: function(arg0, arg1) { return this.get$reset().call$2(arg0, arg1); }
};

$$.MediaElementEvents = {"": ["_ptr"],
 "super": "ElementEvents"
};

$$.MediaStreamEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MediaStreamTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.MessagePortEvents = {"": ["_ptr"],
 "super": "Events"
};

$$._ChildNodeListLazy = {"": ["_this"],
 "super": "Object",
 get$last: function() {
  return this._this.lastChild;
},
 add$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._this.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection), t2 = this._this; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = this.get$last();
  if (!(result == null))
    this._this.$$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._this.set$text('');
},
 oprator$indexSet$2: function(index, value) {
  this._this.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 iterator$0: function() {
  return $.iterator(this._this.get$$$dom_childNodes());
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 get$length: function() {
  return $.get$length(this._this.get$$$dom_childNodes());
},
 operator$index$1: function(index) {
  return $.index(this._this.get$$$dom_childNodes(), index);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._ListWrapper = {"": [],
 "super": "Object",
 iterator$0: function() {
  return $.iterator(this._liblib$_list);
},
 forEach$1: function(f) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).forEach$1(t1, f);
},
 filter$1: function(f) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).filter$1(t1, f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this._liblib$_list);
},
 get$length: function() {
  return $.get$length(this._liblib$_list);
},
 operator$index$1: function(index) {
  return $.index(this._liblib$_list, index);
},
 oprator$indexSet$2: function(index, value) {
  $.indexSet(this._liblib$_list, index, value);
},
 set$length: function(newLength) {
  $.set$length(this._liblib$_list, newLength);
},
 add$1: function(value) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).add$1(t1, value);
},
 addLast$1: function(value) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).addLast$1(t1, value);
},
 addAll$1: function(collection) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).addAll$1(t1, collection);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this._liblib$_list, element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 clear$0: function() {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).clear$0(t1);
},
 removeLast$0: function() {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).removeLast$0(t1);
},
 get$last: function() {
  return $.get$last(this._liblib$_list);
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._liblib$_list;
  return $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
},
 removeRange$2: function(start, rangeLength) {
  return $.removeRange(this._liblib$_list, start, rangeLength);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._NodeListWrapper = {"": ["_liblib$_list"],
 "super": "_ListWrapper",
 filter$1: function(f) {
  var t1 = this._liblib$_list;
  return $._NodeListWrapper$($.getInterceptor(t1).filter$1(t1, f));
},
 getRange$2: function(start, rangeLength) {
  var t1 = this._liblib$_list;
  return $._NodeListWrapper$($.getInterceptor(t1).getRange$2(t1, start, rangeLength));
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$.NotificationEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); }
};

$$.PeerConnection00Events = {"": ["_ptr"],
 "super": "Events",
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.RTCDataChannelEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.RTCPeerConnectionEvents = {"": ["_ptr"],
 "super": "Events",
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.ScriptProcessorNodeEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.SharedWorkerContextEvents = {"": ["_ptr"],
 "super": "WorkerContextEvents"
};

$$.SpeechRecognitionEvents = {"": ["_ptr"],
 "super": "Events",
 get$start: function() {
  return this.operator$index$1('start');
},
 start$0: function() { return this.get$start().call$0(); },
 start$1: function(arg0) { return this.get$start().call$1(arg0); }
};

$$.TextTrackEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackCueEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.TextTrackListEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.WebSocketEvents = {"": ["_ptr"],
 "super": "Events",
 get$close: function() {
  return this.operator$index$1('close');
},
 close$0: function() { return this.get$close().call$0(); },
 get$open: function() {
  return this.operator$index$1('open');
},
 open$3: function(arg0, arg1, arg2) { return this.get$open().call$3(arg0, arg1, arg2); }
};

$$.WorkerEvents = {"": ["_ptr"],
 "super": "AbstractWorkerEvents"
};

$$.WorkerContextEvents = {"": ["_ptr"],
 "super": "Events"
};

$$.FilteredElementList = {"": ["_node", "_childNodes"],
 "super": "Object",
 get$_filtered: function() {
  var t1 = this._childNodes;
  return $._ListImpl_List$from($.getInterceptor(t1).filter$1(t1, new $.FilteredElementList__filtered_anon()));
},
 forEach$1: function(f) {
  var t1 = this.get$_filtered();
  $.getInterceptor(t1).forEach$1(t1, f);
},
 oprator$indexSet$2: function(index, value) {
  this.operator$index$1(index).replaceWith$1(value);
},
 set$length: function(newLength) {
  var len = $.get$length(this);
  if ($.geB(newLength, len))
    return;
  else if ($.ltB(newLength, 0))
    throw $.$$throw($.ArgumentError$('Invalid list length'));
  this.removeRange$2($.sub(newLength, 1), $.sub(len, newLength));
},
 add$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor(t1).add$1(t1, value);
},
 get$add: function() { return new $.BoundClosure0(this, 'add$1'); },
 addAll$1: function(collection) {
  $.getInterceptor(collection).forEach$1(collection, this.get$add());
},
 addLast$1: function(value) {
  var t1 = this._childNodes;
  $.getInterceptor(t1).add$1(t1, value);
},
 removeRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  t1 = $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
  $.getInterceptor(t1).forEach$1(t1, new $.FilteredElementList_removeRange_anon());
},
 clear$0: function() {
  var t1 = this._childNodes;
  $.getInterceptor(t1).clear$0(t1);
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    result.remove$0();
  return result;
},
 filter$1: function(f) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).filter$1(t1, f);
},
 get$isEmpty: function() {
  return $.get$isEmpty(this.get$_filtered());
},
 get$length: function() {
  return $.get$length(this.get$_filtered());
},
 operator$index$1: function(index) {
  return $.index(this.get$_filtered(), index);
},
 iterator$0: function() {
  return $.iterator(this.get$_filtered());
},
 getRange$2: function(start, rangeLength) {
  var t1 = this.get$_filtered();
  return $.getInterceptor(t1).getRange$2(t1, start, rangeLength);
},
 indexOf$2: function(element, start) {
  return $.indexOf$2(this.get$_filtered(), element, start);
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return $.get$last(this.get$_filtered());
},
 is$List: function() { return true; },
 is$Collection: function() { return true; }
};

$$._DOMWindowCrossFrame = {"": ["_window"],
 "super": "Object",
 get$location: function() {
  return $._LocationCrossFrame__createSafe(this._window.location);
},
 close$0: function() {
  return this._window.close();
}
};

$$._LocationCrossFrame = {"": ["_location>"],
 "super": "Object",
 is$Location: function() { return true; }
};

$$._LocationWrapper = {"": ["_ptr"],
 "super": "Object",
 assign$1: function(url) {
  return this._ptr.assign(url);
},
 toString$0: function() {
  return this._ptr.toString();
},
 is$Location: function() { return true; }
};

$$.FixedSizeListIterator = {"": ["_liblib$_length", "_array", "_pos"],
 "super": "_VariableSizeListIterator",
 get$hasNext: function() {
  return $.gt(this._liblib$_length, this._pos);
}
};

$$._VariableSizeListIterator = {"": [],
 "super": "Object",
 get$hasNext: function() {
  return $.gt($.get$length(this._array), this._pos);
},
 next$0: function() {
  var t1, t3;
  if (this.get$hasNext() !== true)
    throw $.$$throw($.StateError$('No more elements'));
  t1 = this._array;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.next$0$bailout(1, t1);
  t3 = this._pos;
  this._pos = t3 + 1;
  if (t3 < 0 || t3 >= t1.length)
    throw $.ioore(t3);
  return t1[t3];
},
 next$0$bailout: function(state0, t1) {
  var t3 = this._pos;
  this._pos = t3 + 1;
  return $.index(t1, t3);
}
};

$$._Manager = {"": ["nextIsolateId=", "currentManagerId>", "nextManagerId", "currentContext=", "rootContext=", "topEventLoop>", "fromCommandLine>", "isWorker>", "supportsWorkers", "isolates>", "mainManager>", "managers>"],
 "super": "Object",
 get$useWorkers: function() {
  return this.supportsWorkers;
},
 get$needSerialization: function() {
  return this.get$useWorkers();
},
 _nativeDetectEnvironment$0: function() {
  this.isWorker = $isWorker;
  this.supportsWorkers = $supportsWorkers;
  this.fromCommandLine = typeof(window) == 'undefined';
},
 _nativeInitWorkerMessageHandler$0: function() {
  $globalThis.onmessage = function (e) {
  _IsolateNatives._processWorkerMessage(this.mainManager, e);
};
},
 maybeCloseWorker$0: function() {
  if ($.get$isEmpty(this.isolates) === true)
    this.mainManager.postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'close'])));
},
 _Manager$0: function() {
  this._nativeDetectEnvironment$0();
  this.topEventLoop = $._EventLoop$();
  this.isolates = $.Map_Map();
  this.managers = $.Map_Map();
  if (this.isWorker === true) {
    this.mainManager = $._MainManagerStub$();
    this._nativeInitWorkerMessageHandler$0();
  }
}
};

$$._IsolateContext = {"": ["id=", "ports>", "isolateStatics"],
 "super": "Object",
 initGlobals$0: function() {
  $initGlobals(this);
},
 eval$1: function(code) {
  var old, result, t1;
  old = $._globalState().get$currentContext();
  $._globalState().set$currentContext(this);
  this._setGlobals$0();
  result = null;
  try {
    result = code.call$0();
  } finally {
    t1 = old;
    $._globalState().set$currentContext(t1);
    if (!(old == null))
      old._setGlobals$0();
  }
  return result;
},
 _setGlobals$0: function() {
  $setGlobals(this);
},
 lookup$1: function(portId) {
  return $.index(this.ports, portId);
},
 register$2: function(portId, port) {
  if (this.ports.containsKey$1(portId) === true)
    throw $.$$throw($._ExceptionImplementation$('Registry: ports must be registered only once.'));
  $.indexSet(this.ports, portId, port);
  $.indexSet($._globalState().get$isolates(), this.id, this);
},
 unregister$1: function(portId) {
  this.ports.remove$1(portId);
  if ($.get$isEmpty(this.ports) === true)
    $._globalState().get$isolates().remove$1(this.id);
},
 _IsolateContext$0: function() {
  var t1, t2;
  t1 = $._globalState();
  t2 = t1.get$nextIsolateId();
  t1.set$nextIsolateId($.add(t2, 1));
  this.id = t2;
  this.ports = $.Map_Map();
  this.initGlobals$0();
}
};

$$._EventLoop = {"": ["events"],
 "super": "Object",
 enqueue$3: function(isolate, fn, msg) {
  var t1 = this.events;
  $.getInterceptor(t1).addLast$1(t1, $._IsolateEvent$(isolate, fn, msg));
},
 dequeue$0: function() {
  var t1 = this.events;
  if ($.get$isEmpty(t1) === true)
    return;
  return t1.removeFirst$0();
},
 runIteration$0: function() {
  var event$ = this.dequeue$0();
  if (event$ == null) {
    if ($._globalState().get$isWorker() === true)
      $._globalState().maybeCloseWorker$0();
    else if (!($._globalState().get$rootContext() == null) && $._globalState().get$isolates().containsKey$1($._globalState().get$rootContext().get$id()) === true && $._globalState().get$fromCommandLine() === true && $.get$isEmpty($._globalState().get$rootContext().get$ports()) === true)
      throw $.$$throw($._ExceptionImplementation$('Program exited with open ReceivePorts.'));
    return false;
  }
  event$.process$0();
  return true;
},
 _runHelper$0: function() {
  if (!($._window() == null))
    new $._EventLoop__runHelper_next(this).call$0();
  else
    for (; this.runIteration$0() === true;)
      ;
},
 run$0: function(exception) {
  var t1, e, trace;
  if ($._globalState().get$isWorker() !== true)
    this._runHelper$0();
  else
    try {
      this._runHelper$0();
    } catch (exception) {
      t1 = $.unwrapException(exception);
      e = t1;
      trace = $.getTraceFromException(exception);
      $._globalState().get$mainManager().postMessage$1($._serializeMessage($.makeLiteralMap(['command', 'error', 'msg', $.S(e) + '\n' + $.S(trace)])));
    }

}
};

$$._IsolateEvent = {"": ["isolate", "fn", "message"],
 "super": "Object",
 process$0: function() {
  this.isolate.eval$1(this.fn);
}
};

$$._MainManagerStub = {"": [],
 "super": "Object",
 get$id: function() {
  return 0;
},
 set$id: function(i) {
  throw $.$$throw($.UnimplementedError$(null));
},
 postMessage$1: function(msg) {
  $globalThis.postMessage(msg);
}
};

$$._BaseSendPort = {"": ["_isolateId>"],
 "super": "Object",
 _checkReplyTo$1: function(replyTo) {
  if (!(replyTo == null) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_NativeJsSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_WorkerSendPort) && !(typeof replyTo === 'object' && replyTo !== null && !!replyTo.is$_BufferingSendPort))
    throw $.$$throw($._ExceptionImplementation$('SendPort.send: Illegal replyTo port type'));
},
 call$1: function(message) {
  var completer, port;
  completer = $.Completer_Completer();
  port = $._ReceivePortImpl$();
  this.send$2(message, port.toSendPort$0());
  port.receive$1(new $._BaseSendPort_call_anon(completer, port));
  return completer.get$future();
},
 is$SendPort: true
};

$$._NativeJsSendPort = {"": ["_receivePort>", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._NativeJsSendPort_send_anon(this, replyTo, message));
},
 operator$eq$1: function(other) {
  return typeof other === 'object' && other !== null && !!other.is$_NativeJsSendPort && $.eqB(this._receivePort, other._receivePort);
},
 get$hashCode: function() {
  return this._receivePort.get$_id();
},
 is$_NativeJsSendPort: true,
 is$SendPort: true
};

$$._WorkerSendPort = {"": ["_workerId>", "_receivePortId", "_isolateId"],
 "super": "_BaseSendPort",
 send$2: function(message, replyTo) {
  $._waitForPendingPorts([message, replyTo], new $._WorkerSendPort_send_anon(replyTo, this, message));
},
 operator$eq$1: function(other) {
  var t1;
  if (typeof other === 'object' && other !== null && !!other.is$_WorkerSendPort)
    t1 = $.eqB(this._workerId, other._workerId) && $.eqB(this._isolateId, other._isolateId) && $.eqB(this._receivePortId, other._receivePortId);
  else
    t1 = false;
  return t1;
},
 get$hashCode: function() {
  return $.xor($.xor($.shl(this._workerId, 16), $.shl(this._isolateId, 8)), this._receivePortId);
},
 is$_WorkerSendPort: true,
 is$SendPort: true
};

$$._ReceivePortImpl = {"": ["_id>", "_callback>"],
 "super": "Object",
 _callback$2: function(arg0, arg1) { return this._callback.call$2(arg0, arg1); },
 receive$1: function(onMessage) {
  this._callback = onMessage;
},
 close$0: function() {
  this._callback = null;
  $._globalState().get$currentContext().unregister$1(this._id);
},
 toSendPort$0: function() {
  return $._NativeJsSendPort$(this, $._globalState().get$currentContext().get$id());
},
 _ReceivePortImpl$0: function() {
  $._globalState().get$currentContext().register$2(this._id, this);
}
};

$$._PendingSendPortFinder = {"": ["ports>", "_visited"],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
},
 visitList$1: function(list) {
  if (!($.index(this._visited, list) == null))
    return;
  $.indexSet(this._visited, list, true);
  $.getInterceptor(list).forEach$1(list, new $._PendingSendPortFinder_visitList_anon(this));
},
 visitMap$1: function(map) {
  var t1;
  if (!($.index(this._visited, map) == null))
    return;
  $.indexSet(this._visited, map, true);
  t1 = map.get$values();
  $.getInterceptor(t1).forEach$1(t1, new $._PendingSendPortFinder_visitMap_anon(this));
},
 visitSendPort$1: function(port) {
  var t1;
  if (!!port.is$_BufferingSendPort && port._port == null) {
    t1 = this.ports;
    $.getInterceptor(t1).add$1(t1, port.get$_futurePort());
  }
},
 _PendingSendPortFinder$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsSerializer = {"": ["_nextFreeRefId", "_visited"],
 "super": "_Serializer",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return ['sendport', x._workerId, x._isolateId, x._receivePortId];
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(x));
},
 visitNativeJsSendPort$1: function(port) {
  return ['sendport', $._globalState().get$currentManagerId(), port._isolateId, port._receivePort.get$_id()];
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsSerializer$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsCopier = {"": ["_visited"],
 "super": "_Copier",
 visitSendPort$1: function(x) {
  if (typeof x === 'object' && x !== null && !!x.is$_NativeJsSendPort)
    return this.visitNativeJsSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_WorkerSendPort)
    return this.visitWorkerSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$_BufferingSendPort)
    return this.visitBufferingSendPort$1(x);
  throw $.$$throw('Illegal underlying port ' + $.S(this.get$p()));
},
 visitNativeJsSendPort$1: function(port) {
  return $._NativeJsSendPort$(port._receivePort, port._isolateId);
},
 visitWorkerSendPort$1: function(port) {
  return $._WorkerSendPort$(port._workerId, port._isolateId, port._receivePortId);
},
 visitBufferingSendPort$1: function(port) {
  var t1 = port._port;
  if (!(t1 == null))
    return this.visitSendPort$1(t1);
  else
    throw $.$$throw('internal error: must call _waitForPendingPorts to ensure all ports are resolved at this point.');
},
 _JsCopier$0: function() {
  this._visited = $._JsVisitedMap$();
}
};

$$._JsDeserializer = {"": ["_deserialized"],
 "super": "_Deserializer",
 deserializeSendPort$1: function(x) {
  var managerId, isolateId, receivePortId, isolate;
  managerId = $.index(x, 1);
  isolateId = $.index(x, 2);
  receivePortId = $.index(x, 3);
  if ($.eqB(managerId, $._globalState().get$currentManagerId())) {
    isolate = $.index($._globalState().get$isolates(), isolateId);
    if (isolate == null)
      return;
    return $._NativeJsSendPort$(isolate.lookup$1(receivePortId), isolateId);
  } else
    return $._WorkerSendPort$(managerId, isolateId, receivePortId);
}
};

$$._JsVisitedMap = {"": ["tagged"],
 "super": "Object",
 operator$index$1: function(object) {
  return object['__MessageTraverser__attached_info__'];
},
 oprator$indexSet$2: function(object, info) {
  var t1 = this.tagged;
  $.getInterceptor(t1).add$1(t1, object);
  object['__MessageTraverser__attached_info__'] = info;
},
 reset$0: function() {
  this.tagged = $._ListImpl_List(null);
},
 cleanup$0: function() {
  var length$, i;
  length$ = $.get$length(this.tagged);
  if (typeof length$ !== 'number')
    return this.cleanup$0$bailout(1, length$);
  i = 0;
  for (; i < length$; ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
},
 cleanup$0$bailout: function(state0, length$) {
  var i = 0;
  for (; $.ltB(i, length$); ++i)
    $.index(this.tagged, i)['__MessageTraverser__attached_info__'] = null;
  this.tagged = null;
}
};

$$._MessageTraverserVisitedMap = {"": [],
 "super": "Object",
 operator$index$1: function(object) {
  return;
},
 oprator$indexSet$2: function(object, info) {
},
 reset$0: function() {
},
 cleanup$0: function() {
}
};

$$._MessageTraverser = {"": [],
 "super": "Object",
 traverse$1: function(x) {
  var t1, result;
  t1 = x;
  if (t1 == null || typeof t1 === 'string' || typeof t1 === 'number' || typeof t1 === 'boolean')
    return this.visitPrimitive$1(x);
  this._visited.reset$0();
  result = null;
  try {
    result = this._dispatch$1(x);
  } finally {
    this._visited.cleanup$0();
  }
  return result;
},
 _dispatch$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return this.visitPrimitive$1(x);
  if (typeof x === 'object' && x !== null && (x.constructor === Array || x.is$List()))
    return this.visitList$1(x);
  if (typeof x === 'object' && x !== null && x.is$Map())
    return this.visitMap$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPort)
    return this.visitSendPort$1(x);
  if (typeof x === 'object' && x !== null && !!x.is$SendPortSync)
    return this.visitSendPortSync$1(x);
  return this.visitObject$1(x);
},
 visitObject$1: function(x) {
  throw $.$$throw('Message serialization: Illegal value ' + $.S(x) + ' passed');
}
};

$$._Copier = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copy, len, i;
  if (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior())
    return this.visitList$1$bailout(1, list);
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = list.length;
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    copy[i] = this._dispatch$1(list[i]);
  }
  return copy;
},
 visitList$1$bailout: function(state0, list) {
  var copy, len, i, t1;
  copy = $.index(this._visited, list);
  if (!(copy == null))
    return copy;
  len = $.get$length(list);
  copy = $._ListImpl_List(len);
  $.indexSet(this._visited, list, copy);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= copy.length)
      throw $.ioore(i);
    copy[i] = t1;
  }
  return copy;
},
 visitMap$1: function(map) {
  var t1, t2;
  t1 = {};
  t1.copy_10 = $.index(this._visited, map);
  t2 = t1.copy_10;
  if (!(t2 == null))
    return t2;
  t1.copy_10 = $.Map_Map();
  $.indexSet(this._visited, map, t1.copy_10);
  $.getInterceptor(map).forEach$1(map, new $._Copier_visitMap_anon(this, t1));
  return t1.copy_10;
}
};

$$._Serializer = {"": [],
 "super": "_MessageTraverser",
 visitPrimitive$1: function(x) {
  return x;
},
 visitList$1: function(list) {
  var copyId, id;
  copyId = $.index(this._visited, list);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, list, id);
  return ['list', id, this._serializeList$1(list)];
},
 visitMap$1: function(map) {
  var copyId, id;
  copyId = $.index(this._visited, map);
  if (!(copyId == null))
    return ['ref', copyId];
  id = this._nextFreeRefId;
  this._nextFreeRefId = id + 1;
  $.indexSet(this._visited, map, id);
  return ['map', id, this._serializeList$1(map.get$keys()), this._serializeList$1(map.get$values())];
},
 _serializeList$1: function(list) {
  var len, result, i;
  if (typeof list !== 'string' && (typeof list !== 'object' || list === null || list.constructor !== Array && !list.is$JavaScriptIndexingBehavior()))
    return this._serializeList$1$bailout(1, list);
  len = list.length;
  result = $._ListImpl_List(len);
  for (i = 0; i < len; ++i) {
    if (i >= list.length)
      throw $.ioore(i);
    result[i] = this._dispatch$1(list[i]);
  }
  return result;
},
 _serializeList$1$bailout: function(state0, list) {
  var len, result, i, t1;
  len = $.get$length(list);
  result = $._ListImpl_List(len);
  for (i = 0; $.ltB(i, len); ++i) {
    t1 = this._dispatch$1($.index(list, i));
    if (i >= result.length)
      throw $.ioore(i);
    result[i] = t1;
  }
  return result;
}
};

$$._Deserializer = {"": [],
 "super": "Object",
 deserialize$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  this._deserialized = $.HashMap_HashMap();
  return this._deserializeHelper$1(x);
},
 _deserializeHelper$1: function(x) {
  if (x == null || typeof x === 'string' || typeof x === 'number' || typeof x === 'boolean')
    return x;
  switch ($.index(x, 0)) {
    case 'ref':
      return this._deserializeRef$1(x);
    case 'list':
      return this._deserializeList$1(x);
    case 'map':
      return this._deserializeMap$1(x);
    case 'sendport':
      return this.deserializeSendPort$1(x);
    default:
      return this.deserializeObject$1(x);
  }
},
 _deserializeRef$1: function(x) {
  var id = $.index(x, 1);
  return $.index(this._deserialized, id);
},
 _deserializeList$1: function(x) {
  var id, dartList, len, i, t1;
  id = $.index(x, 1);
  dartList = $.index(x, 2);
  if (typeof dartList !== 'object' || dartList === null || (dartList.constructor !== Array || !!dartList.immutable$list) && !dartList.is$JavaScriptIndexingBehavior())
    return this._deserializeList$1$bailout(1, dartList, id);
  $.indexSet(this._deserialized, id, dartList);
  len = dartList.length;
  for (i = 0; i < len; ++i) {
    if (i >= dartList.length)
      throw $.ioore(i);
    t1 = this._deserializeHelper$1(dartList[i]);
    if (i >= dartList.length)
      throw $.ioore(i);
    dartList[i] = t1;
  }
  return dartList;
},
 _deserializeList$1$bailout: function(state0, dartList, id) {
  var len, i;
  $.indexSet(this._deserialized, id, dartList);
  len = $.get$length(dartList);
  for (i = 0; $.ltB(i, len); ++i)
    $.indexSet(dartList, i, this._deserializeHelper$1($.index(dartList, i)));
  return dartList;
},
 _deserializeMap$1: function(x) {
  var result, id, keys, values, len, i, key;
  result = $.Map_Map();
  id = $.index(x, 1);
  $.indexSet(this._deserialized, id, result);
  keys = $.index(x, 2);
  if (typeof keys !== 'string' && (typeof keys !== 'object' || keys === null || keys.constructor !== Array && !keys.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(1, x, result, keys);
  values = $.index(x, 3);
  if (typeof values !== 'string' && (typeof values !== 'object' || values === null || values.constructor !== Array && !values.is$JavaScriptIndexingBehavior()))
    return this._deserializeMap$1$bailout(2, values, result, keys);
  len = keys.length;
  for (i = 0; i < len; ++i) {
    if (i >= keys.length)
      throw $.ioore(i);
    key = this._deserializeHelper$1(keys[i]);
    if (i >= values.length)
      throw $.ioore(i);
    $.indexSet(result, key, this._deserializeHelper$1(values[i]));
  }
  return result;
},
 _deserializeMap$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      keys = env2;
      result = env1;
      x = env0;
      break;
    case 2:
      keys = env2;
      result = env1;
      values = env0;
      break;
  }
  switch (state0) {
    case 0:
      result = $.Map_Map();
      id = $.index(x, 1);
      $.indexSet(this._deserialized, id, result);
      keys = $.index(x, 2);
    case 1:
      state0 = 0;
      values = $.index(x, 3);
    case 2:
      var result, id, keys, x, values, len, i;
      state0 = 0;
      len = $.get$length(keys);
      for (i = 0; $.ltB(i, len); ++i)
        $.indexSet(result, this._deserializeHelper$1($.index(keys, i)), this._deserializeHelper$1($.index(values, i)));
      return result;
  }
},
 deserializeObject$1: function(x) {
  throw $.$$throw('Unexpected serialized object');
}
};

$$._Timer = {"": ["_once", "_handle"],
 "super": "Object",
 _Timer$repeating$2: function(milliSeconds, callback) {
  this._handle = $._window().setInterval$2(new $.anon0(callback, this), milliSeconds);
},
 _Timer$2: function(milliSeconds, callback) {
  this._handle = $._window().setTimeout$2(new $.anon(this, callback), milliSeconds);
}
};

$$._JsonParser = {"": ["json", "length>", "position"],
 "super": "Object",
 parseToplevel$0: function() {
  var result = this.parseValue$0();
  if (!(this.token$0() == null))
    this.error$1('Junk at the end of JSON input');
  return result;
},
 parseValue$0: function() {
  var token = this.token$0();
  if (token == null)
    this.error$1('Nothing to parse');
  switch (token) {
    case 34:
      return this.parseString$0();
    case 45:
      return this.parseNumber$0();
    case 110:
      return this.expectKeyword$2('null', null);
    case 102:
      return this.expectKeyword$2('false', false);
    case 116:
      return this.expectKeyword$2('true', true);
    case 123:
      return this.parseObject$0();
    case 91:
      return this.parseList$0();
    default:
      this.error$1('Unexpected token');
  }
},
 expectKeyword$2: function(word, value) {
  var i;
  for (i = 0; i < word.length; ++i) {
    if (!$.eqB(this.char$0(), $.getInterceptor(word).charCodeAt$1(word, i)))
      this.error$1('Expected keyword \'' + word + '\'');
    this.position = $.add(this.position, 1);
  }
  return value;
},
 parseObject$0: function() {
  var object, key, t1;
  object = $.makeLiteralMap([]);
  if (typeof object !== 'object' || object === null || (object.constructor !== Array || !!object.immutable$list) && !object.is$JavaScriptIndexingBehavior())
    return this.parseObject$0$bailout(1, object);
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 125)) {
    for (; true;) {
      key = this.parseString$0();
      if (!$.eqB(this.token$0(), 58))
        this.error$1('Expected \':\' when parsing object');
      this.position = $.add(this.position, 1);
      t1 = this.parseValue$0();
      if (key !== (key | 0))
        throw $.iae(key);
      if (key < 0 || key >= object.length)
        throw $.ioore(key);
      object[key] = t1;
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 125))
      this.error$1('Expected \'}\' at end of object');
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseObject$0$bailout: function(state0, object) {
  var key;
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 125)) {
    for (; true;) {
      key = this.parseString$0();
      if (!$.eqB(this.token$0(), 58))
        this.error$1('Expected \':\' when parsing object');
      this.position = $.add(this.position, 1);
      $.indexSet(object, key, this.parseValue$0());
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 125))
      this.error$1('Expected \'}\' at end of object');
  }
  this.position = $.add(this.position, 1);
  return object;
},
 parseList$0: function() {
  var list = [];
  this.position = $.add(this.position, 1);
  if (!$.eqB(this.token$0(), 93)) {
    for (; true;) {
      $.getInterceptor(list).add$1(list, this.parseValue$0());
      if (!$.eqB(this.token$0(), 44))
        break;
      this.position = $.add(this.position, 1);
    }
    if (!$.eqB(this.token$0(), 93))
      this.error$1('Expected \']\' at end of list');
  }
  this.position = $.add(this.position, 1);
  return list;
},
 parseString$0: function(exception) {
  var charCodes, t1, t2, c, codeString;
  if (!$.eqB(this.token$0(), 34))
    this.error$1('Expected string literal');
  this.position = $.add(this.position, 1);
  charCodes = $._ListImpl_List(null);
  for (t1 = this.length, t2 = this.json; true;) {
    c = this.char$0();
    if ($.eqB(c, 34)) {
      this.position = $.add(this.position, 1);
      break;
    }
    if ($.eqB(c, 92)) {
      this.position = $.add(this.position, 1);
      if ($.eqB(this.position, t1))
        this.error$1('\\ at the end of input');
      switch (this.char$0()) {
        case 34:
          c = 34;
          break;
        case 92:
          c = 92;
          break;
        case 47:
          c = 47;
          break;
        case 98:
          c = 8;
          break;
        case 110:
          c = 10;
          break;
        case 114:
          c = 13;
          break;
        case 102:
          c = 12;
          break;
        case 116:
          c = 9;
          break;
        case 117:
          if ($.gtB($.add(this.position, 5), t1))
            this.error$1('Invalid unicode esacape sequence');
          codeString = $.getInterceptor(t2).substring$2(t2, $.add(this.position, 1), $.add(this.position, 5));
          try {
            c = $.int_parse('0x' + $.S(codeString));
          } catch (exception) {
            $.unwrapException(exception);
            this.error$1('Invalid unicode esacape sequence');
          }

          this.position = $.add(this.position, 4);
          break;
        default:
          this.error$1('Invalid esacape sequence in string literal');
      }
    }
    $.getInterceptor(charCodes).add$1(charCodes, c);
    this.position = $.add(this.position, 1);
  }
  return $.String_String$fromCharCodes(charCodes);
},
 parseNumber$0: function() {
  var startPos, char$, isInt, t1, number;
  if (!$.eqB(this.token$0(), 45))
    this.error$1('Expected number literal');
  startPos = this.position;
  char$ = this.char$0();
  if (char$ === 45)
    char$ = this.nextChar$0();
  if (char$ === 48)
    char$ = this.nextChar$0();
  else if ($.geB(char$, 48) && $.leB(char$, 57)) {
    char$ = this.nextChar$0();
    if (typeof char$ !== 'number')
      return this.parseNumber$0$bailout(1, startPos, char$);
    while (true) {
      if (!($.geB(char$, 48) && $.leB(char$, 57)))
        break;
      char$ = this.nextChar$0();
    }
  } else
    this.error$1('Expected digit when parsing number');
  if (char$ === 46) {
    char$ = this.nextChar$0();
    if ($.geB(char$, 48) && $.leB(char$, 57)) {
      char$ = this.nextChar$0();
      if (typeof char$ !== 'number')
        return this.parseNumber$0$bailout(2, startPos, char$);
      while (true) {
        if (!($.geB(char$, 48) && $.leB(char$, 57)))
          break;
        char$ = this.nextChar$0();
      }
      isInt = false;
    } else {
      this.error$1('Expected digit following comma');
      isInt = true;
    }
  } else
    isInt = true;
  if (char$ === 101 || char$ === 69) {
    char$ = this.nextChar$0();
    if (char$ === 45 || char$ === 43)
      char$ = this.nextChar$0();
    if ($.geB(char$, 48) && $.leB(char$, 57)) {
      char$ = this.nextChar$0();
      if (typeof char$ !== 'number')
        return this.parseNumber$0$bailout(3, char$, startPos);
      while (true) {
        if (!($.geB(char$, 48) && $.leB(char$, 57)))
          break;
        char$ = this.nextChar$0();
      }
      isInt = false;
    } else
      this.error$1('Expected digit following \'e\' or \'E\'');
  }
  t1 = this.json;
  number = $.getInterceptor(t1).substring$2(t1, startPos, this.position);
  if (isInt)
    return $.int_parse(number);
  else
    return $.double_parse(number);
},
 parseNumber$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      char$ = env1;
      startPos = env0;
      break;
    case 2:
      char$ = env1;
      startPos = env0;
      break;
    case 3:
      startPos = env1;
      char$ = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (!$.eqB(this.token$0(), 45))
        this.error$1('Expected number literal');
      startPos = this.position;
      char$ = this.char$0();
      if (char$ === 45)
        char$ = this.nextChar$0();
    case 1:
      if (state0 === 0 && char$ === 48)
        char$ = this.nextChar$0();
      else
        switch (state0) {
          case 0:
          case 1:
            if (state0 === 1 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 1:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
              }
            else
              this.error$1('Expected digit when parsing number');
        }
    case 2:
      if (state0 === 2 || state0 === 0 && char$ === 46)
        switch (state0) {
          case 0:
            char$ = this.nextChar$0();
          case 2:
            if (state0 === 2 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 2:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
                  isInt = false;
              }
            else {
              this.error$1('Expected digit following comma');
              isInt = true;
            }
        }
      else
        isInt = true;
    case 3:
      var startPos, char$, isInt, t1, number;
      if (state0 === 3 || state0 === 0 && (char$ === 101 || char$ === 69))
        switch (state0) {
          case 0:
            char$ = this.nextChar$0();
            if (char$ === 45 || char$ === 43)
              char$ = this.nextChar$0();
          case 3:
            if (state0 === 3 || state0 === 0 && $.geB(char$, 48) && $.leB(char$, 57))
              switch (state0) {
                case 0:
                  char$ = this.nextChar$0();
                case 3:
                  state0 = 0;
                  while (true) {
                    if (!($.geB(char$, 48) && $.leB(char$, 57)))
                      break;
                    char$ = this.nextChar$0();
                  }
                  isInt = false;
              }
            else
              this.error$1('Expected digit following \'e\' or \'E\'');
        }
      t1 = this.json;
      number = $.getInterceptor(t1).substring$2(t1, startPos, this.position);
      if (isInt)
        return $.int_parse(number);
      else
        return $.double_parse(number);
  }
},
 char$0: function() {
  var t1, t3;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.char$0$bailout(1, t1);
  t3 = this.length;
  if (typeof t3 !== 'number')
    return this.char$0$bailout(2, t1, t3);
  if (t1 >= t3)
    this.error$1('Unexpected end of JSON stream');
  t1 = this.json;
  return $.getInterceptor(t1).charCodeAt$1(t1, this.position);
},
 char$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.position;
    case 1:
      state0 = 0;
      t3 = this.length;
    case 2:
      var t1, t3;
      state0 = 0;
      if ($.geB(t1, t3))
        this.error$1('Unexpected end of JSON stream');
      t1 = this.json;
      return $.getInterceptor(t1).charCodeAt$1(t1, this.position);
  }
},
 nextChar$0: function() {
  var t1, t3;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(1, t1);
  this.position = t1 + 1;
  t1 = this.position;
  if (typeof t1 !== 'number')
    return this.nextChar$0$bailout(2, t1);
  t3 = this.length;
  if (typeof t3 !== 'number')
    return this.nextChar$0$bailout(3, t1, t3);
  if (t1 >= t3)
    return 0;
  t1 = this.json;
  return $.getInterceptor(t1).charCodeAt$1(t1, this.position);
},
 nextChar$0$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
    case 3:
      t3 = env1;
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.position;
    case 1:
      state0 = 0;
      this.position = $.add(t1, 1);
      t1 = this.position;
    case 2:
      state0 = 0;
      t3 = this.length;
    case 3:
      var t1, t3;
      state0 = 0;
      if ($.geB(t1, t3))
        return 0;
      t1 = this.json;
      return $.getInterceptor(t1).charCodeAt$1(t1, this.position);
  }
},
 token$0: function() {
  var t1, t2, t3, char$, token;
  t1 = this.json;
  t2 = this.length;
  if (typeof t2 !== 'number')
    return this.token$0$bailout(1, t2, t1);
  for (; true;) {
    t3 = this.position;
    if (typeof t3 !== 'number')
      return this.token$0$bailout(2, t3, t2, t1);
    if (t3 >= t2)
      return;
    char$ = $.getInterceptor(t1).charCodeAt$1(t1, this.position);
    t3 = $._JsonParser_tokens;
    if (typeof t3 !== 'string' && (typeof t3 !== 'object' || t3 === null || t3.constructor !== Array && !t3.is$JavaScriptIndexingBehavior()))
      return this.token$0$bailout(3, t2, char$, t1, t3);
    if (char$ !== (char$ | 0))
      throw $.iae(char$);
    if (char$ < 0 || char$ >= t3.length)
      throw $.ioore(char$);
    token = t3[char$];
    if (token === 32) {
      t3 = this.position;
      if (typeof t3 !== 'number')
        return this.token$0$bailout(4, t2, t1, t3);
      this.position = t3 + 1;
      continue;
    }
    if (token == null)
      return 0;
    return token;
  }
},
 token$0$bailout: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      t2 = env0;
      break;
    case 2:
      t1 = env2;
      t2 = env1;
      t3 = env0;
      break;
    case 3:
      t3 = env3;
      t1 = env2;
      char$ = env1;
      t2 = env0;
      break;
    case 4:
      t3 = env2;
      t1 = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.json;
      t2 = this.length;
    case 1:
      state0 = 0;
    default:
      var t1, t2, t3, char$, token;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!true)
                break L0;
            default:
              c$0: {
                switch (state0) {
                  case 0:
                    t3 = this.position;
                  case 2:
                    state0 = 0;
                    if ($.geB(t3, t2))
                      return;
                    char$ = $.getInterceptor(t1).charCodeAt$1(t1, this.position);
                    t3 = $._JsonParser_tokens;
                  case 3:
                    state0 = 0;
                    token = $.index(t3, char$);
                  case 4:
                    if (state0 === 4 || state0 === 0 && token === 32)
                      switch (state0) {
                        case 0:
                          t3 = this.position;
                        case 4:
                          state0 = 0;
                          this.position = $.add(t3, 1);
                          break c$0;
                      }
                    if (token == null)
                      return 0;
                    return token;
                }
              }
          }
  }
},
 error$1: function(message) {
  throw $.$$throw(message);
},
 _JsonParser$1: function(json) {
  if (!($._JsonParser_tokens == null))
    return;
  $._JsonParser_tokens = $._ListImpl_List(126);
  $.indexSet($._JsonParser_tokens, 9, 32);
  $.indexSet($._JsonParser_tokens, 10, 32);
  $.indexSet($._JsonParser_tokens, 13, 32);
  $.indexSet($._JsonParser_tokens, 32, 32);
  $.indexSet($._JsonParser_tokens, 48, 45);
  $.indexSet($._JsonParser_tokens, 49, 45);
  $.indexSet($._JsonParser_tokens, 50, 45);
  $.indexSet($._JsonParser_tokens, 51, 45);
  $.indexSet($._JsonParser_tokens, 52, 45);
  $.indexSet($._JsonParser_tokens, 53, 45);
  $.indexSet($._JsonParser_tokens, 54, 45);
  $.indexSet($._JsonParser_tokens, 55, 45);
  $.indexSet($._JsonParser_tokens, 56, 45);
  $.indexSet($._JsonParser_tokens, 57, 45);
  $.indexSet($._JsonParser_tokens, 45, 45);
  $.indexSet($._JsonParser_tokens, 123, 123);
  $.indexSet($._JsonParser_tokens, 125, 125);
  $.indexSet($._JsonParser_tokens, 91, 91);
  $.indexSet($._JsonParser_tokens, 93, 93);
  $.indexSet($._JsonParser_tokens, 34, 34);
  $.indexSet($._JsonParser_tokens, 58, 58);
  $.indexSet($._JsonParser_tokens, 44, 44);
  $.indexSet($._JsonParser_tokens, 110, 110);
  $.indexSet($._JsonParser_tokens, 116, 116);
  $.indexSet($._JsonParser_tokens, 102, 102);
}
};

$$.SVGElementInstanceEvents = {"": ["_ptr"],
 "super": "Events",
 get$click: function() {
  return this.operator$index$1('click');
},
 get$keyDown: function() {
  return this.operator$index$1('keydown');
},
 get$keyUp: function() {
  return this.operator$index$1('keyup');
},
 get$load: function() {
  return this.operator$index$1('load');
},
 get$reset: function() {
  return this.operator$index$1('reset');
},
 reset$0: function() { return this.get$reset().call$0(); },
 reset$2: function(arg0, arg1) { return this.get$reset().call$2(arg0, arg1); }
};

$$.Game = {"": ["render", "gameobjects", "level>", "player", "camera>", "messages", "showCollisionField", "loader", "stop", "currentlevel", "levelsource", "frames", "lastTime", "time", "fps>"],
 "super": "Object",
 start$0: function() {
  this.loader = $.PreLoader$(this.get$loadingFinished());
  this.levelsource = 'resources/levels/level_' + $.S(this.currentlevel) + '.json';
  this.loader.loadJson$1(this.levelsource);
  this.loader.loadImage$1('resources/images/images.png');
  this.loader.loadImage$1('resources/images/c0v0a16t1uv1t80Cs1Cd.png');
  this.loader.start$0();
},
 loadingFinished$0: function() {
  var dombutton, main, t1;
  dombutton = $.ButtonElement_ButtonElement();
  main = $.document().query$1('#openscreen');
  main.get$style().set$transition('opacity 0.5s ease-in-out');
  $.document().query$1('#loading').set$text('');
  dombutton.set$text('Start!');
  t1 = dombutton.get$on().get$click();
  $.getInterceptor(t1).add$1(t1, new $.Game_loadingFinished_anon(main, this));
  t1 = main.get$nodes();
  $.getInterceptor(t1).add$1(t1, dombutton);
},
 get$loadingFinished: function() { return new $.BoundClosure(this, 'loadingFinished$0'); },
 startGame$0: function() {
  this.level.start$0();
  this.camera.start$1(this);
  this.render.start$1(this);
  var t1 = this.gameobjects;
  $.getInterceptor(t1).add$1(t1, this.player);
  this.loadLevel$0();
  $.window().requestAnimationFrame$1(this.get$loop());
  this.messages.sendMessage$1('Hello there :). Messages will pop-up here.');
},
 loadLevel$0: function() {
  var t1, t2, t3;
  this.level.loadLevel$1($.JsonController_getJson(this.levelsource));
  t1 = this.camera;
  t1.w = 512;
  t1.h = 448;
  t2 = $.S($.eqB(t1.h, this.level.get$h()) ? $.toInt($.div($.sub($.sub($.window().get$innerHeight(), 44), t1.h), 2)) : 38) + 'px';
  t3 = this.render;
  t3.layer.canvas.get$style().set$marginTop(t2);
  t3.start$1(this);
  t1.border = $.toInt($.min(t1.w, t1.h) * 0.3);
  this.player.reset$2($.toDouble(this.level.get$startx()), $.toDouble(this.level.get$starty()));
},
 get$loadLevel: function() { return new $.BoundClosure(this, 'loadLevel$0'); },
 resetLevel$0: function() {
  this.player.reset$2($.toDouble(this.level.get$startx()), $.toDouble(this.level.get$starty()));
},
 goToLevel$1: function(location$) {
  var t1 = this.get$loadLevel();
  this.loader.set$callback(t1);
  this.loader.reset$0();
  this.levelsource = location$;
  this.loader.loadJson$1(this.levelsource);
  this.loader.start$0();
},
 goToLevelid$1: function(id) {
  this.currentlevel = id;
  this.goToLevel$1('resources/levels/level_' + $.S(this.currentlevel) + '.json');
},
 goToNextLevel$0: function() {
  this.currentlevel = $.add(this.currentlevel, 1);
  this.goToLevel$1('resources/levels/level_' + $.S(this.currentlevel) + '.json');
},
 loop$1: function(looptime) {
  var t1, delta, t4, t2;
  if (typeof looptime !== 'number')
    return this.loop$1$bailout(1, looptime);
  if (!this.stop) {
    if (this.lastTime == null)
      this.lastTime = looptime;
    this.update$1(looptime);
    t1 = this.lastTime;
    if (typeof t1 !== 'number')
      return this.loop$1$bailout(2, looptime, t1);
    delta = looptime - t1;
    this.lastTime = looptime;
    t1 = this.time;
    if (typeof t1 !== 'number')
      return this.loop$1$bailout(3, t1, delta);
    this.time = t1 + delta;
    t4 = this.frames;
    if (typeof t4 !== 'number')
      return this.loop$1$bailout(4, t4);
    this.frames = t4 + 1;
    t1 = this.time;
    if (typeof t1 !== 'number')
      return this.loop$1$bailout(5, t1);
    if (t1 > 1000) {
      t2 = this.frames;
      if (typeof t2 !== 'number')
        throw $.iae(t2);
      this.fps = $.toInt(1000 * t2 / t1);
      this.time = 0;
      this.frames = 0;
    }
    $.window().requestAnimationFrame$1(this.get$loop());
  }
},
 loop$1$bailout: function(state0, env0, env1) {
  switch (state0) {
    case 1:
      looptime = env0;
      break;
    case 2:
      t1 = env1;
      looptime = env0;
      break;
    case 3:
      delta = env1;
      t1 = env0;
      break;
    case 4:
      t4 = env0;
      break;
    case 5:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
    default:
      var looptime, t1, delta, t4, t2;
      if (state0 === 5 || state0 === 4 || state0 === 3 || state0 === 2 || state0 === 0 && !this.stop)
        switch (state0) {
          case 0:
            if (this.lastTime == null)
              this.lastTime = looptime;
            this.update$1(looptime);
            t1 = this.lastTime;
          case 2:
            state0 = 0;
            delta = $.sub(looptime, t1);
            this.lastTime = looptime;
            t1 = this.time;
          case 3:
            state0 = 0;
            this.time = $.add(t1, delta);
            t4 = this.frames;
          case 4:
            state0 = 0;
            this.frames = $.add(t4, 1);
            t1 = this.time;
          case 5:
            state0 = 0;
            if ($.gtB(t1, 1000)) {
              t1 = this.frames;
              if (typeof t1 !== 'number')
                throw $.iae(t1);
              t1 = 1000 * t1;
              t2 = this.time;
              if (typeof t2 !== 'number')
                throw $.iae(t2);
              this.fps = $.toInt(t1 / t2);
              this.time = 0;
              this.frames = 0;
            }
            $.window().requestAnimationFrame$1(this.get$loop());
        }
  }
},
 get$loop: function() { return new $.BoundClosure0(this, 'loop$1'); },
 update$1: function(looptime) {
  var t1, i, t2, t3;
  for (t1 = this.gameobjects, i = 0; t2 = i < t1.length, t3 = this.lastTime, t2; ++i)
    t1[i].update$2(t3, looptime);
  this.render.update$2(t3, looptime);
},
 handleKey$1: function(event$) {
  var key, down;
  key = event$.get$keyCode();
  down = $.eq(event$.get$type(), 'keydown');
  if ($.eqB(key, 37) || $.eqB(key, 65))
    this.player.setMove$2(1, down);
  if ($.eqB(key, 39) || $.eqB(key, 68))
    this.player.setMove$2(2, down);
  if ($.eqB(key, 38) || $.eqB(key, 87))
    this.player.setMove$2(3, down);
  if ($.eqB(key, 40) || $.eqB(key, 83))
    this.player.setMove$2(4, down);
  if (($.eqB(key, 13) || $.eqB(key, 81)) && down === true)
    this.player.enterObject$0();
  if ($.eqB(key, 67) && down === true)
    this.showCollisionField = !this.showCollisionField;
},
 get$handleKey: function() { return new $.BoundClosure0(this, 'handleKey$1'); },
 Game$0: function() {
  this.level = $.Level$(this);
  this.player = $.Player$(this);
  this.messages = $.MessageController$();
}
};

$$.Camera = {"": ["x=", "y=", "w=", "h=", "border<", "game"],
 "super": "Object",
 start$1: function(g) {
  this.game = g;
},
 centerObject$1: function(object) {
  var t1, t2;
  if ($.gtB(object.get$collisionmidpointx(), $.sub($.add(this.x, this.w), this.border)))
    this.x = $.toInt($.sub($.add(object.get$collisionmidpointx(), this.border), this.w));
  if ($.ltB(object.get$collisionmidpointx(), $.add(this.x, this.border)))
    this.x = $.toInt($.sub(object.get$collisionmidpointx(), this.border));
  if ($.gtB(object.get$collisionmidpointy(), $.sub($.add(this.y, this.h), this.border)))
    this.y = $.toInt($.sub($.add(object.get$collisionmidpointy(), this.border), this.h));
  if ($.ltB(object.get$collisionmidpointy(), $.add(this.y, this.border)))
    this.y = $.toInt($.sub(object.get$collisionmidpointy(), this.border));
  if ($.ltB(this.x, this.game.get$level().get$x()))
    this.x = $.toInt(this.game.get$level().get$x());
  t1 = $.add(this.x, this.w);
  t2 = this.game.get$level();
  if ($.geB(t1, $.add(t2.get$x(), t2.get$w())))
    this.x = $.sub(this.game.get$level().get$w(), this.w);
  if ($.ltB(this.y, this.game.get$level().get$y()))
    this.y = $.toInt(this.game.get$level().get$y());
  t1 = $.add(this.y, this.h);
  t2 = this.game.get$level();
  if ($.geB(t1, $.add(t2.get$y(), t2.get$h())))
    this.y = $.sub(this.game.get$level().get$h(), this.h);
}
};

$$.CollisionField = {"": ["x=", "y=", "w=", "h=", "_midpointy", "_midpointx"],
 "super": "Object",
 get$x2: function() {
  return $.add(this.x, this.w);
},
 get$y2: function() {
  return $.add(this.y, this.h);
},
 get$midpointy: function() {
  var t1 = this._midpointy;
  if (t1 === -1)
    return $.toInt($.add(this.y, $.div(this.h, 2)));
  return t1;
},
 get$midpointx: function() {
  var t1 = this._midpointx;
  if (t1 === -1)
    return $.toInt($.add(this.x, $.div(this.w, 2)));
  return t1;
}
};

$$.MessageController = {"": ["messages", "dommessages", "timeout", "showing"],
 "super": "Object",
 sendMessage$1: function(message) {
  var t1 = this.messages;
  $.getInterceptor(t1).add$1(t1, message);
  this.displayMessages$0();
},
 displayMessages$0: function() {
  var t1, t2, t3, t4;
  t1 = this.showing;
  t2 = this.dommessages;
  if (t1) {
    t1 = $.S(t2.get$innerHTML()) + '<br/>';
    t3 = this.messages;
    if (0 >= t3.length)
      throw $.ioore(0);
    t4 = t1 + $.S(t3[0]);
    this.dommessages.set$innerHTML(t4);
  } else {
    t1 = this.messages;
    if (0 >= t1.length)
      throw $.ioore(0);
    t2.set$innerHTML(t1[0]);
  }
  this.showing = true;
  $.removeRange(this.messages, 0, 1);
  this.dommessages.get$style().set$opacity('1.0');
  if (!(this.timeout == null))
    $.window().clearTimeout$1(this.timeout);
  this.timeout = $.window().setTimeout$2(this.get$hideMessages(), 5000);
},
 get$displayMessages: function() { return new $.BoundClosure(this, 'displayMessages$0'); },
 hideMessages$0: function() {
  this.timeout = null;
  this.showing = false;
  this.dommessages.get$style().set$opacity('0.0');
  if (this.messages.length === 0)
    return;
  this.timeout = $.window().setTimeout$2(this.get$displayMessages(), 500);
},
 get$hideMessages: function() { return new $.BoundClosure(this, 'hideMessages$0'); },
 MessageController$0: function() {
  this.dommessages = $.DivElement_DivElement();
  this.dommessages.set$id('messages');
  this.dommessages.get$style().set$opacity('0.0');
  this.dommessages.get$style().set$transition('opacity 0.5s ease-in-out');
  var t1 = $.document().get$body().get$elements();
  $.getInterceptor(t1).add$1(t1, this.dommessages);
}
};

$$.Render = {"": ["game", "layer>"],
 "super": "Object",
 start$1: function(g) {
  var t1, t2;
  this.layer.canvas.get$style().set$opacity('1.0');
  t1 = g.camera;
  t2 = t1.w;
  this.layer.set$width(t2);
  t1 = t1.h;
  this.layer.set$height(t1);
  this.game = g;
},
 update$2: function(lastTime, looptime) {
  var t1, t2, t3;
  t1 = this.layer;
  $.getInterceptor(t1).clear$0(t1);
  t1 = this.game;
  t2 = t1.get$level();
  t3 = this.layer;
  t1 = t1.get$camera();
  t2.draw$3(t3, t1.get$x(), t1.get$y());
  this.layer.ctx.fillText$3('FPS: ' + $.S(this.game.get$fps()), 10, 20);
},
 Render$0: function() {
  this.layer = $.RenderLayer$();
  this.layer.canvas.set$id('game');
  this.layer.canvas.get$style().set$opacity('0.0');
  this.layer.canvas.get$style().set$transition('opacity 1s ease-in-out');
  var t1 = $.document().get$body().get$nodes();
  $.getInterceptor(t1).add$1(t1, this.layer.canvas);
}
};

$$.Level = {"": ["x=", "y=", "w=", "h=", "flags=", "startx>", "starty>", "game", "layer>", "leveltiles>", "updatetiles"],
 "super": "Object",
 loadLevel$1: function(json) {
  var tilesx, tilesy, t3, iy, t1, ix, t2, intkey, levelobj, i, objectTileX, objectTileY, objectTileEndX, objectTileEndY;
  this.w = $.index(json, 'w');
  this.h = $.index(json, 'h');
  if (json.containsKey$1('startx') === true)
    this.startx = $.index(json, 'startx');
  if (json.containsKey$1('starty') === true)
    this.starty = $.index(json, 'starty');
  tilesx = $.toInt($.ceil($.div(this.w, 32)));
  if (tilesx !== (tilesx | 0))
    return this.loadLevel$1$bailout(1, json, tilesx);
  tilesy = $.toInt($.ceil($.div(this.h, 32)));
  if (typeof tilesy !== 'number')
    return this.loadLevel$1$bailout(2, json, tilesy, tilesx);
  this.leveltiles = $._ListImpl_List(null);
  t3 = this.w;
  this.layer.set$width(t3);
  t3 = this.h;
  this.layer.set$height(t3);
  for (iy = 0; iy < tilesy; ++iy)
    for (t1 = iy * 32, ix = 0; ix < tilesx; ++ix) {
      t2 = this.leveltiles;
      $.getInterceptor(t2).add$1(t2, $.LevelTile$(ix * 32, t1, this, $.index($.index($.index(json, 'tiles'), iy), ix)));
    }
  this.flags = 0;
  for (intkey = 0, levelobj = null, i = 0; $.ltB(i, $.get$length($.index(json, 'objects'))); ++i) {
    if ($.eqB($.index($.index($.index(json, 'objects'), i), 'type'), 'door'))
      levelobj = $.Door$fromJson(this.game, $.index($.index(json, 'objects'), i), $.toInt(this.x), $.toInt(this.y));
    else if ($.eqB($.index($.index($.index(json, 'objects'), i), 'type'), 'flag')) {
      levelobj = $.Flag$fromJson(this.game, $.index($.index(json, 'objects'), i), $.toInt(this.x), $.toInt(this.y));
      this.flags = $.add(this.flags, 1);
    } else
      continue;
    objectTileX = $.toInt($.floor($.div(levelobj.get$x(), 32)));
    if (objectTileX !== (objectTileX | 0))
      return this.loadLevel$1$bailout(3, objectTileX, i, json, tilesx, levelobj);
    objectTileY = $.toInt($.floor($.div(levelobj.get$y(), 32)));
    if (objectTileY !== (objectTileY | 0))
      return this.loadLevel$1$bailout(4, objectTileX, i, json, tilesx, objectTileY, levelobj);
    objectTileEndX = $.toInt($.ceil($.div($.add(levelobj.get$x(), levelobj.get$w()), 32)));
    if (typeof objectTileEndX !== 'number')
      return this.loadLevel$1$bailout(5, objectTileX, objectTileEndX, i, tilesx, objectTileY, levelobj, json);
    objectTileEndY = $.toInt($.ceil($.div($.add(levelobj.get$y(), levelobj.get$h()), 32)));
    if (typeof objectTileEndY !== 'number')
      return this.loadLevel$1$bailout(6, objectTileX, objectTileEndX, i, tilesx, objectTileY, levelobj, json, objectTileEndY);
    intkey = objectTileY * tilesx + objectTileX;
    for (iy = objectTileY; iy < objectTileEndY; ++iy)
      for (t1 = iy * tilesx, ix = objectTileX; ix < objectTileEndX; ++ix) {
        intkey = t1 + ix;
        if ($.leB($.get$length(this.leveltiles), intkey) || intkey < 0)
          continue;
        $.index(this.leveltiles, intkey).insert$1(levelobj);
      }
  }
  for (i = 0; $.ltB(i, $.get$length(this.leveltiles)); ++i)
    $.index(this.leveltiles, i).draw$3(this.layer, this.x, this.y);
},
 loadLevel$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6, env7) {
  switch (state0) {
    case 1:
      tilesx = env1;
      json = env0;
      break;
    case 2:
      tilesx = env2;
      tilesy = env1;
      json = env0;
      break;
    case 3:
      levelobj = env4;
      tilesx = env3;
      json = env2;
      i = env1;
      objectTileX = env0;
      break;
    case 4:
      levelobj = env5;
      objectTileY = env4;
      tilesx = env3;
      json = env2;
      i = env1;
      objectTileX = env0;
      break;
    case 5:
      json = env6;
      levelobj = env5;
      objectTileY = env4;
      tilesx = env3;
      i = env2;
      objectTileEndX = env1;
      objectTileX = env0;
      break;
    case 6:
      objectTileEndY = env7;
      json = env6;
      levelobj = env5;
      objectTileY = env4;
      tilesx = env3;
      i = env2;
      objectTileEndX = env1;
      objectTileX = env0;
      break;
  }
  switch (state0) {
    case 0:
      this.w = $.index(json, 'w');
      this.h = $.index(json, 'h');
      if (json.containsKey$1('startx') === true)
        this.startx = $.index(json, 'startx');
      if (json.containsKey$1('starty') === true)
        this.starty = $.index(json, 'starty');
      tilesx = $.toInt($.ceil($.div(this.w, 32)));
    case 1:
      state0 = 0;
      tilesy = $.toInt($.ceil($.div(this.h, 32)));
    case 2:
      state0 = 0;
      this.leveltiles = $._ListImpl_List(null);
      t3 = this.w;
      this.layer.set$width(t3);
      t3 = this.h;
      this.layer.set$height(t3);
      for (iy = 0; $.ltB(iy, tilesy); ++iy)
        for (t1 = iy * 32, ix = 0; $.ltB(ix, tilesx); ++ix) {
          t2 = this.leveltiles;
          $.getInterceptor(t2).add$1(t2, $.LevelTile$(ix * 32, t1, this, $.index($.index($.index(json, 'tiles'), iy), ix)));
        }
      this.flags = 0;
      intkey = 0;
      levelobj = null;
      i = 0;
    default:
      var tilesx, json, tilesy, t3, iy, t1, ix, t2, intkey, levelobj, i, objectTileX, objectTileY, objectTileEndX, objectTileEndY;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.ltB(i, $.get$length($.index(json, 'objects'))))
                break L0;
            default:
              c$0: {
                switch (state0) {
                  case 0:
                    if ($.eqB($.index($.index($.index(json, 'objects'), i), 'type'), 'door'))
                      levelobj = $.Door$fromJson(this.game, $.index($.index(json, 'objects'), i), $.toInt(this.x), $.toInt(this.y));
                    else if ($.eqB($.index($.index($.index(json, 'objects'), i), 'type'), 'flag')) {
                      levelobj = $.Flag$fromJson(this.game, $.index($.index(json, 'objects'), i), $.toInt(this.x), $.toInt(this.y));
                      this.flags = $.add(this.flags, 1);
                    } else
                      break c$0;
                    objectTileX = $.toInt($.floor($.div(levelobj.get$x(), 32)));
                  case 3:
                    state0 = 0;
                    objectTileY = $.toInt($.floor($.div(levelobj.get$y(), 32)));
                  case 4:
                    state0 = 0;
                    objectTileEndX = $.toInt($.ceil($.div($.add(levelobj.get$x(), levelobj.get$w()), 32)));
                  case 5:
                    state0 = 0;
                    objectTileEndY = $.toInt($.ceil($.div($.add(levelobj.get$y(), levelobj.get$h()), 32)));
                  case 6:
                    state0 = 0;
                    intkey = $.add($.mul(objectTileY, tilesx), objectTileX);
                    for (iy = objectTileY; $.ltB(iy, objectTileEndY); iy = $.add(iy, 1))
                      for (ix = objectTileX; $.ltB(ix, objectTileEndX); ix = $.add(ix, 1)) {
                        intkey = $.add($.mul(iy, tilesx), ix);
                        if ($.leB($.get$length(this.leveltiles), intkey) || $.ltB(intkey, 0))
                          continue;
                        $.index(this.leveltiles, intkey).insert$1(levelobj);
                      }
                }
              }
              ++i;
          }
      for (i = 0; $.ltB(i, $.get$length(this.leveltiles)); ++i)
        $.index(this.leveltiles, i).draw$3(this.layer, this.x, this.y);
  }
},
 start$0: function() {
},
 isCollision$1: function(object) {
  var t1, tileCollStartX, t4, tileCollEndX, t7, tileCollStartY, t10, tileCollEndY, t13, tilesx, iy, intkey, ix, t2;
  object.checkLevelBorderCollision$0();
  t1 = object.get$collisionx();
  if (typeof t1 !== 'number')
    return this.isCollision$1$bailout(1, object, t1);
  tileCollStartX = $.toInt($.floor(t1 / 32));
  if (typeof tileCollStartX !== 'number')
    return this.isCollision$1$bailout(2, object, tileCollStartX);
  t4 = object.get$collisionx2();
  if (typeof t4 !== 'number')
    return this.isCollision$1$bailout(3, object, tileCollStartX, t4);
  tileCollEndX = $.toInt($.ceil(t4 / 32));
  if (typeof tileCollEndX !== 'number')
    return this.isCollision$1$bailout(4, object, tileCollEndX, tileCollStartX);
  t7 = object.get$collisiony();
  if (typeof t7 !== 'number')
    return this.isCollision$1$bailout(5, object, tileCollEndX, tileCollStartX, t7);
  tileCollStartY = $.toInt($.floor(t7 / 32));
  if (typeof tileCollStartY !== 'number')
    return this.isCollision$1$bailout(6, object, tileCollStartY, tileCollEndX, tileCollStartX);
  t10 = object.get$collisiony2();
  if (typeof t10 !== 'number')
    return this.isCollision$1$bailout(7, object, tileCollStartY, tileCollEndX, tileCollStartX, t10);
  tileCollEndY = $.toInt($.ceil(t10 / 32));
  if (typeof tileCollEndY !== 'number')
    return this.isCollision$1$bailout(8, object, tileCollEndY, tileCollEndX, tileCollStartX, tileCollStartY);
  t13 = this.w;
  if (typeof t13 !== 'number')
    return this.isCollision$1$bailout(9, object, tileCollEndY, tileCollEndX, tileCollStartY, t13, tileCollStartX);
  tilesx = $.toInt($.ceil(t13 / 32));
  if (typeof tilesx !== 'number')
    return this.isCollision$1$bailout(10, object, tileCollEndY, tileCollEndX, tilesx, tileCollStartY, tileCollStartX);
  for (iy = tileCollStartY, intkey = null; iy <= tileCollEndY; ++iy)
    for (t1 = iy * tilesx, ix = tileCollStartX; ix <= tileCollEndX; ++ix) {
      intkey = t1 + ix;
      t2 = $.get$length(this.leveltiles);
      if (typeof t2 !== 'number')
        return this.isCollision$1$bailout(11, object, tileCollEndX, tilesx, intkey, ix, iy, t2);
      if (t2 <= intkey || intkey < 0)
        continue;
      t2 = this.leveltiles;
      if (typeof t2 !== 'string' && (typeof t2 !== 'object' || t2 === null || t2.constructor !== Array && !t2.is$JavaScriptIndexingBehavior()))
        return this.isCollision$1$bailout(12, object, tileCollEndX, tilesx, intkey, ix, iy, t2);
      if (intkey !== (intkey | 0))
        throw $.iae(intkey);
      if (intkey < 0 || intkey >= t2.length)
        throw $.ioore(intkey);
      t2[intkey].isCollision$1(object);
    }
},
 isCollision$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      t1 = env1;
      object = env0;
      break;
    case 2:
      tileCollStartX = env1;
      object = env0;
      break;
    case 3:
      t4 = env2;
      tileCollStartX = env1;
      object = env0;
      break;
    case 4:
      tileCollStartX = env2;
      tileCollEndX = env1;
      object = env0;
      break;
    case 5:
      t7 = env3;
      tileCollStartX = env2;
      tileCollEndX = env1;
      object = env0;
      break;
    case 6:
      tileCollStartX = env3;
      tileCollEndX = env2;
      tileCollStartY = env1;
      object = env0;
      break;
    case 7:
      t10 = env4;
      tileCollStartX = env3;
      tileCollEndX = env2;
      tileCollStartY = env1;
      object = env0;
      break;
    case 8:
      tileCollStartY = env4;
      tileCollStartX = env3;
      tileCollEndX = env2;
      tileCollEndY = env1;
      object = env0;
      break;
    case 9:
      tileCollStartX = env5;
      t13 = env4;
      tileCollStartY = env3;
      tileCollEndX = env2;
      tileCollEndY = env1;
      object = env0;
      break;
    case 10:
      tileCollStartX = env5;
      tileCollStartY = env4;
      tilesx = env3;
      tileCollEndX = env2;
      tileCollEndY = env1;
      object = env0;
      break;
    case 11:
      t1 = env6;
      iy = env5;
      ix = env4;
      intkey = env3;
      tilesx = env2;
      tileCollEndX = env1;
      object = env0;
      break;
    case 12:
      t1 = env6;
      iy = env5;
      ix = env4;
      intkey = env3;
      tilesx = env2;
      tileCollEndX = env1;
      object = env0;
      break;
  }
  switch (state0) {
    case 0:
      object.checkLevelBorderCollision$0();
      t1 = object.get$collisionx();
    case 1:
      state0 = 0;
      tileCollStartX = $.toInt($.floor($.div(t1, 32)));
    case 2:
      state0 = 0;
      t4 = object.get$collisionx2();
    case 3:
      state0 = 0;
      tileCollEndX = $.toInt($.ceil($.div(t4, 32)));
    case 4:
      state0 = 0;
      t7 = object.get$collisiony();
    case 5:
      state0 = 0;
      tileCollStartY = $.toInt($.floor($.div(t7, 32)));
    case 6:
      state0 = 0;
      t10 = object.get$collisiony2();
    case 7:
      state0 = 0;
      tileCollEndY = $.toInt($.ceil($.div(t10, 32)));
    case 8:
      state0 = 0;
      t13 = this.w;
    case 9:
      state0 = 0;
      tilesx = $.toInt($.ceil($.div(t13, 32)));
    case 10:
      state0 = 0;
      iy = tileCollStartY;
      intkey = null;
    default:
      var t1, object, tileCollStartX, t4, tileCollEndX, t7, tileCollStartY, t10, tileCollEndY, t13, tilesx, iy, intkey, ix;
      L0:
        while (true)
          switch (state0) {
            case 0:
              if (!$.leB(iy, tileCollEndY))
                break L0;
              ix = tileCollStartX;
            default:
              L1:
                while (true)
                  switch (state0) {
                    case 0:
                      if (!$.leB(ix, tileCollEndX))
                        break L1;
                    default:
                      c$1: {
                        switch (state0) {
                          case 0:
                            intkey = $.add($.mul(iy, tilesx), ix);
                            t1 = $.get$length(this.leveltiles);
                          case 11:
                            state0 = 0;
                            if ($.leB(t1, intkey) || $.ltB(intkey, 0))
                              break c$1;
                            t1 = this.leveltiles;
                          case 12:
                            state0 = 0;
                            $.index(t1, intkey).isCollision$1(object);
                        }
                      }
                      ix = $.add(ix, 1);
                  }
              iy = $.add(iy, 1);
          }
  }
},
 draw$3: function(targetlayer, offsetx, offsety) {
  var t1, i;
  for (t1 = this.updatetiles, i = 0; i < t1.length; ++i)
    t1[i].draw$3(this.layer, this.x, this.y);
  $.getInterceptor(t1).clear$0(t1);
  targetlayer.get$ctx().drawImage$3(this.layer.canvas, $.sub(this.x, offsetx), $.sub(this.y, offsety));
}
};

$$.LevelTile = {"": ["x=", "y=", "w=", "h=", "_tileid", "objects", "changed", "collision>", "sprite", "layer>", "level>", "a"],
 "super": "Object",
 get$tileid: function() {
  return this._tileid;
},
 insert$1: function(obj) {
  var t1;
  if (this.objects == null)
    this.objects = $._ListImpl_List(null);
  t1 = this.objects;
  $.getInterceptor(t1).add$1(t1, obj);
  this.changed = true;
  t1 = this.level.updatetiles;
  $.getInterceptor(t1).add$1(t1, this);
},
 update$1: function(obj) {
  var t1, index, t3, t5, t2;
  t1 = this.objects;
  if (t1 == null)
    index = -1;
  else {
    t1 = $.indexOf$1(t1, obj);
    if (typeof t1 !== 'number')
      return this.update$1$bailout0(1, obj, t1);
    index = t1;
  }
  t1 = obj.x;
  if (typeof t1 !== 'number')
    return this.update$1$bailout0(2, obj, t1, index);
  t3 = this.x;
  if (typeof t3 !== 'number')
    return this.update$1$bailout0(3, obj, t1, t3, index);
  t5 = this.w;
  if (typeof t5 !== 'number')
    return this.update$1$bailout0(4, obj, t1, t3, index, t5);
  if (!(t1 >= t3 + t5)) {
    t2 = obj.w;
    if (typeof t2 !== 'number')
      return this.update$1$bailout0(6, obj, index, t1, t2);
    t2 = t1 + t2;
    if (!(t2 <= t3)) {
      t1 = obj.y;
      if (typeof t1 !== 'number')
        return this.update$1$bailout0(8, obj, t1, index);
      t3 = this.y;
      if (typeof t3 !== 'number')
        return this.update$1$bailout0(9, obj, t1, t3, index);
      t5 = this.h;
      if (typeof t5 !== 'number')
        return this.update$1$bailout0(10, obj, t1, t3, index, t5);
      if (!(t1 >= t3 + t5)) {
        t2 = obj.h;
        if (typeof t2 !== 'number')
          return this.update$1$bailout0(12, obj, index, t1, t2);
        t2 = t1 + t2;
        t3 = t2 <= t3;
        t1 = t3;
      } else
        t1 = true;
    } else
      t1 = true;
  } else
    t1 = true;
  if (t1)
    return this.remove$1(obj);
  if (index === -1)
    return this.insert$1(obj);
  this.changed = true;
  t1 = this.level.updatetiles;
  $.getInterceptor(t1).add$1(t1, this);
},
 update$1$bailout0: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      t1 = env1;
      obj = env0;
      break;
    case 2:
      index = env2;
      t1 = env1;
      obj = env0;
      break;
    case 3:
      index = env3;
      t3 = env2;
      t1 = env1;
      obj = env0;
      break;
    case 4:
      t5 = env4;
      index = env3;
      t3 = env2;
      t1 = env1;
      obj = env0;
      break;
    case 5:
      t1 = env2;
      index = env1;
      obj = env0;
      break;
    case 6:
      t3 = env3;
      t1 = env2;
      index = env1;
      obj = env0;
      break;
    case 7:
      t1 = env3;
      t3 = env2;
      index = env1;
      obj = env0;
      break;
    case 8:
      index = env2;
      t1 = env1;
      obj = env0;
      break;
    case 9:
      index = env3;
      t3 = env2;
      t1 = env1;
      obj = env0;
      break;
    case 10:
      t5 = env4;
      index = env3;
      t3 = env2;
      t1 = env1;
      obj = env0;
      break;
    case 11:
      t1 = env2;
      index = env1;
      obj = env0;
      break;
    case 12:
      t3 = env3;
      t1 = env2;
      index = env1;
      obj = env0;
      break;
    case 13:
      t1 = env3;
      t3 = env2;
      index = env1;
      obj = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.objects;
    case 1:
      if (state0 === 0 && t1 == null)
        index = -1;
      else
        switch (state0) {
          case 0:
            t1 = $.indexOf$1(t1, obj);
          case 1:
            state0 = 0;
            index = t1;
        }
      t1 = obj.x;
    case 2:
      state0 = 0;
      t3 = this.x;
    case 3:
      state0 = 0;
      t5 = this.w;
    case 4:
      state0 = 0;
    default:
      var t1, index, obj, t3, t5;
      if (state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && !$.geB(t1, $.add(t3, t5)))
        switch (state0) {
          case 0:
            t1 = obj.x;
          case 5:
            state0 = 0;
            t3 = obj.w;
          case 6:
            state0 = 0;
            t3 = $.add(t1, t3);
            t1 = this.x;
          case 7:
            state0 = 0;
          default:
            if (state0 === 13 || state0 === 12 || state0 === 11 || state0 === 10 || state0 === 9 || state0 === 8 || state0 === 0 && !$.leB(t3, t1))
              switch (state0) {
                case 0:
                  t1 = obj.y;
                case 8:
                  state0 = 0;
                  t3 = this.y;
                case 9:
                  state0 = 0;
                  t5 = this.h;
                case 10:
                  state0 = 0;
                default:
                  if (state0 === 13 || state0 === 12 || state0 === 11 || state0 === 0 && !$.geB(t1, $.add(t3, t5)))
                    switch (state0) {
                      case 0:
                        t1 = obj.y;
                      case 11:
                        state0 = 0;
                        t3 = obj.h;
                      case 12:
                        state0 = 0;
                        t3 = $.add(t1, t3);
                        t1 = this.y;
                      case 13:
                        state0 = 0;
                        t1 = $.leB(t3, t1);
                    }
                  else
                    t1 = true;
              }
            else
              t1 = true;
        }
      else
        t1 = true;
      if (t1)
        return this.remove$1(obj);
      if ($.eqB(index, -1))
        return this.insert$1(obj);
      this.changed = true;
      t1 = this.level.updatetiles;
      $.getInterceptor(t1).add$1(t1, this);
  }
},
 setCollision$1: function(value) {
  if (!value)
    this.collision = null;
  else
    this.collision = $.CollisionField$(0, 0, this.w, this.h);
},
 isCollision$1: function(obj) {
  var t1, t3, t5, i, levelobject;
  if (!(this.collision == null)) {
    obj.checkTileCollision$1(this);
    return;
  }
  if (this.objects == null)
    return;
  t1 = obj.get$collisionx2();
  if (typeof t1 !== 'number')
    return this.isCollision$1$bailout0(1, obj, t1);
  t3 = this.x;
  if (typeof t3 !== 'number')
    return this.isCollision$1$bailout0(2, obj, t1, t3);
  if (t1 > t3) {
    t1 = obj.get$collisionx();
    if (typeof t1 !== 'number')
      return this.isCollision$1$bailout0(3, obj, t1);
    t3 = this.x;
    if (typeof t3 !== 'number')
      return this.isCollision$1$bailout0(4, obj, t1, t3);
    t5 = this.w;
    if (typeof t5 !== 'number')
      return this.isCollision$1$bailout0(5, obj, t1, t3, t5);
    if (t1 < t3 + t5) {
      t1 = obj.get$collisiony2();
      if (typeof t1 !== 'number')
        return this.isCollision$1$bailout0(6, obj, t1);
      ++t1;
      t3 = this.y;
      if (typeof t3 !== 'number')
        return this.isCollision$1$bailout0(7, obj, t1, t3);
      if (t1 > t3) {
        t1 = obj.get$collisiony();
        if (typeof t1 !== 'number')
          return this.isCollision$1$bailout0(8, obj, t1);
        t3 = this.y;
        if (typeof t3 !== 'number')
          return this.isCollision$1$bailout0(9, obj, t3, t1);
        t5 = this.h;
        if (typeof t5 !== 'number')
          return this.isCollision$1$bailout0(10, obj, t3, t5, t1);
        t1 = t1 < t3 + t5;
      } else
        t1 = false;
    } else
      t1 = false;
  } else
    t1 = false;
  if (!t1)
    return;
  i = 0;
  levelobject = null;
  while (true) {
    t1 = $.get$length(this.objects);
    if (typeof t1 !== 'number')
      return this.isCollision$1$bailout0(11, obj, t1, i, levelobject);
    if (!(i < t1))
      break;
    c$0: {
      t1 = this.objects;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.isCollision$1$bailout0(12, obj, i, levelobject, t1);
      if (i >= t1.length)
        throw $.ioore(i);
      if ($.eqB(t1[i], obj))
        break c$0;
      t1 = this.objects;
      if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
        return this.isCollision$1$bailout0(13, obj, t1, i);
      if (i >= t1.length)
        throw $.ioore(i);
      levelobject = t1[i];
      obj.checkObjectCollision$1(levelobject);
    }
    ++i;
  }
},
 isCollision$1$bailout0: function(state0, env0, env1, env2, env3) {
  switch (state0) {
    case 1:
      t1 = env1;
      obj = env0;
      break;
    case 2:
      t3 = env2;
      t1 = env1;
      obj = env0;
      break;
    case 3:
      t1 = env1;
      obj = env0;
      break;
    case 4:
      t3 = env2;
      t1 = env1;
      obj = env0;
      break;
    case 5:
      t5 = env3;
      t3 = env2;
      t1 = env1;
      obj = env0;
      break;
    case 6:
      t1 = env1;
      obj = env0;
      break;
    case 7:
      t3 = env2;
      t1 = env1;
      obj = env0;
      break;
    case 8:
      t1 = env1;
      obj = env0;
      break;
    case 9:
      t1 = env2;
      t3 = env1;
      obj = env0;
      break;
    case 10:
      t1 = env3;
      t5 = env2;
      t3 = env1;
      obj = env0;
      break;
    case 11:
      levelobject = env3;
      i = env2;
      t1 = env1;
      obj = env0;
      break;
    case 12:
      t1 = env3;
      levelobject = env2;
      i = env1;
      obj = env0;
      break;
    case 13:
      i = env2;
      t1 = env1;
      obj = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (!(this.collision == null)) {
        obj.checkTileCollision$1(this);
        return;
      }
      if (this.objects == null)
        return;
      t1 = obj.get$collisionx2();
    case 1:
      state0 = 0;
      t3 = this.x;
    case 2:
      state0 = 0;
    default:
      if (state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.gtB(t1, t3))
        switch (state0) {
          case 0:
            t1 = obj.get$collisionx();
          case 3:
            state0 = 0;
            t3 = this.x;
          case 4:
            state0 = 0;
            t5 = this.w;
          case 5:
            state0 = 0;
          default:
            if (state0 === 10 || state0 === 9 || state0 === 8 || state0 === 7 || state0 === 6 || state0 === 0 && $.ltB(t1, $.add(t3, t5)))
              switch (state0) {
                case 0:
                  t1 = obj.get$collisiony2();
                case 6:
                  state0 = 0;
                  t1 = $.add(t1, 1);
                  t3 = this.y;
                case 7:
                  state0 = 0;
                default:
                  if (state0 === 10 || state0 === 9 || state0 === 8 || state0 === 0 && $.gtB(t1, t3))
                    switch (state0) {
                      case 0:
                        t1 = obj.get$collisiony();
                      case 8:
                        state0 = 0;
                        t3 = this.y;
                      case 9:
                        state0 = 0;
                        t5 = this.h;
                      case 10:
                        state0 = 0;
                        t1 = $.ltB(t1, $.add(t3, t5));
                    }
                  else
                    t1 = false;
              }
            else
              t1 = false;
        }
      else
        t1 = false;
      if (!t1)
        return;
      i = 0;
      levelobject = null;
    case 11:
    case 12:
    case 13:
      var t1, obj, t3, t5, i, levelobject;
      L0:
        while (true)
          switch (state0) {
            case 0:
              t1 = $.get$length(this.objects);
            case 11:
              state0 = 0;
              if (!$.ltB(i, t1))
                break L0;
            default:
              c$0: {
                switch (state0) {
                  case 0:
                    t1 = this.objects;
                  case 12:
                    state0 = 0;
                    if ($.eqB($.index(t1, i), obj))
                      break c$0;
                    t1 = this.objects;
                  case 13:
                    state0 = 0;
                    levelobject = $.index(t1, i);
                    obj.checkObjectCollision$1(levelobject);
                }
              }
              ++i;
          }
  }
},
 remove$1: function(obj) {
  var t1, index;
  t1 = this.objects;
  if (t1 == null)
    index = -1;
  else {
    t1 = $.indexOf$1(t1, obj);
    if (typeof t1 !== 'number')
      return this.remove$1$bailout0(1, t1);
    index = t1;
  }
  if (index === -1)
    return;
  $.removeRange(this.objects, index, 1);
  t1 = $.get$length(this.objects);
  if (typeof t1 !== 'number')
    return this.remove$1$bailout0(2, t1);
  if (t1 === 0)
    this.objects = null;
  this.changed = true;
  t1 = this.level.updatetiles;
  $.getInterceptor(t1).add$1(t1, this);
},
 remove$1$bailout0: function(state0, env0) {
  switch (state0) {
    case 1:
      t1 = env0;
      break;
    case 2:
      t1 = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = this.objects;
    case 1:
      if (state0 === 0 && t1 == null)
        index = -1;
      else
        switch (state0) {
          case 0:
            t1 = $.indexOf$1(t1, obj);
          case 1:
            state0 = 0;
            index = t1;
        }
      if ($.eqB(index, -1))
        return;
      $.removeRange(this.objects, index, 1);
      t1 = $.get$length(this.objects);
    case 2:
      var t1, index;
      state0 = 0;
      if ($.eqB(t1, 0))
        this.objects = null;
      this.changed = true;
      t1 = this.level.updatetiles;
      $.getInterceptor(t1).add$1(t1, this);
  }
},
 draw$3: function(targetlayer, offsetx, offsety) {
  var t1, t2, t3, t5, t6;
  if (typeof offsetx !== 'number')
    return this.draw$3$bailout0(1, targetlayer, offsetx, offsety);
  if (typeof offsety !== 'number')
    return this.draw$3$bailout0(1, targetlayer, offsetx, offsety);
  if (this.changed)
    this.paint$0();
  this.changed = false;
  targetlayer.get$ctx().clearRect$4(this.x, this.y, 32, 32);
  t1 = targetlayer.get$ctx();
  t2 = this.layer.get$canvas();
  t3 = this.x;
  if (typeof t3 !== 'number')
    return this.draw$3$bailout0(2, t2, offsetx, offsety, t3, t1);
  t5 = $.toInt(t3 - offsetx);
  t6 = this.y;
  if (typeof t6 !== 'number')
    return this.draw$3$bailout0(3, t2, offsety, t6, t5, t1);
  t1.drawImage$3(t2, t5, $.toInt(t6 - offsety));
},
 draw$3$bailout0: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      offsety = env2;
      offsetx = env1;
      targetlayer = env0;
      break;
    case 2:
      t1 = env4;
      t3 = env3;
      offsety = env2;
      offsetx = env1;
      t2 = env0;
      break;
    case 3:
      t1 = env4;
      t5 = env3;
      t6 = env2;
      offsety = env1;
      t2 = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      if (this.changed)
        this.paint$0();
      this.changed = false;
      targetlayer.get$ctx().clearRect$4(this.x, this.y, 32, 32);
      t1 = targetlayer.get$ctx();
      t2 = this.layer.get$canvas();
      t3 = this.x;
    case 2:
      state0 = 0;
      t5 = $.toInt($.sub(t3, offsetx));
      t6 = this.y;
    case 3:
      var offsety, offsetx, targetlayer, t1, t2, t3, t5, t6;
      state0 = 0;
      t1.drawImage$3(t2, t5, $.toInt($.sub(t6, offsety)));
  }
},
 paint$0: function() {
  var t1, t2, i;
  t1 = this.layer;
  $.getInterceptor(t1).clear$0(t1);
  if (this.level.game.showCollisionField) {
    t1 = this.a;
    t2 = this.layer;
    if (t1)
      t2.get$ctx().set$strokeStyle('rgb(255,0,0)');
    else
      t2.get$ctx().set$strokeStyle('rgb(0,255,0)');
    this.a = !this.a;
    this.layer.get$ctx().strokeRect$4(0, 0, 32, 32);
  }
  if (!$.eqB(this._tileid, 0))
    this.sprite.drawOnPosition$5(0, 0, 0, 0, this.layer);
  if (this.objects == null)
    return;
  for (i = 0; $.ltB(i, $.get$length(this.objects)); ++i) {
    t1 = this.level.game.showCollisionField;
    t2 = this.objects;
    if (t1)
      $.index(t2, i).drawCollision$3(this.layer, this.x, this.y);
    else
      $.index(t2, i).draw$3(this.layer, this.x, this.y);
  }
  return;
},
 LevelTile$4: function(x, y, level, _tileid) {
  var t1;
  this.layer = $.RenderLayer$();
  t1 = this.w;
  this.layer.set$width(t1);
  t1 = this.h;
  this.layer.set$height(t1);
  t1 = this._tileid;
  if (!$.eqB(t1, 0))
    this.setCollision$1(true);
  this.sprite = $.Sprite$('resources/images/images.png', $.mul($.sub(t1, 1), 32), 0, 32, 32);
}
};

$$.RenderObject = {"": ["x=", "y=", "w=", "h=", "collision>", "layer>"],
 "super": "Object",
 get$collisionx: function() {
  return $.add(this.x, this.collision.x);
},
 get$collisiony: function() {
  return $.add(this.y, this.collision.y);
},
 get$collisionx2: function() {
  return $.add(this.x, this.collision.get$x2());
},
 get$collisiony2: function() {
  return $.add(this.y, this.collision.get$y2());
},
 get$collisionmidpointy: function() {
  return $.add(this.y, this.collision.get$midpointy());
},
 get$collisionmidpointx: function() {
  return $.add($.add(this.x, this.collision.x), $.toInt($.div(this.collision.w, 2)));
},
 draw$3: function(targetlayer, offsetx, offsety) {
  var t1, t2, t3, t5, t6;
  if (typeof offsetx !== 'number')
    return this.draw$3$bailout(1, targetlayer, offsetx, offsety);
  if (typeof offsety !== 'number')
    return this.draw$3$bailout(1, targetlayer, offsetx, offsety);
  this.paint$0();
  t1 = targetlayer.get$ctx();
  t2 = this.layer.canvas;
  t3 = this.x;
  if (typeof t3 !== 'number')
    return this.draw$3$bailout(2, offsetx, offsety, t2, t3, t1);
  t5 = $.toInt($.round(t3 - offsetx));
  t6 = this.y;
  if (typeof t6 !== 'number')
    return this.draw$3$bailout(3, offsety, t2, t6, t1, t5);
  t1.drawImage$3(t2, t5, $.toInt($.round(t6 - offsety)));
},
 draw$3$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      offsety = env2;
      offsetx = env1;
      targetlayer = env0;
      break;
    case 2:
      t1 = env4;
      t3 = env3;
      t2 = env2;
      offsety = env1;
      offsetx = env0;
      break;
    case 3:
      t5 = env4;
      t1 = env3;
      t6 = env2;
      t2 = env1;
      offsety = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      this.paint$0();
      t1 = targetlayer.get$ctx();
      t2 = this.layer.canvas;
      t3 = this.x;
    case 2:
      state0 = 0;
      t5 = $.toInt($.round($.sub(t3, offsetx)));
      t6 = this.y;
    case 3:
      var offsety, offsetx, targetlayer, t1, t2, t3, t5, t6;
      state0 = 0;
      t1.drawImage$3(t2, t5, $.toInt($.round($.sub(t6, offsety))));
  }
},
 paint$0: function() {
},
 drawCollision$3: function(targetlayer, offsetx, offsety) {
  var t1, t2, t3, t4, t5, t6, t7, t8, t9, t11, t12;
  if (typeof offsetx !== 'number')
    return this.drawCollision$3$bailout(1, targetlayer, offsetx, offsety);
  if (typeof offsety !== 'number')
    return this.drawCollision$3$bailout(1, targetlayer, offsetx, offsety);
  this.draw$3(targetlayer, offsetx, offsety);
  this.layer.ctx.set$fillStyle('rgba(255,255,255,0.5)');
  t1 = this.layer.ctx;
  t2 = this.collision;
  t3 = t2.x;
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  t3 = 0 + t3;
  t4 = t2.y;
  if (typeof t4 !== 'number')
    throw $.iae(t4);
  t1.fillRect$4(t3, 0 + t4, t2.w, t2.h);
  this.layer.ctx.set$strokeStyle('#0000ff');
  this.layer.ctx.beginPath$0();
  t3 = this.layer.ctx;
  t1 = this.collision.get$midpointy();
  if (typeof t1 !== 'number')
    throw $.iae(t1);
  t3.moveTo$2(0, 0 + t1);
  t3 = this.layer.ctx;
  t5 = this.w;
  if (typeof t5 !== 'number')
    throw $.iae(t5);
  t5 = 0 + t5;
  t6 = this.collision.get$midpointy();
  if (typeof t6 !== 'number')
    throw $.iae(t6);
  t3.lineTo$2(t5, 0 + t6);
  this.layer.ctx.stroke$0();
  this.layer.ctx.beginPath$0();
  t5 = this.layer.ctx;
  t3 = this.collision.get$midpointx();
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  t5.moveTo$2(0 + t3, 0);
  t5 = this.layer.ctx;
  t7 = this.collision.get$midpointx();
  if (typeof t7 !== 'number')
    throw $.iae(t7);
  t7 = 0 + t7;
  t8 = this.h;
  if (typeof t8 !== 'number')
    throw $.iae(t8);
  t5.lineTo$2(t7, 0 + t8);
  this.layer.ctx.stroke$0();
  this.layer.ctx.set$strokeStyle('rgb(255,255,0)');
  this.layer.ctx.strokeRect$4(0, 0, this.w, this.h);
  t7 = targetlayer.get$ctx();
  t5 = this.layer.canvas;
  t9 = this.x;
  if (typeof t9 !== 'number')
    return this.drawCollision$3$bailout(2, offsetx, offsety, t5, t7, t9);
  t11 = $.toInt($.round(t9 - offsetx));
  t12 = this.y;
  if (typeof t12 !== 'number')
    return this.drawCollision$3$bailout(3, offsety, t5, t7, t12, t11);
  t7.drawImage$3(t5, t11, $.toInt($.round(t12 - offsety)));
},
 drawCollision$3$bailout: function(state0, env0, env1, env2, env3, env4) {
  switch (state0) {
    case 1:
      offsety = env2;
      offsetx = env1;
      targetlayer = env0;
      break;
    case 2:
      t9 = env4;
      t7 = env3;
      t5 = env2;
      offsety = env1;
      offsetx = env0;
      break;
    case 3:
      t11 = env4;
      t12 = env3;
      t7 = env2;
      t5 = env1;
      offsety = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      this.draw$3(targetlayer, offsetx, offsety);
      this.layer.ctx.set$fillStyle('rgba(255,255,255,0.5)');
      t1 = this.layer.ctx;
      t2 = this.collision;
      t3 = t2.x;
      if (typeof t3 !== 'number')
        throw $.iae(t3);
      t3 = 0 + t3;
      t4 = t2.y;
      if (typeof t4 !== 'number')
        throw $.iae(t4);
      t1.fillRect$4(t3, 0 + t4, t2.w, t2.h);
      this.layer.ctx.set$strokeStyle('#0000ff');
      this.layer.ctx.beginPath$0();
      t3 = this.layer.ctx;
      t1 = this.collision.get$midpointy();
      if (typeof t1 !== 'number')
        throw $.iae(t1);
      t3.moveTo$2(0, 0 + t1);
      t3 = this.layer.ctx;
      t5 = this.w;
      if (typeof t5 !== 'number')
        throw $.iae(t5);
      t5 = 0 + t5;
      t6 = this.collision.get$midpointy();
      if (typeof t6 !== 'number')
        throw $.iae(t6);
      t3.lineTo$2(t5, 0 + t6);
      this.layer.ctx.stroke$0();
      this.layer.ctx.beginPath$0();
      t5 = this.layer.ctx;
      t3 = this.collision.get$midpointx();
      if (typeof t3 !== 'number')
        throw $.iae(t3);
      t5.moveTo$2(0 + t3, 0);
      t5 = this.layer.ctx;
      t7 = this.collision.get$midpointx();
      if (typeof t7 !== 'number')
        throw $.iae(t7);
      t7 = 0 + t7;
      t8 = this.h;
      if (typeof t8 !== 'number')
        throw $.iae(t8);
      t5.lineTo$2(t7, 0 + t8);
      this.layer.ctx.stroke$0();
      this.layer.ctx.set$strokeStyle('rgb(255,255,0)');
      this.layer.ctx.strokeRect$4(0, 0, this.w, this.h);
      t7 = targetlayer.get$ctx();
      t5 = this.layer.canvas;
      t9 = this.x;
    case 2:
      state0 = 0;
      t11 = $.toInt($.round($.sub(t9, offsetx)));
      t12 = this.y;
    case 3:
      var offsety, offsetx, targetlayer, t1, t2, t3, t4, t5, t6, t7, t8, t9, t11, t12;
      state0 = 0;
      t7.drawImage$3(t5, t11, $.toInt($.round($.sub(t12, offsety))));
  }
},
 checkCollisionField$3: function(relativex, relativey, collisionfield) {
  return false;
},
 checkTileCollision$1: function(tile) {
  return this.checkCollisionField$3($.toDouble(tile.get$x()), $.toDouble(tile.get$y()), tile.get$collision());
},
 updateDrawLocation$1: function(remove) {
  var maxx, minx, maxy, miny, objectTileX, objectTileY, t3, objectTileEndX, t5, objectTileEndY, tilesx, iy, intkey, t1, ix, t2;
  if (typeof remove !== 'boolean')
    return this.updateDrawLocation$1$bailout(1, remove);
  maxx = $.max($.toInt($.ceil(this.x)), $.toInt($.ceil(this.prev_x)));
  minx = $.min($.toInt($.floor(this.x)), $.toInt($.floor(this.prev_x)));
  maxy = $.max($.toInt($.ceil(this.y)), $.toInt($.ceil(this.prev_y)));
  miny = $.min($.toInt($.floor(this.y)), $.toInt($.floor(this.prev_y)));
  objectTileX = $.toInt($.floor(minx / 32));
  if (typeof objectTileX !== 'number')
    return this.updateDrawLocation$1$bailout(2, remove, objectTileX, miny, maxy, maxx);
  objectTileY = $.toInt($.floor(miny / 32));
  if (typeof objectTileY !== 'number')
    return this.updateDrawLocation$1$bailout(3, remove, objectTileX, objectTileY, maxy, maxx);
  t3 = this.w;
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  objectTileEndX = $.toInt($.ceil((maxx + t3) / 32));
  if (typeof objectTileEndX !== 'number')
    return this.updateDrawLocation$1$bailout(4, remove, objectTileEndX, objectTileX, maxy, objectTileY);
  t5 = this.h;
  if (typeof t5 !== 'number')
    throw $.iae(t5);
  objectTileEndY = $.toInt($.ceil((maxy + t5) / 32));
  if (typeof objectTileEndY !== 'number')
    return this.updateDrawLocation$1$bailout(5, remove, objectTileEndY, objectTileX, objectTileEndX, objectTileY);
  tilesx = $.toInt($.ceil($.div(this.game.level.get$w(), 32)));
  if (typeof tilesx !== 'number')
    return this.updateDrawLocation$1$bailout(6, remove, objectTileEndY, objectTileEndX, objectTileX, tilesx, objectTileY);
  for (iy = objectTileY, intkey = null; iy < objectTileEndY; ++iy)
    for (t1 = iy * tilesx, ix = objectTileX; ix < objectTileEndX; ++ix) {
      intkey = t1 + ix;
      if ($.leB($.get$length(this.game.level.get$leveltiles()), intkey) || intkey < 0)
        continue;
      t2 = this.game.level;
      if (remove)
        $.index(t2.get$leveltiles(), intkey).remove$1(this);
      else
        $.index(t2.get$leveltiles(), intkey).update$1(this);
    }
},
 updateDrawLocation$1$bailout: function(state0, env0, env1, env2, env3, env4, env5) {
  switch (state0) {
    case 1:
      remove = env0;
      break;
    case 2:
      maxx = env4;
      maxy = env3;
      miny = env2;
      objectTileX = env1;
      remove = env0;
      break;
    case 3:
      maxx = env4;
      maxy = env3;
      objectTileY = env2;
      objectTileX = env1;
      remove = env0;
      break;
    case 4:
      objectTileY = env4;
      maxy = env3;
      objectTileX = env2;
      objectTileEndX = env1;
      remove = env0;
      break;
    case 5:
      objectTileY = env4;
      objectTileEndX = env3;
      objectTileX = env2;
      objectTileEndY = env1;
      remove = env0;
      break;
    case 6:
      objectTileY = env5;
      tilesx = env4;
      objectTileX = env3;
      objectTileEndX = env2;
      objectTileEndY = env1;
      remove = env0;
      break;
  }
  switch (state0) {
    case 0:
    case 1:
      state0 = 0;
      maxx = $.max($.toInt($.ceil(this.x)), $.toInt($.ceil(this.prev_x)));
      minx = $.min($.toInt($.floor(this.x)), $.toInt($.floor(this.prev_x)));
      maxy = $.max($.toInt($.ceil(this.y)), $.toInt($.ceil(this.prev_y)));
      miny = $.min($.toInt($.floor(this.y)), $.toInt($.floor(this.prev_y)));
      objectTileX = $.toInt($.floor(minx / 32));
    case 2:
      state0 = 0;
      objectTileY = $.toInt($.floor(miny / 32));
    case 3:
      state0 = 0;
      t3 = this.w;
      if (typeof t3 !== 'number')
        throw $.iae(t3);
      objectTileEndX = $.toInt($.ceil((maxx + t3) / 32));
    case 4:
      state0 = 0;
      t5 = this.h;
      if (typeof t5 !== 'number')
        throw $.iae(t5);
      objectTileEndY = $.toInt($.ceil((maxy + t5) / 32));
    case 5:
      state0 = 0;
      tilesx = $.toInt($.ceil($.div(this.game.level.get$w(), 32)));
    case 6:
      var remove, maxx, minx, maxy, miny, objectTileX, objectTileY, t3, objectTileEndX, t5, objectTileEndY, tilesx, iy, intkey, ix, t1, t2;
      state0 = 0;
      for (iy = objectTileY, intkey = null; $.ltB(iy, objectTileEndY); iy = $.add(iy, 1))
        for (ix = objectTileX; $.ltB(ix, objectTileEndX); ix = $.add(ix, 1)) {
          intkey = $.add($.mul(iy, tilesx), ix);
          if ($.leB($.get$length(this.game.level.get$leveltiles()), intkey) || $.ltB(intkey, 0))
            continue;
          t1 = $.eqB(remove, true);
          t2 = this.game;
          if (t1)
            $.index(t2.level.get$leveltiles(), intkey).remove$1(this);
          else
            $.index(t2.level.get$leveltiles(), intkey).update$1(this);
        }
  }
},
 updateDrawLocation$0: function() {
  return this.updateDrawLocation$1(false)
},
 RenderObject$5: function(game, x, y, w, h) {
  var t1;
  this.collision = $.CollisionField$(0, 0, this.w, this.h);
  this.layer = $.RenderLayer$();
  t1 = this.w;
  this.layer.set$width(t1);
  t1 = this.h;
  this.layer.set$height(t1);
}
};

$$.GameObject = {"": [],
 "super": "RenderObject",
 update$2: function(lastTime, looptime) {
},
 checkCollisionField$3: function(relativex, relativey, collisionfield) {
  var dif_x, dif_y, t1, overlap_x, overlap_y, percentage, percentage_y;
  dif_x = $.sub(this.prev_x, this.x);
  dif_y = $.sub(this.prev_y, this.y);
  t1 = $.gtB(this.get$collisionx2(), relativex) && $.ltB(this.get$collisionx(), $.add(relativex, collisionfield.get$x2())) && $.gtB(this.get$collisiony2(), relativey) && $.ltB(this.get$collisiony(), $.add(relativey, collisionfield.get$y2()));
  if (!t1) {
    if ($.gtB(this.get$collisionx2(), relativex) && $.ltB(this.get$collisionx(), $.add(relativex, collisionfield.get$x2())) && $.gtB($.add(this.get$collisiony2(), 1), relativey) && $.ltB(this.get$collisiony(), $.add(relativey, collisionfield.get$y2())))
      this.onPlatform = true;
    return false;
  }
  if ($.eqB(dif_x, 0) && $.eqB(dif_y, 0))
    return false;
  overlap_x = $.gtB(dif_x, 0) ? $.sub($.add(relativex, collisionfield.get$x2()), this.get$collisionx()) : 0;
  if ($.ltB(dif_x, 0))
    overlap_x = $.sub($.add(relativex, collisionfield.get$x()), this.get$collisionx2());
  overlap_y = $.gtB(dif_y, 0) ? $.sub($.add(relativey, collisionfield.get$y2()), this.get$collisiony()) : 0;
  if ($.ltB(dif_y, 0))
    overlap_y = $.sub($.add(relativey, collisionfield.get$y()), this.get$collisiony2());
  percentage = !$.eqB(dif_x, 0) ? $.div($.sub(dif_x, overlap_x), dif_x) : 0;
  percentage_y = !$.eqB(dif_y, 0) ? $.div($.sub(dif_y, overlap_y), dif_y) : 0;
  percentage = $.max(percentage, percentage_y);
  this.x = $.sub(this.prev_x, $.mul(dif_x, percentage));
  this.y = $.sub(this.prev_y, $.mul(dif_y, percentage));
  if ($.gtB(this.get$collisionx2(), relativex) && $.ltB(this.get$collisionx(), $.add(relativex, collisionfield.get$x2())) && $.gtB($.add(this.get$collisiony2(), 1), relativey) && $.ltB(this.get$collisiony(), $.add(relativey, collisionfield.get$y2())))
    this.onPlatform = true;
  return true;
},
 changeImage$3: function(changeTo, looptime, framerate) {
  var oldframe = this.frame;
  if ($.eqB(this.currentAnimation, changeTo)) {
    if ($.ltB($.sub(looptime, this.lastframeupdate), $.toInt(1000 / framerate)))
      return false;
    this.lastframeupdate = looptime;
    if ($.eqB(this.frame, changeTo.end))
      this.frame = changeTo.start;
    else
      this.frame = $.add(this.frame, 1);
  } else
    this.frame = changeTo.start;
  this.currentAnimation = changeTo;
  return !$.eqB(oldframe, this.frame);
},
 GameObject$5: function(game, x, y, w, h) {
  this.prev_x = x;
  this.prev_y = y;
}
};

$$.Player = {"": ["look", "state", "movepriority", "sprite", "name", "labelwidth", "labelheight", "padding", "labeloffset", "changed", "health", "healthchanged", "hoverobject", "frame", "frameY", "lastframeupdate", "vector", "onPlatform", "currentAnimation", "x", "y", "w", "h", "prev_x", "prev_y", "game", "collision", "layer"],
 "super": "GameObject",
 enterObject$0: function() {
  var t1 = this.hoverobject;
  if (!(t1 == null))
    t1.onEnter$1(this);
},
 setMove$2: function(move, activate) {
  var t1, index;
  t1 = this.movepriority;
  index = $.indexOf$1(t1, move);
  if ($.gtB(index, -1))
    $.removeRange(t1, index, 1);
  if ($.eqB(activate, true))
    $.getInterceptor(t1).add$1(t1, move);
},
 reset$2: function(newx, newy) {
  var t1;
  this.x = newx;
  this.y = newy;
  t1 = this.vector;
  $.getInterceptor(t1).clear$0(t1);
  this.health = 1;
  this.healthchanged = true;
  this.hoverobject = null;
  this.changed = true;
  this.changeState$1(4);
},
 update$2: function(lastTime, looptime) {
  var t1, diff, t2, t3, t4, moved;
  t1 = this.movepriority;
  this.setState$1(t1.length > 0 ? $.get$last(t1) : -1);
  this.prev_x = this.x;
  this.prev_y = this.y;
  diff = $.sub(looptime, lastTime);
  if (typeof diff !== 'number')
    throw $.iae(diff);
  this.handleState$4(0.16 * diff, looptime, 10, $.min($.toDouble(8), 0.128 * diff));
  t1 = this.x;
  t2 = this.vector;
  t3 = t2.xspeed;
  if (typeof t3 !== 'number')
    throw $.iae(t3);
  this.x = $.add(t1, 16 * t3 / 1000 * diff);
  t4 = this.y;
  t2 = t2.yspeed;
  if (typeof t2 !== 'number')
    throw $.iae(t2);
  this.y = $.add(t4, 16 * t2 / 1000 * diff);
  moved = !$.eqB(this.x, this.prev_x) || !$.eqB(this.y, this.prev_y);
  if (!(this.hoverobject == null))
    if (!($.gtB(this.get$collisionx2(), this.hoverobject.get$collisionx()) && $.ltB(this.get$collisionx(), this.hoverobject.get$collisionx2()) && $.gtB(this.get$collisiony2(), this.hoverobject.get$collisiony()) && $.ltB(this.get$collisiony(), this.hoverobject.get$collisiony2()))) {
      this.hoverobject.onOut$1(this);
      this.hoverobject = null;
    }
  if (moved) {
    this.onPlatform = false;
    this.game.level.isCollision$1(this);
    if (!this.onPlatform)
      this.changeState$1(4);
    this.changed = true;
    this.game.camera.centerObject$1(this);
  }
  if ($.eqB(this.changed, true))
    this.updateDrawLocation$0();
  this.changed = false;
},
 changeState$1: function(newState) {
  if (this.state === 4 && newState !== 0)
    return;
  this.state = newState;
},
 setState$1: function(move) {
  switch (move) {
    case 2:
      this.look = 1;
      this.changeState$1(1);
      break;
    case 1:
      this.look = 0;
      this.changeState$1(1);
      break;
    case 3:
      this.changeState$1(2);
      break;
    case 4:
      this.changeState$1(3);
      break;
    default:
      if (this.state !== 4)
        this.changeState$1(0);
  }
},
 handleState$4: function(add, looptime, framerate, gravity) {
  var t1, t2;
  switch (this.state) {
    case 4:
      t1 = this.vector;
      t1.yspeed = $.add(t1.yspeed, gravity);
      this.changed = this.changeImage$3($.CTC5, looptime, framerate);
      break;
    case 0:
      this.changed = this.changeImage$3($.CTC6, looptime, framerate);
      break;
    case 1:
      t1 = this.look === 0;
      t2 = this.x;
      if (t1)
        this.x = $.sub(t2, add);
      else
        this.x = $.add(t2, add);
      this.changed = this.changeImage$3($.CTC7, looptime, framerate);
      break;
    case 2:
      t1 = this.vector;
      $.getInterceptor(t1).clear$0(t1);
      if (this.look === 0)
        t1.addVector$1($.Vector$fromAngle(235, 30));
      else
        t1.addVector$1($.Vector$fromAngle(305, 30));
      this.changeState$1(4);
      this.changed = this.changeImage$3($.CTC5, looptime, framerate);
      break;
    case 3:
      t1 = this.vector;
      $.getInterceptor(t1).clear$0(t1);
      if (this.look === 0)
        t1.addVector$1($.Vector$fromAngle(260, 40));
      else
        t1.addVector$1($.Vector$fromAngle(280, 40));
      this.changeState$1(4);
      this.changed = this.changeImage$3($.CTC5, looptime, framerate);
      break;
  }
},
 paint$0: function() {
  var t1, t2, t3, t4, t5, t6, t7, healthw;
  t1 = this.layer.ctx;
  t2 = this.labelheight;
  t3 = 6 + t2;
  t1.clearRect$4(0, t3, this.w, $.sub($.sub(this.h, 6), t2));
  t1 = this.look === 0;
  t4 = this.sprite;
  t5 = this.labeloffset;
  t6 = this.frame;
  t7 = this.layer;
  if (t1) {
    if (typeof t6 !== 'number')
      throw $.iae(t6);
    t4.drawOnPosition$5(t5, t3, 14 - t6, 1, t7);
  } else
    t4.drawOnPosition$5(t5, t3, t6, 0, t7);
  if (!this.healthchanged)
    return;
  this.healthchanged = false;
  this.layer.ctx.setFillColorRgb$3(0, 0, 0);
  this.layer.ctx.fillRect$4(this.labeloffset, 0 + t2, 22, 6);
  healthw = $.toInt($.floor(21.98 * this.health));
  this.layer.ctx.setFillColorRgb$3(0, 255, 0);
  this.layer.ctx.fillRect$4($.add(this.labeloffset, 1), 1 + t2, healthw, 4);
},
 checkCollisionField$3: function(relativex, relativey, collisionfield) {
  var t1;
  if ($.eqB($.GameObject.prototype.checkCollisionField$3.call(this, relativex, relativey, collisionfield), false))
    return false;
  if (this.onPlatform)
    this.changeState$1(0);
  t1 = this.vector;
  $.getInterceptor(t1).clear$0(t1);
  return true;
},
 checkTileCollision$1: function(tile) {
  var t1;
  if ($.eqB($.RenderObject.prototype.checkTileCollision$1.call(this, tile), false))
    return false;
  if ($.eqB(tile.get$tileid(), 4)) {
    t1 = this.vector;
    $.getInterceptor(t1).clear$0(t1);
    if (this.look === 0)
      t1.addVector$1($.Vector$fromAngle(280, 30));
    else
      t1.addVector$1($.Vector$fromAngle(260, 30));
    this.health = this.health + -0.2;
    if (this.health <= 0) {
      this.game.messages.sendMessage$1('Too bad.. try again!');
      this.game.resetLevel$0();
    }
    this.healthchanged = true;
  }
  return true;
},
 checkLevelBorderCollision$0: function() {
  var t1, t2;
  t1 = this.y;
  t2 = this.game.level;
  if ($.gtB(t1, $.add(t2.get$y(), t2.get$h()))) {
    this.game.messages.sendMessage$1('Too bad.. try again!');
    this.game.resetLevel$0();
  }
  return false;
},
 checkObjectCollision$1: function(o) {
  var t1, t3;
  if (!(typeof o === 'object' && o !== null && !!o.is$InteractiveObject))
    return this.checkObjectCollision$1(o);
  t1 = this.get$collisionx2();
  if (typeof t1 !== 'number')
    return this.checkObjectCollision$1$bailout(1, o, t1);
  t3 = o.get$collisionx();
  if (typeof t3 !== 'number')
    return this.checkObjectCollision$1$bailout(2, o, t3, t1);
  if (t1 > t3) {
    t1 = this.get$collisionx();
    if (typeof t1 !== 'number')
      return this.checkObjectCollision$1$bailout(3, o, t1);
    t3 = o.get$collisionx2();
    if (typeof t3 !== 'number')
      return this.checkObjectCollision$1$bailout(4, o, t3, t1);
    if (t1 < t3) {
      t1 = this.get$collisiony2();
      if (typeof t1 !== 'number')
        return this.checkObjectCollision$1$bailout(5, o, t1);
      t3 = o.get$collisiony();
      if (typeof t3 !== 'number')
        return this.checkObjectCollision$1$bailout(6, o, t3, t1);
      if (t1 > t3) {
        t1 = this.get$collisiony();
        if (typeof t1 !== 'number')
          return this.checkObjectCollision$1$bailout(7, o, t1);
        t3 = o.get$collisiony2();
        if (typeof t3 !== 'number')
          return this.checkObjectCollision$1$bailout(8, o, t1, t3);
        t3 = t1 < t3;
        t1 = t3;
      } else
        t1 = false;
    } else
      t1 = false;
  } else
    t1 = false;
  if (!t1)
    return false;
  t1 = this.hoverobject;
  t1 = !(t1 == null) || $.eqB(t1, o);
  if (t1)
    return false;
  o.onOver$1(this);
  this.hoverobject = o;
  return true;
},
 checkObjectCollision$1$bailout: function(state0, env0, env1, env2) {
  switch (state0) {
    case 1:
      t1 = env1;
      o = env0;
      break;
    case 2:
      t1 = env2;
      t3 = env1;
      o = env0;
      break;
    case 3:
      t1 = env1;
      o = env0;
      break;
    case 4:
      t1 = env2;
      t3 = env1;
      o = env0;
      break;
    case 5:
      t1 = env1;
      o = env0;
      break;
    case 6:
      t1 = env2;
      t3 = env1;
      o = env0;
      break;
    case 7:
      t1 = env1;
      o = env0;
      break;
    case 8:
      t3 = env2;
      t1 = env1;
      o = env0;
      break;
  }
  switch (state0) {
    case 0:
      if (!(typeof o === 'object' && o !== null && !!o.is$InteractiveObject))
        return this.checkObjectCollision$1(o);
      t1 = this.get$collisionx2();
    case 1:
      state0 = 0;
      t3 = o.get$collisionx();
    case 2:
      state0 = 0;
    default:
      var t1, o, t3;
      if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 4 || state0 === 3 || state0 === 0 && $.gtB(t1, t3))
        switch (state0) {
          case 0:
            t1 = this.get$collisionx();
          case 3:
            state0 = 0;
            t3 = o.get$collisionx2();
          case 4:
            state0 = 0;
          default:
            if (state0 === 8 || state0 === 7 || state0 === 6 || state0 === 5 || state0 === 0 && $.ltB(t1, t3))
              switch (state0) {
                case 0:
                  t1 = this.get$collisiony2();
                case 5:
                  state0 = 0;
                  t3 = o.get$collisiony();
                case 6:
                  state0 = 0;
                default:
                  if (state0 === 8 || state0 === 7 || state0 === 0 && $.gtB(t1, t3))
                    switch (state0) {
                      case 0:
                        t1 = this.get$collisiony();
                      case 7:
                        state0 = 0;
                        t3 = o.get$collisiony2();
                      case 8:
                        state0 = 0;
                        t3 = $.ltB(t1, t3);
                        t1 = t3;
                    }
                  else
                    t1 = false;
              }
            else
              t1 = false;
        }
      else
        t1 = false;
      if (!t1)
        return false;
      t1 = this.hoverobject;
      t1 = !(t1 == null) || $.eqB(t1, o);
      if (t1)
        return false;
      o.onOver$1(this);
      this.hoverobject = o;
      return true;
  }
},
 Player$1: function(game) {
  var t1, t2, t3, t4;
  this.collision.x = 6;
  t1 = $.sub(this.w, 16);
  this.collision.w = t1;
  this.collision.y = 16;
  t1 = $.sub($.sub(this.h, 15), 6);
  this.collision.h = t1;
  this.sprite = $.Sprite$('resources/images/c0v0a16t1uv1t80Cs1Cd.png', 0, 0, 22, 39);
  t1 = $.toInt($.ceil(this.layer.ctx.measureText$1(this.name).get$width()));
  t2 = this.padding;
  this.labelwidth = $.add(t1, t2 * 2);
  if ($.gtB(this.labelwidth, this.w)) {
    this.w = this.labelwidth;
    t1 = this.collision;
    t1.x = $.add(t1.x, $.toInt($.div($.sub(this.w, 22), 2)));
  }
  t1 = this.collision;
  t3 = t1.y;
  t4 = this.labelheight;
  t1.y = $.add(t3, t4);
  this.h = $.add(this.h, t4);
  this.labeloffset = $.toInt($.div($.sub(this.w, 22), 2));
  t1 = this.h;
  this.layer.set$height(t1);
  t1 = this.w;
  this.layer.set$width(t1);
  this.layer.ctx.fillRect$4(0, 0, this.w, 16);
  this.layer.ctx.setFillColorRgb$3(255, 255, 255);
  this.layer.ctx.fillText$3(this.name, t2, 12);
}
};

$$.Door = {"": ["link", "name", "hidelabel", "layerwidth", "layerheight", "padding", "over", "sprite", "x", "y", "w", "h", "prev_x", "prev_y", "game", "collision", "layer"],
 "super": "InteractiveObject",
 paint$0: function() {
  var drawx, t1, t2, t3;
  drawx = $.gtB(this.w, 25) ? $.toInt($.div($.sub(this.w, 25), 2)) : 0;
  t1 = this.sprite;
  t2 = this.layerheight;
  t3 = this.over ? 1 : 0;
  t1.drawOnPosition$5(drawx, t2, t3, 0, this.layer);
},
 onOver$1: function(object) {
  this.over = true;
  if ($.eqB(this.hidelabel, false))
    this.game.messages.sendMessage$1('Go to: ' + $.S(this.link));
  this.updateDrawLocation$0();
},
 onOut$1: function(object) {
  this.over = false;
  this.updateDrawLocation$0();
},
 onEnter$1: function(object) {
  var t1, linkspl;
  t1 = this.link;
  linkspl = $.getInterceptor(t1).split$1(t1, ':');
  if ($.eqB($.index(linkspl, 0), 'http'))
    $.window().get$location().assign$1(this.link);
  if ($.eqB($.index(linkspl, 0), 'map')) {
    object.x = $.parseDouble($.index(linkspl, 1));
    object.y = $.parseDouble($.index(linkspl, 2));
    object.changeState$1(4);
  }
  if ($.eqB($.index(linkspl, 0), 'level'))
    this.game.goToLevel$1($.index(linkspl, 1));
  if ($.eqB($.index(linkspl, 0), 'levelid'))
    this.game.goToLevelid$1($.parseInt($.index(linkspl, 1)));
},
 Door$fromJson$4: function(game, json, offsetx, offsety) {
  var t1, t2, t3, t4;
  if (json.containsKey$1('link') === true)
    this.link = $.index(json, 'link');
  if (json.containsKey$1('name') === true)
    this.name = $.index(json, 'name');
  if (json.containsKey$1('hidelabel') === true)
    this.hidelabel = $.index(json, 'hidelabel');
  this.sprite = $.Sprite$('resources/images/images.png', 0, 160, 25, 49);
  t1 = $.toInt($.ceil(this.layer.ctx.measureText$1(this.name).get$width()));
  t2 = this.padding;
  this.layerwidth = $.add(t1, t2 * 2);
  if ($.gtB(this.layerwidth, this.w)) {
    this.w = this.layerwidth;
    t1 = this.collision;
    t1.x = $.add(t1.x, $.toInt($.div($.sub(this.w, 25), 2)));
  }
  t1 = this.collision;
  t3 = t1.y;
  t4 = this.layerheight;
  t1.y = $.add(t3, t4);
  this.h = $.add(this.h, t4);
  t1 = this.h;
  this.layer.set$height(t1);
  t1 = this.w;
  this.layer.set$width(t1);
  this.layer.ctx.fillRect$4(0, 0, this.w, 16);
  this.layer.ctx.setFillColorRgb$3(255, 255, 255);
  this.layer.ctx.fillText$3(this.name, t2, 12);
}
};

$$.Flag = {"": ["over", "sprite", "x", "y", "w", "h", "prev_x", "prev_y", "game", "collision", "layer"],
 "super": "InteractiveObject",
 paint$0: function() {
  this.sprite.drawOnPosition$5(0, 0, 0, 0, this.layer);
},
 onOver$1: function(object) {
  var t1, t2;
  t1 = this.game.level;
  t1.set$flags($.sub(t1.get$flags(), 1));
  t1 = $.leB(this.game.level.get$flags(), 0);
  t2 = this.game;
  if (t1) {
    t2.messages.sendMessage$1('Level complete.');
    this.game.goToNextLevel$0();
  } else
    t2.messages.sendMessage$1('Flag collected ' + $.S(t2.level.get$flags()) + ' flags left!');
  this.updateDrawLocation$1(true);
},
 Flag$fromJson$4: function(game, json, offsetx, offsety) {
  var t1;
  this.sprite = $.Sprite$('resources/images/images.png', 0, 128, 32, 32);
  t1 = $.sub($.toInt($.round($.div(this.w, 2))), 3);
  this.collision.x = t1;
  this.collision.w = 6;
}
};

$$.InteractiveObject = {"": [],
 "super": "LevelObject",
 onOver$1: function(object) {
  this.over = true;
},
 onOut$1: function(object) {
  this.over = false;
},
 onEnter$1: function(object) {
},
 is$InteractiveObject: true
};

$$.LevelObject = {"": [],
 "super": "RenderObject"
};

$$.Sprite = {"": ["spritex", "spritey", "framew", "frameh", "imgurl", "img"],
 "super": "Object",
 drawOnPosition$5: function(x, y, frameX, frameY, targetlayer) {
  var t1, t2, t3, t4, t5;
  t1 = targetlayer.get$ctx();
  t2 = this.img;
  t3 = this.framew;
  t4 = $.add($.mul(frameX, t3), this.spritex);
  t5 = this.frameh;
  t1.drawImage$9(t2, t4, frameY * t5 + this.spritey, t3, t5, x, y, t3, t5);
},
 Sprite$5: function(imgurl, spritex, spritey, framew, frameh) {
  this.img = $.ImageController_getImage(this.imgurl);
}
};

$$.AnimationFrames = {"": ["start", "end"],
 "super": "Object",
 start$0: function() { return this.start.call$0(); },
 start$1: function(arg0) { return this.start.call$1(arg0); }
};

$$.PreLoader = {"": ["loaded", "files", "started", "callback<"],
 "super": "Object",
 callback$0: function() { return this.callback.call$0(); },
 start$0: function() {
  this.started = true;
  if (this.loaded >= this.files)
    this.callback$0();
},
 reset$0: function() {
  this.loaded = 0;
  this.files = 0;
  this.started = false;
},
 loadImage$1: function(file) {
  var t1;
  this.files = this.files + 1;
  t1 = $.ImageController_loadImage(file, null).get$on().get$load();
  $.getInterceptor(t1).add$1(t1, new $.PreLoader_loadImage_anon(this));
},
 loadJson$1: function(file) {
  this.files = this.files + 1;
  $.JsonController_loadJson(file, this.get$fileloaded());
},
 fileloaded$0: function() {
  this.loaded = this.loaded + 1;
  if (!this.started)
    return;
  if (this.loaded >= this.files) {
    this.started = false;
    this.callback$0();
  }
},
 get$fileloaded: function() { return new $.BoundClosure(this, 'fileloaded$0'); }
};

$$.RenderLayer = {"": ["canvas>", "ctx>"],
 "super": "Object",
 set$width: function(value) {
  this.canvas.set$width(value);
  return value;
},
 set$height: function(value) {
  this.canvas.set$height(value);
  return value;
},
 get$width: function() {
  return this.canvas.get$width();
},
 clear$0: function() {
  var t1 = this.canvas.get$width();
  this.canvas.set$width(t1);
},
 RenderLayer$0: function() {
  this.canvas = $.Element_Element$tag('canvas');
  this.ctx = this.canvas.getContext$1('2d');
}
};

$$.Vector = {"": ["xspeed", "yspeed"],
 "super": "Object",
 _toRadians$1: function(degree) {
  if (typeof degree !== 'number')
    throw $.iae(degree);
  return 0.017453292519943295 * degree;
},
 clear$0: function() {
  this.xspeed = 0;
  this.yspeed = 0;
},
 addVector$1: function(v) {
  this.xspeed = $.add(this.xspeed, v.xspeed);
  this.yspeed = $.add(this.yspeed, v.yspeed);
},
 Vector$fromAngle$2: function(angle, power) {
  var t1;
  angle = this._toRadians$1(angle);
  t1 = $.cos(angle);
  if (typeof power !== 'number')
    throw $.iae(power);
  this.xspeed = t1 * power;
  this.yspeed = $.sin(angle) * power;
}
};

$$.Maps__emitMap_anon = {"": ["visiting_3", "result_2", "box_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1, t2;
  t1 = this.box_0;
  if (t1.first_1 !== true) {
    t2 = this.result_2;
    $.getInterceptor(t2).add$1(t2, ', ');
  }
  t1.first_1 = false;
  t1 = this.result_2;
  t2 = this.visiting_3;
  $.Collections__emitObject(k, t1, t2);
  $.getInterceptor(t1).add$1(t1, ': ');
  $.Collections__emitObject(v, t1, t2);
}
};

$$._convertDartToNative_PrepareForStructuredClone_findSlot = {"": ["copies_3", "values_2"],
 "super": "Closure",
 call$1: function(value) {
  var t1, length$, i, t2;
  t1 = this.values_2;
  if (typeof t1 !== 'string' && (typeof t1 !== 'object' || t1 === null || t1.constructor !== Array && !t1.is$JavaScriptIndexingBehavior()))
    return this.call$1$bailout0(1, value, t1);
  length$ = t1.length;
  for (i = 0; i < length$; ++i) {
    t2 = t1[i];
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_3;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
},
 call$1$bailout0: function(state0, value, t1) {
  var length$, i, t2;
  length$ = $.get$length(t1);
  for (i = 0; $.ltB(i, length$); ++i) {
    t2 = $.index(t1, i);
    if (t2 == null ? value == null : t2 === value)
      return i;
  }
  $.getInterceptor(t1).add$1(t1, value);
  t1 = this.copies_3;
  $.getInterceptor(t1).add$1(t1, null);
  return length$;
}
};

$$._convertDartToNative_PrepareForStructuredClone_readSlot = {"": ["copies_4"],
 "super": "Closure",
 call$1: function(i) {
  return $.index(this.copies_4, i);
}
};

$$._convertDartToNative_PrepareForStructuredClone_writeSlot = {"": ["copies_5"],
 "super": "Closure",
 call$2: function(i, x) {
  $.indexSet(this.copies_5, i, x);
}
};

$$._convertDartToNative_PrepareForStructuredClone_cleanupSlots = {"": [],
 "super": "Closure",
 call$0: function() {
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk = {"": ["findSlot_8", "writeSlot_7", "readSlot_6"],
 "super": "Closure",
 call$1: function(e) {
  var t1, slot, t2, length$, copy, t3, i, element, elementCopy, j, t4;
  t1 = {};
  if (e == null)
    return e;
  if (typeof e === 'boolean')
    return e;
  if (typeof e === 'number')
    return e;
  if (typeof e === 'string')
    return e;
  if (typeof e === 'object' && e !== null && !!e.is$Date)
    throw $.$$throw($.UnimplementedError$('structured clone of Date'));
  if (typeof e === 'object' && e !== null && !!e.is$RegExp)
    throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
  if (typeof e === 'object' && e !== null && e.is$File())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Blob())
    return e;
  if (typeof e === 'object' && e !== null && e.is$_FileList())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ImageData())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
    return e;
  if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
    return e;
  if (typeof e === 'object' && e !== null && e.is$Map()) {
    slot = this.findSlot_8.call$1(e);
    t1.copy_1 = this.readSlot_6.call$1(slot);
    t2 = t1.copy_1;
    if (!(t2 == null))
      return t2;
    t1.copy_1 = {};
    this.writeSlot_7.call$2(slot, t1.copy_1);
    $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
    return t1.copy_1;
  }
  if (typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List())) {
    if (typeof e !== 'object' || e === null || (e.constructor !== Array || !!e.immutable$list) && !e.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(1, e);
    length$ = e.length;
    slot = this.findSlot_8.call$1(e);
    t2 = this.readSlot_6;
    copy = t2.call$1(slot);
    if (!(copy == null)) {
      if (true === copy) {
        copy = new Array(length$);
        this.writeSlot_7.call$2(slot, copy);
      }
      return copy;
    }
    t1 = e instanceof Array && !!!(e.immutable$list);
    t3 = this.writeSlot_7;
    if (t1) {
      t3.call$2(slot, true);
      for (i = 0; i < length$; ++i) {
        if (i >= e.length)
          throw $.ioore(i);
        element = e[i];
        elementCopy = this.call$1(element);
        if (!(elementCopy == null ? element == null : elementCopy === element)) {
          copy = t2.call$1(slot);
          if (true === copy) {
            copy = new Array(length$);
            t3.call$2(slot, copy);
          }
          if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
            return this.call$1$bailout(2, e, t3, elementCopy, length$, copy, slot, i);
          for (t1 = e.length, t2 = copy.length, j = 0; j < i; ++j) {
            if (j >= t1)
              throw $.ioore(j);
            t4 = e[j];
            if (j >= t2)
              throw $.ioore(j);
            copy[j] = t4;
          }
          if (i >= t2)
            throw $.ioore(i);
          copy[i] = elementCopy;
          ++i;
          break;
        }
      }
      if (copy == null) {
        t3.call$2(slot, e);
        copy = e;
      }
    } else {
      copy = new Array(length$);
      t3.call$2(slot, copy);
      i = 0;
    }
    if (typeof copy !== 'object' || copy === null || (copy.constructor !== Array || !!copy.immutable$list) && !copy.is$JavaScriptIndexingBehavior())
      return this.call$1$bailout(3, e, length$, copy, i);
    for (; i < length$; ++i) {
      if (i >= e.length)
        throw $.ioore(i);
      t1 = this.call$1(e[i]);
      if (i >= copy.length)
        throw $.ioore(i);
      copy[i] = t1;
    }
    return copy;
  }
  throw $.$$throw($.UnimplementedError$('structured clone of other type'));
},
 call$1$bailout: function(state0, env0, env1, env2, env3, env4, env5, env6) {
  switch (state0) {
    case 1:
      e = env0;
      break;
    case 2:
      i = env6;
      slot = env5;
      copy = env4;
      length$ = env3;
      elementCopy = env2;
      t3 = env1;
      e = env0;
      break;
    case 3:
      i = env3;
      copy = env2;
      length$ = env1;
      e = env0;
      break;
  }
  switch (state0) {
    case 0:
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === 'boolean')
        return e;
      if (typeof e === 'number')
        return e;
      if (typeof e === 'string')
        return e;
      if (typeof e === 'object' && e !== null && !!e.is$Date)
        throw $.$$throw($.UnimplementedError$('structured clone of Date'));
      if (typeof e === 'object' && e !== null && !!e.is$RegExp)
        throw $.$$throw($.UnimplementedError$('structured clone of RegExp'));
      if (typeof e === 'object' && e !== null && e.is$File())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Blob())
        return e;
      if (typeof e === 'object' && e !== null && e.is$_FileList())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ImageData())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBuffer())
        return e;
      if (typeof e === 'object' && e !== null && e.is$ArrayBufferView())
        return e;
      if (typeof e === 'object' && e !== null && e.is$Map()) {
        slot = this.findSlot_8.call$1(e);
        t1.copy_1 = this.readSlot_6.call$1(slot);
        t2 = t1.copy_1;
        if (!(t2 == null))
          return t2;
        t1.copy_1 = {};
        this.writeSlot_7.call$2(slot, t1.copy_1);
        $.getInterceptor(e).forEach$1(e, new $._convertDartToNative_PrepareForStructuredClone_walk_anon(this, t1));
        return t1.copy_1;
      }
    default:
      var t1, slot, t2, e, length$, copy, t3, i, element, elementCopy, j;
      if (state0 === 3 || state0 === 2 || state0 === 1 || state0 === 0 && typeof e === 'object' && e !== null && (e.constructor === Array || e.is$List()))
        switch (state0) {
          case 0:
          case 1:
            state0 = 0;
            length$ = $.get$length(e);
            slot = this.findSlot_8.call$1(e);
            t2 = this.readSlot_6;
            copy = t2.call$1(slot);
            if (!(copy == null)) {
              if (true === copy) {
                copy = new Array(length$);
                this.writeSlot_7.call$2(slot, copy);
              }
              return copy;
            }
            t1 = e instanceof Array && !!!(e.immutable$list);
            t3 = this.writeSlot_7;
          case 2:
            if (state0 === 2 || state0 === 0 && t1)
              switch (state0) {
                case 0:
                  t3.call$2(slot, true);
                  i = 0;
                case 2:
                  L0:
                    while (true)
                      switch (state0) {
                        case 0:
                          if (!$.ltB(i, length$))
                            break L0;
                          element = $.index(e, i);
                          elementCopy = this.call$1(element);
                        case 2:
                          if (state0 === 2 || state0 === 0 && !(elementCopy == null ? element == null : elementCopy === element))
                            switch (state0) {
                              case 0:
                                copy = t2.call$1(slot);
                                if (true === copy) {
                                  copy = new Array(length$);
                                  t3.call$2(slot, copy);
                                }
                              case 2:
                                state0 = 0;
                                for (j = 0; j < i; ++j)
                                  $.indexSet(copy, j, $.index(e, j));
                                $.indexSet(copy, i, elementCopy);
                                ++i;
                                break L0;
                            }
                          ++i;
                      }
                  if (copy == null) {
                    t3.call$2(slot, e);
                    copy = e;
                  }
              }
            else {
              copy = new Array(length$);
              t3.call$2(slot, copy);
              i = 0;
            }
          case 3:
            state0 = 0;
            for (; $.ltB(i, length$); ++i)
              $.indexSet(copy, i, this.call$1($.index(e, i)));
            return copy;
        }
      throw $.$$throw($.UnimplementedError$('structured clone of other type'));
  }
}
};

$$._convertDartToNative_PrepareForStructuredClone_walk_anon = {"": ["walk_9", "box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  this.box_0.copy_1[key] = this.walk_9.call$1(value);
}
};

$$.invokeClosure_anon = {"": ["closure_0"],
 "super": "Closure",
 call$0: function() {
  return this.closure_0.call$0();
}
};

$$.invokeClosure_anon0 = {"": ["arg1_2", "closure_1"],
 "super": "Closure",
 call$0: function() {
  return this.closure_1.call$1(this.arg1_2);
}
};

$$.invokeClosure_anon1 = {"": ["arg1_5", "arg2_4", "closure_3"],
 "super": "Closure",
 call$0: function() {
  return this.closure_3.call$2(this.arg1_5, this.arg2_4);
}
};

$$.PreLoader_loadImage_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(event$) {
  this.this_0.fileloaded$0();
}
};

$$.JsonController_loadJson_anon = {"": ["callback_1", "file_0"],
 "super": "Closure",
 call$1: function(req) {
  $.indexSet($.JsonController_json_objects, this.file_0, $.JSON_parse(req.get$responseText()));
  this.callback_1.call$0();
}
};

$$._HttpRequestUtils_get_anon = {"": ["request_1", "onSuccess_0"],
 "super": "Closure",
 call$1: function(e) {
  var t1, t2;
  t1 = this.request_1;
  if ($.eqB(t1.get$readyState(), 4))
    t2 = $.eqB(t1.get$status(), 200) || $.eqB(t1.get$status(), 0);
  else
    t2 = false;
  if (t2)
    this.onSuccess_0.call$1(t1);
}
};

$$.DoubleLinkedQueue_length_anon = {"": ["box_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1 = this.box_0;
  t1.counter_1 = $.add(t1.counter_1, 1);
}
};

$$._LinkedHashMapImpl_forEach_anon = {"": ["f_0"],
 "super": "Closure",
 call$1: function(entry) {
  this.f_0.call$2(entry.get$key(), entry.get$value());
}
};

$$.NoSuchMethodError_toString_anon = {"": ["box_0"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2;
  t1 = this.box_0;
  if ($.gtB(t1.i_2, 0)) {
    t2 = t1.sb_1;
    $.getInterceptor(t2).add$1(t2, ', ');
  }
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, key);
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, ': ');
  t2 = t1.sb_1;
  $.getInterceptor(t2).add$1(t2, $.NoSuchMethodError_safeToString(value));
  t1.i_2 = $.add(t1.i_2, 1);
}
};

$$.Game_loadingFinished_anon = {"": ["main_1", "this_0"],
 "super": "Closure",
 call$1: function(e) {
  var t1 = this.main_1;
  t1.get$style().set$opacity('0.0');
  $.window().setTimeout$2(new $.Game_loadingFinished__anon(t1, this.this_0), 500);
}
};

$$.Game_loadingFinished__anon = {"": ["main_3", "this_2"],
 "super": "Closure",
 call$0: function() {
  this.main_3.remove$0();
  this.this_2.startGame$0();
}
};

$$.FilteredElementList__filtered_anon = {"": [],
 "super": "Closure",
 call$1: function(n) {
  return typeof n === 'object' && n !== null && n.is$Element();
}
};

$$._ChildrenElementList_filter_anon = {"": ["output_1", "f_0"],
 "super": "Closure",
 call$1: function(element) {
  var t1;
  if (this.f_0.call$1(element) === true) {
    t1 = this.output_1;
    $.getInterceptor(t1).add$1(t1, element);
  }
}
};

$$.FilteredElementList_removeRange_anon = {"": [],
 "super": "Closure",
 call$1: function(el) {
  return el.remove$0();
}
};

$$.startRootIsolate_anon = {"": [],
 "super": "Closure",
 call$0: function() {
  $._TimerFactory__factory = $._timerFactory;
  return;
}
};

$$._BaseSendPort_call_anon = {"": ["completer_1", "port_0"],
 "super": "Closure",
 call$2: function(value, ignoreReplyTo) {
  var t1, t2;
  this.port_0.close$0();
  t1 = typeof value === 'object' && value !== null && !!value.is$Exception;
  t2 = this.completer_1;
  if (t1)
    t2.completeException$1(value);
  else
    t2.complete$1(value);
}
};

$$._WorkerSendPort_send_anon = {"": ["replyTo_2", "this_1", "message_0"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, workerMessage, t3;
  t1 = this.this_1;
  t2 = this.replyTo_2;
  t1._checkReplyTo$1(t2);
  workerMessage = $._serializeMessage($.makeLiteralMap(['command', 'message', 'port', t1, 'msg', this.message_0, 'replyTo', t2]));
  t2 = $._globalState().get$isWorker() === true;
  t3 = $._globalState;
  if (t2)
    t3().get$mainManager().postMessage$1(workerMessage);
  else
    $.index(t3().get$managers(), t1.get$_workerId()).postMessage$1(workerMessage);
}
};

$$._waitForPendingPorts_anon = {"": ["callback_0"],
 "super": "Closure",
 call$1: function(_) {
  return this.callback_0.call$0();
}
};

$$.Futures_wait_anon = {"": ["result_5", "completer_4", "values_3", "pos_2", "box_0"],
 "super": "Closure",
 call$1: function(value) {
  var t1, t2, remaining;
  t1 = this.values_3;
  $.indexSet(t1, this.pos_2, value);
  t2 = this.box_0;
  remaining = $.sub(t2.remaining_1, 1);
  t2.remaining_1 = remaining;
  if ($.eqB(remaining, 0) && this.result_5.get$isComplete() !== true)
    this.completer_4.complete$1(t1);
}
};

$$.Futures_wait_anon0 = {"": ["result_8", "completer_7", "future_6"],
 "super": "Closure",
 call$1: function(exception) {
  if (this.result_8.get$isComplete() !== true)
    this.completer_7.completeException$2(exception, this.future_6.get$stackTrace());
  return true;
}
};

$$._PendingSendPortFinder_visitMap_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$.Storage_values_anon = {"": ["values_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.values_0;
  return $.getInterceptor(t1).add$1(t1, v);
}
};

$$._HashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_1;
  t2.i_1 = $.add(t3, 1);
  $.indexSet(t1, t3, value);
}
};

$$._LinkedHashMapImpl_values_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_1;
  t2.index_1 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$value());
}
};

$$._PendingSendPortFinder_visitList_anon = {"": ["this_0"],
 "super": "Closure",
 call$1: function(e) {
  return this.this_0._dispatch$1(e);
}
};

$$._NativeJsSendPort_send_anon = {"": ["this_5", "replyTo_4", "message_3"],
 "super": "Closure",
 call$0: function() {
  var t1, t2, t3, isolate, shouldSerialize, msg;
  t1 = {};
  t2 = this.this_5;
  t3 = this.replyTo_4;
  t2._checkReplyTo$1(t3);
  isolate = $.index($._globalState().get$isolates(), t2.get$_isolateId());
  if (isolate == null)
    return;
  if (t2.get$_receivePort().get$_callback() == null)
    return;
  shouldSerialize = !($._globalState().get$currentContext() == null) && !$.eqB($._globalState().get$currentContext().get$id(), t2.get$_isolateId());
  msg = this.message_3;
  t1.msg_1 = msg;
  t1.reply_2 = t3;
  if (shouldSerialize) {
    t1.msg_1 = $._serializeMessage(t1.msg_1);
    t1.reply_2 = $._serializeMessage(t1.reply_2);
  }
  $._globalState().get$topEventLoop().enqueue$3(isolate, new $._NativeJsSendPort_send__anon(t2, t1, shouldSerialize), 'receive ' + $.S(msg));
}
};

$$._NativeJsSendPort_send__anon = {"": ["this_7", "box_0", "shouldSerialize_6"],
 "super": "Closure",
 call$0: function() {
  var t1, t2;
  t1 = this.this_7;
  if (!(t1.get$_receivePort().get$_callback() == null)) {
    if (this.shouldSerialize_6 === true) {
      t2 = this.box_0;
      t2.msg_1 = $._deserializeMessage(t2.msg_1);
      t2.reply_2 = $._deserializeMessage(t2.reply_2);
    }
    t1 = t1.get$_receivePort();
    t2 = this.box_0;
    t1._callback$2(t2.msg_1, t2.reply_2);
  }
}
};

$$.Storage_keys_anon = {"": ["keys_0"],
 "super": "Closure",
 call$2: function(k, v) {
  var t1 = this.keys_0;
  return $.getInterceptor(t1).add$1(t1, k);
}
};

$$._HashMapImpl_keys_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$2: function(key, value) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.i_10;
  t2.i_10 = $.add(t3, 1);
  $.indexSet(t1, t3, key);
}
};

$$._LinkedHashMapImpl_keys_anon = {"": ["box_0", "list_2"],
 "super": "Closure",
 call$1: function(entry) {
  var t1, t2, t3;
  t1 = this.list_2;
  t2 = this.box_0;
  t3 = t2.index_10;
  t2.index_10 = $.add(t3, 1);
  $.indexSet(t1, t3, entry.get$key());
}
};

$$._Copier_visitMap_anon = {"": ["this_2", "box_0"],
 "super": "Closure",
 call$2: function(key, val) {
  var t1, t2;
  t1 = this.box_0.copy_10;
  t2 = this.this_2;
  $.indexSet(t1, t2._dispatch$1(key), t2._dispatch$1(val));
}
};

$$._EventLoop__runHelper_next = {"": ["this_0"],
 "super": "Closure",
 call$0: function() {
  if (this.this_0.runIteration$0() !== true)
    return;
  $._window().setTimeout$2(this, 0);
}
};

$$.anon = {"": ["this_1", "callback_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_0.call$1(this.this_1);
}
};

$$.anon0 = {"": ["callback_1", "this_0"],
 "super": "Closure",
 call$0: function() {
  return this.callback_1.call$1(this.this_0);
}
};

$$.Closure = {"": [],
 "super": "Object",
 toString$0: function() {
  return 'Closure';
}
};

$$.BoundClosure = {'':
['self', 'target'],
'super': 'Closure',
call$0: function() { return this.self[this.target](); }
};
$$.BoundClosure0 = {'':
['self', 'target'],
'super': 'Closure',
call$1: function(p0) { return this.self[this.target](p0); }
};
$._ChildNodeListLazy$ = function(_this) {
  return new $._ChildNodeListLazy(_this);
};

$.Sprite$ = function(imgurl, spritex, spritey, framew, frameh) {
  var t1 = new $.Sprite(spritex, spritey, framew, frameh, imgurl, null);
  t1.Sprite$5(imgurl, spritex, spritey, framew, frameh);
  return t1;
};

$.add = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a + b : $.add$slow(a, b);
};

$.sub = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a - b : $.sub$slow(a, b);
};

$.gt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b);
};

$.gtB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a > b : $.gt$slow(a, b) === true;
};

$.geB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a >= b : $.ge$slow(a, b) === true;
};

$.ltB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b) === true;
};

$.index = function(a, index) {
  var key;
  if (typeof a == "string" || a.constructor === Array) {
    key = index >>> 0;
    if (key === index && key < a.length)
      return a[key];
  }
  return $.index$slow(a, index);
};

$.indexSet = function(a, index, value) {
  var key;
  if (a.constructor === Array && !a.immutable$list) {
    key = index >>> 0;
    if (key === index && key < a.length) {
      a[key] = value;
      return;
    }
  }
  $.indexSet$slow(a, index, value);
};

$.checkNumbers = function(a, b) {
  if (typeof a === 'number')
    if (typeof b === 'number')
      return true;
    else {
      $.checkNull(b);
      throw $.$$throw($.ArgumentError$(b));
    }
  return false;
};

$.isJsArray = function(value) {
  return !(value == null) && value.constructor === Array;
};

$.add$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a + b;
  return a.operator$add$1(b);
};

$.div$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a / b;
  return a.operator$div$1(b);
};

$.sub$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a - b;
  return a.operator$sub$1(b);
};

$.tdiv = function(a, b) {
  if ($.checkNumbers(a, b))
    return $.truncate(a / b);
  return a.operator$tdiv$1(b);
};

$.eq = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b);
  return a === b;
};

$.eqB = function(a, b) {
  if (a == null)
    return b == null;
  if (b == null)
    return false;
  if (typeof a === "object")
    if (!!a.operator$eq$1)
      return a.operator$eq$1(b) === true;
  return a === b;
};

$.mul = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a * b : $.mul$slow(a, b);
};

$.gt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a > b;
  return a.operator$gt$1(b);
};

$.ge$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a >= b;
  return a.operator$ge$1(b);
};

$.lt$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a < b;
  return a.operator$lt$1(b);
};

$.le$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a <= b;
  return a.operator$le$1(b);
};

$.leB = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a <= b : $.le$slow(a, b) === true;
};

$.mul$slow = function(a, b) {
  if ($.checkNumbers(a, b))
    return a * b;
  return a.operator$mul$1(b);
};

$.shl = function(a, b) {
  if ($.checkNumbers(a, b)) {
    if (b < 0)
      throw $.$$throw($.ArgumentError$(b));
    if (b > 31)
      return 0;
    return (a << b) >>> 0;
  }
  return a.operator$shl$1(b);
};

$.index$slow = function(a, index) {
  var t1;
  if (!(typeof a === 'string'))
    t1 = !(a == null) && a.constructor === Array;
  else
    t1 = true;
  if (t1) {
    if (!(typeof index === 'number' && Math.floor(index) === index)) {
      if (!(typeof index === 'number'))
        throw $.$$throw($.ArgumentError$(index));
      if (!($.truncate(index) === index))
        throw $.$$throw($.ArgumentError$(index));
    }
    if ($.ltB(index, 0) || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    return a[index];
  }
  return a.operator$index$1(index);
};

$.indexSet$slow = function(a, index, value) {
  if (!(a == null) && a.constructor === Array) {
    if (!(typeof index === 'number' && Math.floor(index) === index))
      throw $.$$throw($.ArgumentError$(index));
    if (index < 0 || $.geB(index, $.get$length(a)))
      throw $.$$throw($.RangeError$value(index));
    $.checkMutable(a, 'indexed set');
    a[index] = value;
    return;
  }
  a.oprator$indexSet$2(index, value);
};

$.checkMutable = function(list, reason) {
  if (!!(list.immutable$list))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.checkGrowable = function(list, reason) {
  if (!!(list.fixed$length))
    throw $.$$throw($.UnsupportedError$(reason));
};

$.S = function(value) {
  var res = $.toString(value);
  if (!(typeof res === 'string'))
    throw $.$$throw($.ArgumentError$(value));
  return res;
};

$.and = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a & b) >>> 0;
  return a.operator$and$1(b);
};

$.lt = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a < b : $.lt$slow(a, b);
};

$.iae = function(argument) {
  throw $.$$throw($.ArgumentError$(argument));
};

$.ioore = function(index) {
  throw $.$$throw($.RangeError$value(index));
};

$.xor = function(a, b) {
  if ($.checkNumbers(a, b))
    return (a ^ b) >>> 0;
  return a.operator$xor$1(b);
};

$.checkNull = function(object) {
  if (object == null)
    throw $.$$throw($.NullPointerException$(null, $.CTC3));
  return object;
};

$.checkNum = function(value) {
  if (!(typeof value === 'number')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.CollisionField$ = function(x, y, w, h) {
  return new $.CollisionField(x, y, w, h, -1, -1);
};

$.checkString = function(value) {
  if (!(typeof value === 'string')) {
    $.checkNull(value);
    throw $.$$throw($.ArgumentError$(value));
  }
  return value;
};

$.$$throw = function(ex) {
  var jsError;
  if (ex == null)
    ex = $.CTC2;
  jsError = new Error();
  jsError.name = ex;
  jsError.description = ex;
  jsError.dartException = ex;
  jsError.toString = $.toStringWrapper.call$0;
  throw jsError;
};

$.toStringWrapper = function() {
  return $.toString(this.dartException);
};

$.div = function(a, b) {
  return typeof a === 'number' && typeof b === 'number' ? a / b : $.div$slow(a, b);
};

$.unwrapException = function(ex) {
  var message, type, name$, ieErrorCode, ieFacilityNumber, t1;
  if ("dartException" in ex)
    return ex.dartException;
  message = ex.message;
  if (ex instanceof TypeError) {
    type = ex.type;
    name$ = ex.arguments ? ex.arguments[0] : "";
    if ($.eqB(type, 'property_not_function') || $.eqB(type, 'called_non_callable') || $.eqB(type, 'non_object_property_call') || $.eqB(type, 'non_object_property_load'))
      return $.NullPointerException$(null, $.CTC3);
    else if ($.eqB(type, 'undefined_method'))
      return $.NoSuchMethodError$('', name$, [], $.makeLiteralMap([]), null);
    ieErrorCode = ex.number & 0xffff;
    ieFacilityNumber = ex.number>>16 & 0x1FFF;
    if (typeof message === 'string')
      if ($.getInterceptor(message).endsWith$1(message, 'is null') === true || $.getInterceptor(message).endsWith$1(message, 'is undefined') === true || $.getInterceptor(message).endsWith$1(message, 'is null or undefined') === true)
        return $.NullPointerException$(null, $.CTC3);
      else {
        if ($.contains$1(message, ' is not a function') !== true)
          t1 = ieErrorCode === 438 && ieFacilityNumber === 10;
        else
          t1 = true;
        if (t1)
          return $.NoSuchMethodError$('', '<unknown>', [], $.makeLiteralMap([]), null);
      }
    return $._ExceptionImplementation$(typeof message === 'string' ? message : '');
  }
  if (ex instanceof RangeError) {
    if (typeof message === 'string' && $.contains$1(message, 'call stack') === true)
      return $.StackOverflowError$();
    return $.ArgumentError$(null);
  }
  if (typeof InternalError == 'function' && ex instanceof InternalError)
    if (typeof message === 'string' && message === 'too much recursion')
      return $.StackOverflowError$();
  return ex;
};

$.makeLiteralMap = function(keyValuePairs) {
  var iterator, result;
  iterator = $.iterator(keyValuePairs);
  result = $.LinkedHashMap_LinkedHashMap();
  for (; iterator.get$hasNext() === true;)
    $.indexSet(result, iterator.next$0(), iterator.next$0());
  return result;
};

$.invokeClosure = function(closure, isolate, numberOfArguments, arg1, arg2) {
  if ($.eqB(numberOfArguments, 0))
    return $._callInIsolate(isolate, new $.invokeClosure_anon(closure));
  else if ($.eqB(numberOfArguments, 1))
    return $._callInIsolate(isolate, new $.invokeClosure_anon0(arg1, closure));
  else if ($.eqB(numberOfArguments, 2))
    return $._callInIsolate(isolate, new $.invokeClosure_anon1(arg1, arg2, closure));
  else
    throw $.$$throw($._ExceptionImplementation$('Unsupported number of arguments for wrapped closure'));
};

$.convertDartClosureToJS = function(closure, arity) {
  var function$;
  if (closure == null)
    return;
  function$ = closure.$identity;
  if (!!function$)
    return function$;
  function$ = function() {
    return $.invokeClosure.call$5(closure, $._currentIsolate(), arity, arguments[0], arguments[1]);
  };
  closure.$identity = function$;
  return function$;
};

$.SVGElementInstanceEvents$ = function(_ptr) {
  return new $.SVGElementInstanceEvents(_ptr);
};

$.getTraceFromException = function(exception) {
  return $.StackTrace$(exception.stack);
};

$.AbstractWorkerEvents$ = function(_ptr) {
  return new $.AbstractWorkerEvents(_ptr);
};

$.Vector$ = function() {
  return new $.Vector(0, 0);
};

$.Vector$fromAngle = function(angle, power) {
  var t1 = new $.Vector(0, 0);
  t1.Vector$fromAngle$2(angle, power);
  return t1;
};

$.throwCyclicInit = function(staticName) {
  throw $.$$throw($.RuntimeError$('Cyclic initialization for static ' + $.S(staticName)));
};

$.typeNameInChrome = function(obj) {
  var name$ = obj.constructor.name;
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.typeNameInSafari = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'WebKitMutationObserver')
    return 'MutationObserver';
  if (name$ === 'AudioChannelMerger')
    return 'ChannelMergerNode';
  if (name$ === 'AudioChannelSplitter')
    return 'ChannelSplitterNode';
  if (name$ === 'AudioGainNode')
    return 'GainNode';
  if (name$ === 'AudioPannerNode')
    return 'PannerNode';
  if (name$ === 'JavaScriptAudioNode')
    return 'ScriptProcessorNode';
  if (name$ === 'Oscillator')
    return 'OscillatorNode';
  if (name$ === 'RealtimeAnalyserNode')
    return 'AnalyserNode';
  return name$;
};

$.typeNameInOpera = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  return name$;
};

$.typeNameInFirefox = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'XMLDocument')
    return 'Document';
  if (name$ === 'WorkerMessageEvent')
    return 'MessageEvent';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'MouseScrollEvent')
    return 'WheelEvent';
  if (name$ === 'OfflineResourceList')
    return 'DOMApplicationCache';
  return name$;
};

$.typeNameInIE = function(obj) {
  var name$ = $.constructorNameFallback(obj);
  if (name$ === 'Window')
    return 'DOMWindow';
  if (name$ === 'Document') {
    if (!!obj.xmlVersion)
      return 'Document';
    return 'HTMLDocument';
  }
  if (name$ === 'ApplicationCache')
    return 'DOMApplicationCache';
  if (name$ === 'CanvasPixelArray')
    return 'Uint8ClampedArray';
  if (name$ === 'DataTransfer')
    return 'Clipboard';
  if (name$ === 'DragEvent')
    return 'MouseEvent';
  if (name$ === 'HTMLDDElement')
    return 'HTMLElement';
  if (name$ === 'HTMLDTElement')
    return 'HTMLElement';
  if (name$ === 'HTMLTableDataCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLTableHeaderCellElement')
    return 'HTMLTableCellElement';
  if (name$ === 'HTMLPhraseElement')
    return 'HTMLElement';
  if (name$ === 'MSStyleCSSProperties')
    return 'CSSStyleDeclaration';
  if (name$ === 'MouseWheelEvent')
    return 'WheelEvent';
  return name$;
};

$.constructorNameFallback = function(object) {
  var constructor$, name$, t1, string;
  if (object == null)
    return 'Null';
  constructor$ = object.constructor;
  if (typeof(constructor$) === 'function') {
    name$ = constructor$.name;
    if (typeof name$ === 'string')
      t1 = !(name$ === '') && !(name$ === 'Object') && !(name$ === 'Function.prototype');
    else
      t1 = false;
    if (t1)
      return name$;
  }
  string = Object.prototype.toString.call(object);
  return string.substring(8, string.length - 1);
};

$.getFunctionForTypeNameOf = function() {
  if (!(typeof(navigator) === 'object'))
    return $.typeNameInChrome;
  var userAgent = navigator.userAgent;
  if (userAgent.indexOf('Chrome') !== -1 || userAgent.indexOf('DumpRenderTree') !== -1)
    return $.typeNameInChrome;
  else if (userAgent.indexOf('Firefox') !== -1)
    return $.typeNameInFirefox;
  else if (userAgent.indexOf('MSIE') !== -1)
    return $.typeNameInIE;
  else if (userAgent.indexOf('Opera') !== -1)
    return $.typeNameInOpera;
  else if (userAgent.indexOf('AppleWebKit') !== -1)
    return $.typeNameInSafari;
  else
    return $.constructorNameFallback;
};

$.getTypeNameOf = function(obj) {
  if ($._getTypeNameOf == null)
    $._getTypeNameOf = $.getFunctionForTypeNameOf();
  return $._getTypeNameOf.call$1(obj);
};

$.toStringForNativeObject = function(obj) {
  return 'Instance of ' + $.getTypeNameOf(obj);
};

$.AudioContextEvents$ = function(_ptr) {
  return new $.AudioContextEvents(_ptr);
};

$.defineProperty = function(obj, property, value) {
  Object.defineProperty(obj, property,
      {value: value, enumerable: false, writable: true, configurable: true});
};

$.dynamicBind = function(obj, name$, methods, arguments$) {
  var tag, hasOwnProperty, method, i, entry, proto;
  tag = $.getTypeNameOf(obj);
  hasOwnProperty = Object.prototype.hasOwnProperty;
  method = $.lookupDynamicClass(hasOwnProperty, methods, tag);
  if (method == null && !($._dynamicMetadata0() == null))
    for (i = 0; i < $._dynamicMetadata0().length; ++i) {
      entry = $._dynamicMetadata0()[i];
      if (hasOwnProperty.call(entry.get$_set(), tag)) {
        method = $.lookupDynamicClass(hasOwnProperty, methods, entry.get$_tag());
        if (!(method == null))
          break;
      }
    }
  if (method == null)
    method = $.lookupDynamicClass(hasOwnProperty, methods, $.getTypeNameOf($.CTC8));
  proto = Object.getPrototypeOf(obj);
  if (method == null)
    method = function () {if (Object.getPrototypeOf(this) === proto) {throw new TypeError(name$ + " is not a function");} else {return Object.prototype[name$].apply(this, arguments);}};
  if (!hasOwnProperty.call(proto, name$))
    $.defineProperty(proto, name$, method);
  return method.apply(obj, arguments$);
};

$.lookupDynamicClass = function(hasOwnProperty, methods, className) {
  return hasOwnProperty.call(methods, className) ? methods[className] : null;
};

$.dynamicFunction = function(name$) {
  var f, methods, dartMethod, bind;
  f = Object.prototype[name$];
  if (!(f == null) && !!f.methods)
    return f.methods;
  methods = {};
  dartMethod = Object.getPrototypeOf($.CTC8)[name$];
  if (!(dartMethod == null))
    methods['Object'] = dartMethod;
  bind = function() {return $.dynamicBind.call$4(this, name$, methods, Array.prototype.slice.call(arguments));};
  bind.methods = methods;
  $.defineProperty(Object.prototype, name$, bind);
  return methods;
};

$._dynamicMetadata0 = function() {
  if (typeof($dynamicMetadata) === 'undefined') {
    var t1 = [];
    $._dynamicMetadata(t1);
  }
  return $dynamicMetadata;
};

$._dynamicMetadata = function(table) {
  $dynamicMetadata = table;
};

$.buildDynamicMetadata = function(inputTable) {
  var result, i, tag, tags, set, tagNames, j;
  result = [];
  for (i = 0; i < inputTable.length; ++i) {
    tag = inputTable[i][0];
    tags = inputTable[i][1];
    set = {};
    tagNames = $.getInterceptor(tags).split$1(tags, '|');
    for (j = 0; j < tagNames.length; ++j)
      set[tagNames[j]] = true;
    $.getInterceptor(result).add$1(result, $.MetaInfo$(tag, tags, set));
  }
  return result;
};

$.dynamicSetMetadata = function(inputTable) {
  var t1 = $.buildDynamicMetadata(inputTable);
  $._dynamicMetadata(t1);
};

$.regExpTest = function(regExp, str) {
  return $.regExpGetNative(regExp).test(str);
};

$.regExpGetNative = function(regExp) {
  var r = regExp._re;
  return r == null ? regExp._re = $.regExpMakeNative(regExp, false) : r;
};

$.hashCodeForNativeObject = function(object) {
  return $.Primitives_objectHashCode(object);
};

$.regExpMakeNative = function(regExp, global, exception) {
  var pattern, multiLine, ignoreCase, sb, t1, e;
  pattern = regExp.get$pattern();
  multiLine = regExp.get$multiLine();
  ignoreCase = regExp.get$ignoreCase();
  $.checkString(pattern);
  sb = $.StringBuffer_StringBuffer('');
  if (multiLine === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'm');
  }
  if (ignoreCase === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'i');
  }
  if (global === true) {
    t1 = sb;
    $.getInterceptor(t1).add$1(t1, 'g');
  }
  try {
    t1 = new RegExp(pattern, $.toString(sb));
    return t1;
  } catch (exception) {
    t1 = $.unwrapException(exception);
    e = t1;
    throw $.$$throw($.IllegalJSRegExpException$(pattern, String(e)));
  }

};

$.stringContainsUnchecked = function(receiver, other, startIndex) {
  return !$.eqB($.indexOf$2(receiver, other, startIndex), -1);
};

$.stringReplaceJS = function(receiver, replacer, to) {
  return receiver.replace(replacer, to.replace('$', '$$$$'));
};

$.stringReplaceAllUnchecked = function(receiver, from, to) {
  var result, length$, i;
  if (typeof receiver !== 'string')
    return $.stringReplaceAllUnchecked$bailout(1, receiver, from, to);
  if (typeof from === 'string')
    if (from === '')
      if (receiver === '')
        return to;
      else {
        result = $.StringBuffer_StringBuffer('');
        length$ = receiver.length;
        $.getInterceptor(result).add$1(result, to);
        for (i = 0; i < length$; ++i) {
          $.getInterceptor(result).add$1(result, receiver[i]);
          $.getInterceptor(result).add$1(result, to);
        }
        return $.toString(result);
      }
    else
      return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
  else if (typeof from === 'object' && from !== null && !!from.is$JSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.regExpMakeNative(from, true), to);
  else {
    $.checkNull(from);
    throw $.$$throw('String.replaceAll(Pattern) UNIMPLEMENTED');
  }
};

$.stringSplitUnchecked = function(receiver, pattern) {
  if (typeof pattern === 'string')
    return receiver.split(pattern);
  else if (typeof pattern === 'object' && pattern !== null && !!pattern.is$JSSyntaxRegExp)
    return receiver.split($.regExpGetNative(pattern));
  else
    throw $.$$throw('String.split(Pattern) UNIMPLEMENTED');
};

$.stringJoinUnchecked = function(array, separator) {
  return array.join(separator);
};

$.MediaElementEvents$ = function(_ptr) {
  return new $.MediaElementEvents(_ptr);
};

$._ChildrenElementList$_wrap = function(element) {
  return new $._ChildrenElementList(element, element.get$$$dom_children());
};

$.BatteryManagerEvents$ = function(_ptr) {
  return new $.BatteryManagerEvents(_ptr);
};

$.FilteredElementList$ = function(node) {
  return new $.FilteredElementList(node, node.get$nodes());
};

$.MediaStreamTrackEvents$ = function(_ptr) {
  return new $.MediaStreamTrackEvents(_ptr);
};

$.getInterceptor = function(object) {
  if (typeof object === 'string')
    return $.CTC;
  if ($.isJsArray(object))
    return $.CTC0;
  return $.CTC1;
};

$.get$length = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length;
  else
    return receiver.get$length();
};

$.set$length = function(receiver, newLength) {
  if ($.isJsArray(receiver)) {
    $.checkNull(newLength);
    if (!(typeof newLength === 'number' && Math.floor(newLength) === newLength))
      throw $.$$throw($.ArgumentError$(newLength));
    if (newLength < 0)
      throw $.$$throw($.RangeError$value(newLength));
    $.checkGrowable(receiver, 'set length');
    receiver.length = newLength;
  } else
    receiver.set$length(newLength);
  return newLength;
};

$.toString = function(value) {
  if (typeof value == "object" && value != null)
    if ($.isJsArray(value))
      return $.Collections_collectionToString(value);
    else
      return value.toString$0();
  if (value === 0 && (1 / value) < 0)
    return '-0.0';
  if (value == null)
    return 'null';
  if (typeof value == "function")
    return 'Closure';
  return String(value);
};

$.get$isEmpty = function(receiver) {
  if (typeof receiver === 'string' || $.isJsArray(receiver))
    return receiver.length === 0;
  return receiver.get$isEmpty();
};

$.iterator = function(receiver) {
  if ($.isJsArray(receiver))
    return $.ListIterator$(receiver);
  return receiver.iterator$0();
};

$.indexOf$2 = function(receiver, element, start) {
  if ($.isJsArray(receiver)) {
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    return $.Arrays_indexOf(receiver, element, start, receiver.length);
  } else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof start === 'number' && Math.floor(start) === start))
      throw $.$$throw($.ArgumentError$(start));
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    if (start < 0)
      return -1;
    return receiver.indexOf(element, start);
  }
  return receiver.indexOf$2(element, start);
};

$.get$last = function(receiver) {
  if (!$.isJsArray(receiver))
    return receiver.get$last();
  return $.index(receiver, $.sub($.get$length(receiver), 1));
};

$.removeRange = function(receiver, start, length$) {
  var receiverLength, t1, t2;
  if (!$.isJsArray(receiver))
    return receiver.removeRange$2(start, length$);
  $.checkGrowable(receiver, 'removeRange');
  if (length$ === 0)
    return;
  $.checkNull(start);
  $.checkNull(length$);
  if (!(typeof start === 'number' && Math.floor(start) === start))
    throw $.$$throw($.ArgumentError$(start));
  if (length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  receiverLength = receiver.length;
  if (start < 0 || start >= receiverLength)
    throw $.$$throw($.RangeError$value(start));
  t1 = start + length$;
  if (t1 > receiverLength)
    throw $.$$throw($.RangeError$value(t1));
  t2 = receiverLength - length$;
  $.Arrays_copy(receiver, t1, receiver, start, t2 - start);
  $.set$length(receiver, t2);
};

$.BodyElementEvents$ = function(_ptr) {
  return new $.BodyElementEvents(_ptr);
};

$.MediaStreamTrackListEvents$ = function(_ptr) {
  return new $.MediaStreamTrackListEvents(_ptr);
};

$.get$isNaN = function(receiver) {
  return isNaN(receiver);
};

$.ceil = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.ceil$0();
  return Math.ceil(receiver);
};

$.floor = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.floor$0();
  return Math.floor(receiver);
};

$.get$isInfinite = function(receiver) {
  return receiver == Infinity || receiver == -Infinity;
};

$.truncate = function(receiver) {
  return receiver < 0 ? $.ceil(receiver) : $.floor(receiver);
};

$.contains$1 = function(receiver, other) {
  return $.contains$2(receiver, other, 0);
  return receiver.contains$1(other);
};

$.contains$2 = function(receiver, other, startIndex) {
  if (!(typeof receiver === 'string'))
    return receiver.contains$2(other, startIndex);
  $.checkNull(other);
  return $.stringContainsUnchecked(receiver, other, startIndex);
};

$.get$hashCode = function(receiver) {
  var length$, i, hash, hash0, hash1;
  if (receiver == null)
    return 0;
  if (typeof receiver === 'number')
    return receiver & 536870911;
  if (typeof receiver === 'boolean')
    return receiver ? 1077375012 : 3247177846;
  if ($.isJsArray(receiver))
    return $.Primitives_objectHashCode(receiver);
  if (!(typeof receiver === 'string'))
    return receiver.get$hashCode();
  length$ = receiver.length;
  for (i = 0, hash = 0; i < length$; ++i, hash = hash1) {
    hash0 = 536870911 & hash + receiver.charCodeAt(i);
    hash1 = 536870911 & hash0 + (524287 & hash0) << 10;
    hash1 = hash1 ^ (hash1 >> 6);
  }
  hash0 = 536870911 & hash + (67108863 & hash) << 3;
  hash0 = hash0 ^ (hash0 >> 11);
  return 536870911 & hash0 + (16383 & hash0) << 15;
};

$.round = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.round$0();
  if (receiver < 0)
    return -Math.round(-receiver);
  else
    return Math.round(receiver);
};

$.toInt = function(receiver) {
  var truncated;
  if (!(typeof receiver === 'number'))
    return receiver.toInt$0();
  if ($.get$isNaN(receiver) === true)
    throw $.$$throw($.FormatException$('NaN'));
  if ($.get$isInfinite(receiver) === true)
    throw $.$$throw($.FormatException$('Infinity'));
  truncated = $.truncate(receiver);
  return truncated == -0.0 ? 0 : truncated;
};

$.get$isNegative = function(receiver) {
  return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
};

$.toDouble = function(receiver) {
  if (!(typeof receiver === 'number'))
    return receiver.toDouble$0();
  return receiver;
};

$.indexOf$1 = function(receiver, element) {
  if ($.isJsArray(receiver))
    return $.Arrays_indexOf(receiver, element, 0, receiver.length);
  else if (typeof receiver === 'string') {
    $.checkNull(element);
    if (!(typeof element === 'string'))
      throw $.$$throw($.ArgumentError$(element));
    return receiver.indexOf(element);
  }
  return receiver.indexOf$1(element);
};

$.MessagePortEvents$ = function(_ptr) {
  return new $.MessagePortEvents(_ptr);
};

$._NodeListWrapper$ = function(list) {
  return new $._NodeListWrapper(list);
};

$.main = function() {
  var game, t1;
  game = $.Game$();
  game.start$0();
  t1 = $.document().get$on().get$keyDown();
  $.getInterceptor(t1).add$1(t1, game.get$handleKey());
  t1 = $.document().get$on().get$keyUp();
  $.getInterceptor(t1).add$1(t1, game.get$handleKey());
};

$.window = function() {
  return window;
};

$.document = function() {
  return document;
};

$._browserPrefix = function() {
  if ($._cachedBrowserPrefix == null)
    if ($._Device_isFirefox() === true)
      $._cachedBrowserPrefix = '-moz-';
    else if ($._Device_isIE() === true)
      $._cachedBrowserPrefix = '-ms-';
    else if ($._Device_isOpera() === true)
      $._cachedBrowserPrefix = '-o-';
    else
      $._cachedBrowserPrefix = '-webkit-';
  return $._cachedBrowserPrefix;
};

$._FrozenElementList$_wrap = function(_nodeList) {
  return new $._FrozenElementList(_nodeList);
};

$._FrozenElementListIterator$ = function(_list) {
  return new $._FrozenElementListIterator(_list, 0);
};

$.NotificationEvents$ = function(_ptr) {
  return new $.NotificationEvents(_ptr);
};

$.PeerConnection00Events$ = function(_ptr) {
  return new $.PeerConnection00Events(_ptr);
};

$.RTCDataChannelEvents$ = function(_ptr) {
  return new $.RTCDataChannelEvents(_ptr);
};

$.RTCPeerConnectionEvents$ = function(_ptr) {
  return new $.RTCPeerConnectionEvents(_ptr);
};

$.Door$fromJson = function(game, json, offsetx, offsety) {
  var t1, t2, t3;
  t1 = $.add($.toDouble($.index(json, 'x')), offsetx);
  t2 = $.add($.toDouble($.index(json, 'y')), offsety);
  t3 = new $.Door(null, 'Secret location', false, 0, 24, 3, false, null, t1, t2, 25, 49, 0, 0, game, null, null);
  t3.RenderObject$5(game, t1, t2, 25, 49);
  t3.Door$fromJson$4(game, json, offsetx, offsety);
  return t3;
};

$.ButtonElement_ButtonElement = function() {
  return $.document().$$dom_createElement$1('button');
};

$.Flag$fromJson = function(game, json, offsetx, offsety) {
  var t1, t2, t3;
  t1 = $.add($.toDouble($.index(json, 'x')), offsetx);
  t2 = $.add($.toDouble($.index(json, 'y')), offsety);
  t3 = new $.Flag(false, null, t1, t2, 32, 32, 0, 0, game, null, null);
  t3.RenderObject$5(game, t1, t2, 32, 32);
  t3.Flag$fromJson$4(game, json, offsetx, offsety);
  return t3;
};

$.Game$ = function() {
  var t1 = new $.Game($.Render$(), $._ListImpl_List(null), null, null, $.Camera$(), null, false, null, false, 0, null, 0, null, 0, 0);
  t1.Game$0();
  return t1;
};

$.Render$ = function() {
  var t1 = new $.Render(null, null);
  t1.Render$0();
  return t1;
};

$._convertDartToNative_PrepareForStructuredClone = function(value) {
  var values, copies, t1, t2, t3, t4, copy;
  values = [];
  copies = [];
  t1 = new $._convertDartToNative_PrepareForStructuredClone_findSlot(copies, values);
  t2 = new $._convertDartToNative_PrepareForStructuredClone_readSlot(copies);
  t3 = new $._convertDartToNative_PrepareForStructuredClone_writeSlot(copies);
  t4 = new $._convertDartToNative_PrepareForStructuredClone_cleanupSlots();
  copy = new $._convertDartToNative_PrepareForStructuredClone_walk(t1, t3, t2).call$1(value);
  t4.call$0();
  return copy;
};

$._callInIsolate = function(isolate, function$) {
  isolate.eval$1(function$);
  $._globalState().get$topEventLoop().run$0();
};

$._currentIsolate = function() {
  return $._globalState().get$currentContext();
};

$.startRootIsolate = function(entry) {
  var t1, rootContext;
  t1 = $._Manager$();
  $._globalState0(t1);
  if ($._globalState().get$isWorker() === true)
    return;
  rootContext = $._IsolateContext$();
  $._globalState().set$rootContext(rootContext);
  $globals = rootContext.isolateStatics;
  $static_init();
  $._globalState().set$currentContext(rootContext);
  if (!($._window() == null))
    rootContext.eval$1(new $.startRootIsolate_anon());
  rootContext.eval$1(entry);
  $._globalState().get$topEventLoop().run$0();
};

$._globalState = function() {
  return $globalState;
};

$._globalState0 = function(val) {
  $globalState = val;
};

$._LocationCrossFrame__createSafe = function(location$) {
  var t1 = $.window().get$location();
  if (location$ == null ? t1 == null : location$ === t1)
    return location$;
  else
    return $._LocationCrossFrame$(location$);
};

$._LocationCrossFrame$ = function(_location) {
  return new $._LocationCrossFrame(_location);
};

$._waitForPendingPorts = function(message, callback) {
  var finder = $._PendingSendPortFinder$();
  finder.traverse$1(message);
  $.Futures_wait(finder.ports).then$1(new $._waitForPendingPorts_anon(callback));
};

$._serializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsSerializer$().traverse$1(message);
  else
    return $._JsCopier$().traverse$1(message);
};

$._deserializeMessage = function(message) {
  if ($._globalState().get$needSerialization() === true)
    return $._JsDeserializer$().deserialize$1(message);
  else
    return message;
};

$.Level$ = function(game) {
  var t1 = $._ListImpl_List(null);
  return new $.Level(0, 0, 500, 500, 0, 10, 10, game, $.RenderLayer$(), null, t1);
};

$._window = function() {
  return typeof window != "undefined" ? window : null;
};

$._timerFactory = function(millis, callback, repeating) {
  return repeating === true ? $._Timer$repeating(millis, callback) : $._Timer$(millis, callback);
};

$.parseInt = function(string) {
  return $.int_parse(string);
};

$.parseDouble = function(string) {
  return $.double_parse(string);
};

$.min = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return b;
      if (a < b)
        return a;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return (a + b) * a * b;
        if (a === 0 && $.get$isNegative(b) === true || $.get$isNaN(b) === true)
          return b;
        return a;
      }
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.max = function(a, b) {
  if (typeof a === 'number') {
    if (typeof b === 'number') {
      if (a > b)
        return a;
      if (a < b)
        return b;
      if (typeof b === 'number') {
        if (typeof a === 'number')
          if (a === 0)
            return a + b;
        if ($.get$isNaN(b) === true)
          return b;
        return a;
      }
      if (b === 0 && $.get$isNegative(a) === true)
        return b;
      return a;
    }
    throw $.$$throw($.ArgumentError$(b));
  }
  throw $.$$throw($.ArgumentError$(a));
};

$.sin = function(x) {
  return Math.sin($.checkNum(x));
};

$.cos = function(x) {
  return Math.cos($.checkNum(x));
};

$.Player$ = function(game) {
  var t1 = $.Vector$();
  t1 = new $.Player(1, 4, $._ListImpl_List(null), null, 'Player', 0, 16, 3, null, false, 1, true, null, 0, 0, 0, t1, false, null, 0, 0, 22, 45, 0, 0, game, null, null);
  t1.RenderObject$5(game, 0, 0, 22, 45);
  t1.GameObject$5(game, 0, 0, 22, 45);
  t1.Player$1(game);
  return t1;
};

$.MetaInfo$ = function(_tag, _tags, _set) {
  return new $.MetaInfo(_tag, _tags, _set);
};

$.ScriptProcessorNodeEvents$ = function(_ptr) {
  return new $.ScriptProcessorNodeEvents(_ptr);
};

$.Camera$ = function() {
  return new $.Camera(0, 0, 400, 400, 64, null);
};

$.SharedWorkerContextEvents$ = function(_ptr) {
  return new $.SharedWorkerContextEvents(_ptr);
};

$.MessageController$ = function() {
  var t1 = new $.MessageController($._ListImpl_List(null), null, null, false);
  t1.MessageController$0();
  return t1;
};

$.PreLoader$ = function(callback) {
  return new $.PreLoader(0, 0, false, callback);
};

$.double_parse = function(source) {
  return $.Primitives_parseDouble(source);
};

$.NoSuchMethodError$ = function(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames) {
  return new $.NoSuchMethodError(_receiver, _memberName, _arguments, _namedArguments, existingArgumentNames);
};

$.NoSuchMethodError_safeToString = function(object) {
  var t1;
  if (typeof object === 'number' && Math.floor(object) === object || typeof object === 'number' || typeof object === 'boolean' || null == object)
    return $.toString(object);
  if (typeof object === 'string') {
    t1 = $.getInterceptor(object).replaceAll$2(object, '\\', '\\\\');
    t1 = $.getInterceptor(t1).replaceAll$2(t1, '\n', '\\n');
    t1 = $.getInterceptor(t1).replaceAll$2(t1, '\r', '\\r');
    return '"' + $.S($.getInterceptor(t1).replaceAll$2(t1, '"', '\\"')) + '"';
  }
  return $.Primitives_objectToString(object);
};

$.RuntimeError$ = function(message) {
  return new $.RuntimeError(message);
};

$.UnsupportedError$ = function(message) {
  return new $.UnsupportedError(message);
};

$.SpeechRecognitionEvents$ = function(_ptr) {
  return new $.SpeechRecognitionEvents(_ptr);
};

$.UnimplementedError$ = function(message) {
  return new $.UnimplementedError(message);
};

$.RegExp_RegExp = function(pattern, ignoreCase, multiLine) {
  return $.JSSyntaxRegExp$(pattern, ignoreCase, multiLine);
};

$.TextTrackEvents$ = function(_ptr) {
  return new $.TextTrackEvents(_ptr);
};

$.String_String$fromCharCodes = function(charCodes) {
  $.checkNull(charCodes);
  if (!$.isJsArray(charCodes))
    charCodes = $._ListImpl_List$from(charCodes);
  return $.Primitives_stringFromCharCodes(charCodes);
};

$._Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(destination).add$1(destination, t2);
  }
  return destination;
};

$.FixedSizeListIterator$ = function(array) {
  return new $.FixedSizeListIterator($.get$length(array), array, 0);
};

$.LinkedHashMap_LinkedHashMap = function() {
  return $._LinkedHashMapImpl$();
};

$.TextTrackCueEvents$ = function(_ptr) {
  return new $.TextTrackCueEvents(_ptr);
};

$.StateError$ = function(message) {
  return new $.StateError(message);
};

$.Collections_forEach = function(iterable, f) {
  var t1;
  for (t1 = $.iterator(iterable); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
};

$.Collections_collectionToString = function(c) {
  var result = $.StringBuffer_StringBuffer('');
  $.Collections__emitCollection(c, result, $._ListImpl_List(null));
  return $.toString(result);
};

$.Collections__emitCollection = function(c, result, visiting) {
  var isList, t1, first, t2;
  $.getInterceptor(visiting).add$1(visiting, c);
  isList = typeof c === 'object' && c !== null && (c.constructor === Array || c.is$List());
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? '[' : '{');
  for (t1 = $.iterator(c), first = true; t1.get$hasNext() === true; first = false) {
    t2 = t1.next$0();
    if (!first)
      $.getInterceptor(result).add$1(result, ', ');
    $.Collections__emitObject(t2, result, visiting);
  }
  t1 = $.getInterceptor(result);
  t1.add$1(result, isList ? ']' : '}');
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$.Collections__containsRef = function(c, ref) {
  var t1, t2;
  for (t1 = $.iterator(c); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (t2 == null ? ref == null : t2 === ref)
      return true;
  }
  return false;
};

$.Collections__emitObject = function(o, result, visiting) {
  var t1;
  if (typeof o === 'object' && o !== null && (o.constructor === Array || o.is$Collection()))
    if ($.Collections__containsRef(visiting, o)) {
      t1 = $.getInterceptor(result);
      t1.add$1(result, typeof o === 'object' && o !== null && (o.constructor === Array || o.is$List()) ? '[...]' : '{...}');
    } else
      $.Collections__emitCollection(o, result, visiting);
  else if (typeof o === 'object' && o !== null && o.is$Map())
    if ($.Collections__containsRef(visiting, o))
      $.getInterceptor(result).add$1(result, '{...}');
    else
      $.Maps__emitMap(o, result, visiting);
  else
    $.getInterceptor(result).add$1(result, o);
};

$._LinkedHashMapImpl$ = function() {
  var t1 = new $._LinkedHashMapImpl(null, null);
  t1._LinkedHashMapImpl$0();
  return t1;
};

$._ListImpl_List = function(length$) {
  return $.Primitives_newList(length$);
};

$._ListImpl_List$from = function(other) {
  var result, t1, t2;
  result = $._ListImpl_List(null);
  for (t1 = $.iterator(other); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    $.getInterceptor(result).add$1(result, t2);
  }
  return result;
};

$._KeyValuePair$ = function(key, value) {
  return new $._KeyValuePair(key, value);
};

$.Map_Map = function() {
  return $._HashMapImpl$();
};

$.EventListenerList$ = function(_ptr, _type) {
  return new $.EventListenerList(_ptr, _type);
};

$.Collections_filter = function(source, destination, f) {
  var t1, t2;
  for (t1 = $.iterator(source); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (f.call$1(t2) === true)
      $.getInterceptor(destination).add$1(destination, t2);
  }
  return destination;
};

$.TextTrackListEvents$ = function(_ptr) {
  return new $.TextTrackListEvents(_ptr);
};

$.StackTrace$ = function(stack) {
  return new $.StackTrace(stack);
};

$.StackOverflowError$ = function() {
  return new $.StackOverflowError();
};

$.int_parse = function(source) {
  return $.Primitives_parseInt(source);
};

$.DOMApplicationCacheEvents$ = function(_ptr) {
  return new $.DOMApplicationCacheEvents(_ptr);
};

$.ImageController_loadImage = function(url, callback) {
  var img, t1;
  if ($.ImageController__images == null)
    $.ImageController__images = $.Map_Map();
  img = $.Element_Element$tag('img');
  img.set$src(url);
  $.indexSet($.ImageController__images, url, img);
  if (!(callback == null)) {
    t1 = img.get$on().get$load();
    $.getInterceptor(t1).add$1(t1, callback);
  }
  return img;
};

$.ImageController_getImage = function(url) {
  if ($.ImageController__images == null)
    $.ImageController__images = $.Map_Map();
  if ($.ImageController__images.containsKey$1(url) === true)
    return $.index($.ImageController__images, url);
  return $.ImageController_loadImage(url, null);
};

$.LocalWindow__isDartLocation = function(thing, exception) {
  var t1;
  try {
    t1 = thing;
    t1 = typeof t1 === 'object' && t1 !== null && t1.is$Location();
    return t1;
  } catch (exception) {
    $.unwrapException(exception);
    return false;
  }

};

$._HashMapImpl$ = function() {
  var t1 = new $._HashMapImpl(null, null, null, null, null);
  t1._HashMapImpl$0();
  return t1;
};

$._HashMapImpl__computeLoadLimit = function(capacity) {
  return $.tdiv(capacity * 3, 4);
};

$._HashMapImpl__nextProbe = function(currentProbe, numberOfProbes, length$) {
  return (currentProbe + numberOfProbes & length$ - 1) >>> 0;
};

$.HashMap_HashMap = function() {
  return $._HashMapImpl$();
};

$.Maps_mapToString = function(m) {
  var result = $.StringBuffer_StringBuffer('');
  $.Maps__emitMap(m, result, $._ListImpl_List(null));
  return $.toString(result);
};

$.Maps__emitMap = function(m, result, visiting) {
  var t1 = {};
  $.getInterceptor(visiting).add$1(visiting, m);
  $.getInterceptor(result).add$1(result, '{');
  t1.first_1 = true;
  $.getInterceptor(m).forEach$1(m, new $.Maps__emitMap_anon(visiting, result, t1));
  $.getInterceptor(result).add$1(result, '}');
  $.getInterceptor(visiting).removeLast$0(visiting);
};

$.StringBuffer_StringBuffer = function(content$) {
  return $._StringBufferImpl$(content$);
};

$.RangeError$value = function(value) {
  return new $.RangeError('value ' + $.S(value));
};

$.ArgumentError$ = function(message) {
  return new $.ArgumentError(message);
};

$.Primitives_parseInt = function(string) {
  var match, base, result;
  $.checkString(string);
  match = /^\s*[+-]?(?:0(x)[a-f0-9]+|\d+)\s*$/i.exec(string);
  if (match == null)
    throw $.$$throw($.FormatException$(string));
  base = !($.index(match, 1) == null) ? 16 : 10;
  result = parseInt(string, base);
  if ($.get$isNaN(result) === true)
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_parseDouble = function(string) {
  var result;
  $.checkString(string);
  if (!/^\s*(?:NaN|[+-]?(?:Infinity|(?:\.\d+|\d+(?:\.\d+)?)(?:[eE][+-]?\d+)?))\s*$/.test(string))
    throw $.$$throw($.FormatException$(string));
  result = parseFloat(string);
  if ($.get$isNaN(result) === true && !$.eqB(string, 'NaN'))
    throw $.$$throw($.FormatException$(string));
  return result;
};

$.Primitives_objectTypeName = function(object) {
  var name$, decompiled;
  name$ = $.constructorNameFallback(object);
  if ($.eqB(name$, 'Object')) {
    decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
    if (typeof decompiled === 'string')
      name$ = decompiled;
  }
  return $.getInterceptor(name$).charCodeAt$1(name$, 0) === 36 ? $.getInterceptor(name$).substring$1(name$, 1) : name$;
};

$.Primitives_objectToString = function(object) {
  return 'Instance of \'' + $.S($.Primitives_objectTypeName(object)) + '\'';
};

$.Primitives_newList = function(length$) {
  var result;
  if (length$ == null)
    return new Array();
  if (!(typeof length$ === 'number' && Math.floor(length$) === length$) || length$ < 0)
    throw $.$$throw($.ArgumentError$(length$));
  result = new Array(length$);
  result.fixed$length = true;
  return result;
};

$.Primitives_stringFromCharCodes = function(charCodes) {
  var t1, t2;
  for (t1 = $.iterator(charCodes); t1.get$hasNext() === true;) {
    t2 = t1.next$0();
    if (!(typeof t2 === 'number' && Math.floor(t2) === t2))
      throw $.$$throw($.ArgumentError$(t2));
  }
  return String.fromCharCode.apply(null, charCodes);
};

$._StringBufferImpl$ = function(content$) {
  var t1 = new $._StringBufferImpl(null, null);
  t1._StringBufferImpl$1(content$);
  return t1;
};

$.Strings__toJsStringArray = function(strings) {
  var length$, i, string, array;
  if (typeof strings !== 'object' || strings === null || (strings.constructor !== Array || !!strings.immutable$list) && !strings.is$JavaScriptIndexingBehavior())
    return $.Strings__toJsStringArray$bailout(1, strings);
  $.checkNull(strings);
  length$ = strings.length;
  if ($.isJsArray(strings)) {
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; i < length$; ++i) {
      if (i >= strings.length)
        throw $.ioore(i);
      string = strings[i];
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      array[i] = string;
    }
  }
  return array;
};

$.Primitives_objectHashCode = function(object) {
  var hash = object.$identityHash;
  if (hash == null) {
    hash = $.add($.Primitives_hashCodeSeed, 1);
    $.Primitives_hashCodeSeed = hash;
    object.$identityHash = hash;
  }
  return hash;
};

$.NullPointerException$ = function(functionName, arguments$) {
  return new $.NullPointerException(functionName, arguments$);
};

$.WorkerContextEvents$ = function(_ptr) {
  return new $.WorkerContextEvents(_ptr);
};

$.DedicatedWorkerContextEvents$ = function(_ptr) {
  return new $.DedicatedWorkerContextEvents(_ptr);
};

$.JsonController_loadJson = function(file, callback) {
  if ($.JsonController_json_objects == null)
    $.JsonController_json_objects = $.Map_Map();
  $.HttpRequest_HttpRequest$get(file, new $.JsonController_loadJson_anon(callback, file));
};

$.JsonController_getJson = function(file) {
  if ($.JsonController_json_objects == null)
    $.JsonController_json_objects = $.Map_Map();
  return $.index($.JsonController_json_objects, file);
};

$.JSON_parse = function(json) {
  return $._JsonParser$(json).parseToplevel$0();
};

$._HttpRequestFactoryProvider_createHttpRequest_get = function(url, onSuccess) {
  return $._HttpRequestUtils_get(url, onSuccess, false);
};

$._HttpRequestUtils_get = function(url, onSuccess, withCredentials) {
  var request, t1;
  request = $.HttpRequest_HttpRequest();
  request.open$3('GET', url, true);
  request.set$withCredentials(withCredentials);
  t1 = request.get$on().get$readyStateChange();
  $.getInterceptor(t1).add$1(t1, new $._HttpRequestUtils_get_anon(request, onSuccess));
  request.send$0();
  return request;
};

$._DOMWindowCrossFrame$ = function(_window) {
  return new $._DOMWindowCrossFrame(_window);
};

$._DOMWindowCrossFrame__createSafe = function(w) {
  var t1 = $.window();
  if (w == null ? t1 == null : w === t1)
    return w;
  else
    return $._DOMWindowCrossFrame$(w);
};

$.DocumentEvents$ = function(_ptr) {
  return new $.DocumentEvents(_ptr);
};

$._JsonParser$ = function(json) {
  var t1 = new $._JsonParser(json, $.get$length(json), 0);
  t1._JsonParser$1(json);
  return t1;
};

$.FormatException$ = function(message) {
  return new $.FormatException(message);
};

$.ListIterator$ = function(list) {
  return new $.ListIterator(0, list);
};

$._IsolateContext$ = function() {
  var t1 = new $._IsolateContext(null, null, null);
  t1._IsolateContext$0();
  return t1;
};

$.EventSourceEvents$ = function(_ptr) {
  return new $.EventSourceEvents(_ptr);
};

$._Manager$ = function() {
  var t1 = new $._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null);
  t1._Manager$0();
  return t1;
};

$._EventLoop$ = function() {
  return new $._EventLoop($.Queue_Queue());
};

$.HttpRequest_HttpRequest$get = function(url, onSuccess) {
  return $._HttpRequestFactoryProvider_createHttpRequest_get(url, onSuccess);
};

$.HttpRequest_HttpRequest = function() {
  return new XMLHttpRequest();
};

$._Timer$repeating = function(milliSeconds, callback) {
  var t1 = new $._Timer(false, null);
  t1._Timer$repeating$2(milliSeconds, callback);
  return t1;
};

$._Timer$ = function(milliSeconds, callback) {
  var t1 = new $._Timer(true, null);
  t1._Timer$2(milliSeconds, callback);
  return t1;
};

$.Queue_Queue = function() {
  return $.DoubleLinkedQueue$();
};

$.FileReaderEvents$ = function(_ptr) {
  return new $.FileReaderEvents(_ptr);
};

$._IsolateEvent$ = function(isolate, fn, message) {
  return new $._IsolateEvent(isolate, fn, message);
};

$._MainManagerStub$ = function() {
  return new $._MainManagerStub();
};

$.FileWriterEvents$ = function(_ptr) {
  return new $.FileWriterEvents(_ptr);
};

$._JsSerializer$ = function() {
  var t1 = new $._JsSerializer(0, $._MessageTraverserVisitedMap$());
  t1._JsSerializer$0();
  return t1;
};

$._NativeJsSendPort$ = function(_receivePort, isolateId) {
  return new $._NativeJsSendPort(_receivePort, isolateId);
};

$._WorkerSendPort$ = function(_workerId, isolateId, _receivePortId) {
  return new $._WorkerSendPort(_workerId, _receivePortId, isolateId);
};

$.WebSocketEvents$ = function(_ptr) {
  return new $.WebSocketEvents(_ptr);
};

$._MessageTraverserVisitedMap$ = function() {
  return new $._MessageTraverserVisitedMap();
};

$._JsCopier$ = function() {
  var t1 = new $._JsCopier($._MessageTraverserVisitedMap$());
  t1._JsCopier$0();
  return t1;
};

$._JsVisitedMap$ = function() {
  return new $._JsVisitedMap(null);
};

$.WorkerEvents$ = function(_ptr) {
  return new $.WorkerEvents(_ptr);
};

$.Completer_Completer = function() {
  return $._CompleterImpl$();
};

$.FrameSetElementEvents$ = function(_ptr) {
  return new $.FrameSetElementEvents(_ptr);
};

$._ReceivePortImpl$ = function() {
  var t1 = $._ReceivePortImpl__nextFreeId;
  $._ReceivePortImpl__nextFreeId = $.add(t1, 1);
  t1 = new $._ReceivePortImpl(t1, null);
  t1._ReceivePortImpl$0();
  return t1;
};

$._PendingSendPortFinder$ = function() {
  var t1 = $._MessageTraverserVisitedMap$();
  t1 = new $._PendingSendPortFinder([], t1);
  t1._PendingSendPortFinder$0();
  return t1;
};

$.Futures_wait = function(futures) {
  var t1, completer, result, values, i, future;
  t1 = {};
  if (typeof futures !== 'string' && (typeof futures !== 'object' || futures === null || futures.constructor !== Array && !futures.is$JavaScriptIndexingBehavior()))
    return $.Futures_wait$bailout(1, futures, t1);
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC3);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = futures.length;
  values = $._ListImpl_List(futures.length);
  for (i = 0; i < futures.length; ++i) {
    future = futures[i];
    future.then$1(new $.Futures_wait_anon(result, completer, values, i, t1));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$._CompleterImpl$ = function() {
  return new $._CompleterImpl($._FutureImpl$());
};

$._FutureImpl$ = function() {
  return new $._FutureImpl(false, null, null, null, false, [], [], []);
};

$._FutureImpl__FutureImpl$immediate = function(value) {
  var res = $._FutureImpl$();
  res._setValue$1(value);
  return res;
};

$.FutureAlreadyCompleteException$ = function() {
  return new $.FutureAlreadyCompleteException();
};

$.FutureUnhandledException$ = function(source, stackTrace) {
  return new $.FutureUnhandledException(source, stackTrace);
};

$.HttpRequestEvents$ = function(_ptr) {
  return new $.HttpRequestEvents(_ptr);
};

$.JSSyntaxRegExp$ = function(pattern, ignoreCase, multiLine) {
  return new $.JSSyntaxRegExp(pattern, multiLine, ignoreCase);
};

$.HttpRequestUploadEvents$ = function(_ptr) {
  return new $.HttpRequestUploadEvents(_ptr);
};

$.IllegalJSRegExpException$ = function(_pattern, _errmsg) {
  return new $.IllegalJSRegExpException(_pattern, _errmsg);
};

$.IDBDatabaseEvents$ = function(_ptr) {
  return new $.IDBDatabaseEvents(_ptr);
};

$.FutureNotCompleteException$ = function() {
  return new $.FutureNotCompleteException();
};

$.DivElement_DivElement = function() {
  return $.document().$$dom_createElement$1('div');
};

$._ExceptionImplementation$ = function(message) {
  return new $._ExceptionImplementation(message);
};

$._JsDeserializer$ = function() {
  return new $._JsDeserializer(null);
};

$.Element_Element$tag = function(tag) {
  return document.createElement(tag);
};

$.DoubleLinkedQueue$ = function() {
  var t1 = new $.DoubleLinkedQueue(null);
  t1.DoubleLinkedQueue$0();
  return t1;
};

$.IDBOpenDBRequestEvents$ = function(_ptr) {
  return new $.IDBOpenDBRequestEvents(_ptr);
};

$._DoubleLinkedQueueIterator$ = function(_sentinel) {
  var t1 = new $._DoubleLinkedQueueIterator(_sentinel, null);
  t1._DoubleLinkedQueueIterator$1(_sentinel);
  return t1;
};

$.IDBRequestEvents$ = function(_ptr) {
  return new $.IDBRequestEvents(_ptr);
};

$._DoubleLinkedQueueEntrySentinel$ = function() {
  var t1 = new $._DoubleLinkedQueueEntrySentinel(null, null, null);
  t1.DoubleLinkedQueueEntry$1(null);
  t1._DoubleLinkedQueueEntrySentinel$0();
  return t1;
};

$.DoubleLinkedQueueEntry$ = function(e) {
  var t1 = new $.DoubleLinkedQueueEntry(null, null, null);
  t1.DoubleLinkedQueueEntry$1(e);
  return t1;
};

$.IDBTransactionEvents$ = function(_ptr) {
  return new $.IDBTransactionEvents(_ptr);
};

$.IDBVersionChangeRequestEvents$ = function(_ptr) {
  return new $.IDBVersionChangeRequestEvents(_ptr);
};

$.InputElementEvents$ = function(_ptr) {
  return new $.InputElementEvents(_ptr);
};

$._Device_userAgent = function() {
  return $.window().get$navigator().get$userAgent();
};

$._Device_isOpera = function() {
  return $.contains$2($._Device_userAgent(), 'Opera', 0);
};

$._Device_isIE = function() {
  return $._Device_isOpera() !== true && $.contains$2($._Device_userAgent(), 'MSIE', 0) === true;
};

$._Device_isFirefox = function() {
  return $.contains$2($._Device_userAgent(), 'Firefox', 0);
};

$.Arrays_copy = function(src, srcStart, dst, dstStart, count) {
  var i, j, t1, t2, t3;
  if (typeof src !== 'string' && (typeof src !== 'object' || src === null || src.constructor !== Array && !src.is$JavaScriptIndexingBehavior()))
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (typeof dst !== 'object' || dst === null || (dst.constructor !== Array || !!dst.immutable$list) && !dst.is$JavaScriptIndexingBehavior())
    return $.Arrays_copy$bailout(1, src, srcStart, dst, dstStart, count);
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1, t1 = src.length, t2 = dst.length; i >= srcStart; --i, --j) {
      if (i !== (i | 0))
        throw $.iae(i);
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j !== (j | 0))
        throw $.iae(j);
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
  else
    for (t1 = src.length, t2 = dst.length, j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j) {
      if (i < 0 || i >= t1)
        throw $.ioore(i);
      t3 = src[i];
      if (j < 0 || j >= t2)
        throw $.ioore(j);
      dst[j] = t3;
    }
};

$.Arrays_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $.Arrays_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$.Future_Future$immediate = function(value) {
  return $._FutureImpl__FutureImpl$immediate(value);
};

$._Lists_indexOf = function(a, element, startIndex, endIndex) {
  var i;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof startIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (typeof endIndex !== 'number')
    return $._Lists_indexOf$bailout(1, a, element, startIndex, endIndex);
  if (startIndex >= a.length)
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i) {
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    if ($.eqB(a[i], element))
      return i;
  }
  return -1;
};

$._Lists_getRange = function(a, start, length$, accumulator) {
  var end, i, t1;
  if (typeof a !== 'string' && (typeof a !== 'object' || a === null || a.constructor !== Array && !a.is$JavaScriptIndexingBehavior()))
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if (typeof start !== 'number')
    return $._Lists_getRange$bailout(1, a, start, length$, accumulator);
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if (start < 0)
    throw $.$$throw($.RangeError$value(start));
  if (typeof length$ !== 'number')
    throw $.iae(length$);
  end = start + length$;
  if (end > a.length)
    throw $.$$throw($.RangeError$value(end));
  for (i = start; i < end; ++i) {
    t1 = $.getInterceptor(accumulator);
    if (i !== (i | 0))
      throw $.iae(i);
    if (i < 0 || i >= a.length)
      throw $.ioore(i);
    t1.add$1(accumulator, a[i]);
  }
  return accumulator;
};

$.ElementEvents$ = function(_ptr) {
  return new $.ElementEvents(_ptr);
};

$.MediaStreamEvents$ = function(_ptr) {
  return new $.MediaStreamEvents(_ptr);
};

$.RenderLayer$ = function() {
  var t1 = new $.RenderLayer(null, null);
  t1.RenderLayer$0();
  return t1;
};

$._LocationWrapper$ = function(_ptr) {
  return new $._LocationWrapper(_ptr);
};

$.LevelTile$ = function(x, y, level, _tileid) {
  var t1 = new $.LevelTile(x, y, 32, 32, _tileid, null, true, null, null, null, level, false);
  t1.LevelTile$4(x, y, level, _tileid);
  return t1;
};

$.Events$ = function(_ptr) {
  return new $.Events(_ptr);
};

$.LocalWindowEvents$ = function(_ptr) {
  return new $.LocalWindowEvents(_ptr);
};

$.Strings__toJsStringArray$bailout = function(state0, strings) {
  var length$, i, string, array;
  $.checkNull(strings);
  length$ = $.get$length(strings);
  if ($.isJsArray(strings)) {
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
    }
    array = strings;
  } else {
    array = $._ListImpl_List(length$);
    for (i = 0; $.ltB(i, length$); ++i) {
      string = $.index(strings, i);
      $.checkNull(string);
      if (!(typeof string === 'string'))
        throw $.$$throw($.ArgumentError$(string));
      if (i >= array.length)
        throw $.ioore(i);
      array[i] = string;
    }
  }
  return array;
};

$.Futures_wait$bailout = function(state0, futures, t1) {
  var completer, result, values, i, future;
  if ($.get$isEmpty(futures) === true)
    return $.Future_Future$immediate($.CTC3);
  completer = $.Completer_Completer();
  result = completer.get$future();
  t1.remaining_1 = $.get$length(futures);
  values = $._ListImpl_List($.get$length(futures));
  for (i = 0; $.ltB(i, $.get$length(futures)); ++i) {
    future = $.index(futures, i);
    future.then$1(new $.Futures_wait_anon(result, completer, values, i, t1));
    future.handleException$1(new $.Futures_wait_anon0(result, completer, future));
  }
  return result;
};

$._Lists_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if ($.ltB(startIndex, 0))
    startIndex = 0;
  for (i = startIndex; $.ltB(i, endIndex); i = $.add(i, 1))
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$._Lists_getRange$bailout = function(state0, a, start, length$, accumulator) {
  var end, i;
  if ($.ltB(length$, 0))
    throw $.$$throw($.ArgumentError$('length'));
  if ($.ltB(start, 0))
    throw $.$$throw($.RangeError$value(start));
  end = $.add(start, length$);
  if ($.gtB(end, $.get$length(a)))
    throw $.$$throw($.RangeError$value(end));
  for (i = start; $.ltB(i, end); i = $.add(i, 1))
    $.getInterceptor(accumulator).add$1(accumulator, $.index(a, i));
  return accumulator;
};

$.stringReplaceAllUnchecked$bailout = function(state0, receiver, from, to) {
  var result, length$, i;
  if (typeof from === 'string')
    if (from === '')
      if ($.eqB(receiver, ''))
        return to;
      else {
        result = $.StringBuffer_StringBuffer('');
        length$ = $.get$length(receiver);
        $.getInterceptor(result).add$1(result, to);
        for (i = 0; $.ltB(i, length$); ++i) {
          $.getInterceptor(result).add$1(result, $.index(receiver, i));
          $.getInterceptor(result).add$1(result, to);
        }
        return $.toString(result);
      }
    else
      return $.stringReplaceJS(receiver, $.regExpMakeNative($.JSSyntaxRegExp$(from.replace($.regExpMakeNative($.get$quoteRegExp(), true), "\\$&"), false, false), true), to);
  else if (typeof from === 'object' && from !== null && !!from.is$JSSyntaxRegExp)
    return $.stringReplaceJS(receiver, $.regExpMakeNative(from, true), to);
  else {
    $.checkNull(from);
    throw $.$$throw('String.replaceAll(Pattern) UNIMPLEMENTED');
  }
};

$.Arrays_copy$bailout = function(state0, src, srcStart, dst, dstStart, count) {
  var i, j;
  if (srcStart < dstStart)
    for (i = srcStart + count - 1, j = dstStart + count - 1; i >= srcStart; --i, --j)
      $.indexSet(dst, j, $.index(src, i));
  else
    for (j = dstStart, i = srcStart; i < srcStart + count; ++i, ++j)
      $.indexSet(dst, j, $.index(src, i));
};

$.Arrays_indexOf$bailout = function(state0, a, element, startIndex, endIndex) {
  var i;
  if ($.geB(startIndex, $.get$length(a)))
    return -1;
  if (startIndex < 0)
    startIndex = 0;
  for (i = startIndex; i < endIndex; ++i)
    if ($.eqB($.index(a, i), element))
      return i;
  return -1;
};

$.typeNameInSafari.call$1 = $.typeNameInSafari;
$.typeNameInSafari.$name = "typeNameInSafari";
$.typeNameInOpera.call$1 = $.typeNameInOpera;
$.typeNameInOpera.$name = "typeNameInOpera";
$.typeNameInFirefox.call$1 = $.typeNameInFirefox;
$.typeNameInFirefox.$name = "typeNameInFirefox";
$.invokeClosure.call$5 = $.invokeClosure;
$.invokeClosure.$name = "invokeClosure";
$.typeNameInIE.call$1 = $.typeNameInIE;
$.typeNameInIE.$name = "typeNameInIE";
$.constructorNameFallback.call$1 = $.constructorNameFallback;
$.constructorNameFallback.$name = "constructorNameFallback";
$._timerFactory.call$3 = $._timerFactory;
$._timerFactory.$name = "_timerFactory";
$.dynamicBind.call$4 = $.dynamicBind;
$.dynamicBind.$name = "dynamicBind";
$.toStringWrapper.call$0 = $.toStringWrapper;
$.toStringWrapper.$name = "toStringWrapper";
$.typeNameInChrome.call$1 = $.typeNameInChrome;
$.typeNameInChrome.$name = "typeNameInChrome";
Isolate.$finishClasses($$);
$$ = {};
Isolate.makeConstantList = function(list) {
  list.immutable$list = true;
  list.fixed$length = true;
  return list;
};
$.CTC3 = Isolate.makeConstantList([]);
$.CTC8 = new Isolate.$isolateProperties.Object();
$.CTC6 = new Isolate.$isolateProperties.AnimationFrames(0, 2);
$.CTC7 = new Isolate.$isolateProperties.AnimationFrames(3, 5);
$.CTC1 = new Isolate.$isolateProperties.ObjectInterceptor();
$.CTC0 = new Isolate.$isolateProperties.JSArray();
$.CTC = new Isolate.$isolateProperties.JSString();
$.CTC4 = new Isolate.$isolateProperties._DeletedKeySentinel();
$.CTC2 = new Isolate.$isolateProperties.NullPointerException(null, Isolate.$isolateProperties.CTC3);
$.CTC5 = new Isolate.$isolateProperties.AnimationFrames(14, 14);
$._cachedBrowserPrefix = null;
$.Player_MOVE_LEFT = 1;
$.HttpRequest_DONE = 4;
$.Player_MOVE_RIGHT = 2;
$.Player_MOVE_JUMP = 3;
$.Player_MOVE_JUMP2 = 4;
$.Player_LOOK_LEFT = 0;
$.Player_LOOK_RIGHT = 1;
$.Player_STATE_DEF = 0;
$.Player_STATE_WALK = 1;
$.Player_STATE_JUMP = 2;
$.Player_STATE_JUMP2 = 3;
$.Player_STATE_INAIR = 4;
$._getTypeNameOf = null;
$._TimerFactory__factory = null;
$.PI = 3.141592653589793;
$.JsonController_json_objects = null;
$._JsonParser_BACKSPACE = 8;
$._JsonParser_TAB = 9;
$.ImageController__images = null;
$._JsonParser_NEW_LINE = 10;
$._JsonParser_FORM_FEED = 12;
$._JsonParser_CARRIAGE_RETURN = 13;
$._JsonParser_SPACE = 32;
$._JsonParser_QUOTE = 34;
$._JsonParser_PLUS = 43;
$._JsonParser_COMMA = 44;
$._JsonParser_MINUS = 45;
$._JsonParser_DOT = 46;
$._JsonParser_SLASH = 47;
$._JsonParser_CHAR_0 = 48;
$._JsonParser_CHAR_1 = 49;
$._JsonParser_CHAR_2 = 50;
$._JsonParser_CHAR_3 = 51;
$._JsonParser_CHAR_4 = 52;
$._JsonParser_CHAR_5 = 53;
$._HashMapImpl__DELETED_KEY = Isolate.$isolateProperties.CTC4;
$._JsonParser_CHAR_6 = 54;
$._HashMapImpl__INITIAL_CAPACITY = 8;
$._JsonParser_CHAR_7 = 55;
$._JsonParser_CHAR_8 = 56;
$._JsonParser_CHAR_9 = 57;
$._JsonParser_COLON = 58;
$._JsonParser_CHAR_CAPITAL_E = 69;
$._JsonParser_LBRACKET = 91;
$._JsonParser_BACKSLASH = 92;
$._JsonParser_RBRACKET = 93;
$._JsonParser_CHAR_B = 98;
$._JsonParser_CHAR_E = 101;
$._JsonParser_CHAR_F = 102;
$._JsonParser_CHAR_R = 114;
$._JsonParser_CHAR_T = 116;
$._JsonParser_CHAR_N = 110;
$._JsonParser_CHAR_U = 117;
$._JsonParser_LBRACE = 123;
$._JsonParser_RBRACE = 125;
$._JsonParser_STRING_LITERAL = 34;
$._JsonParser_NUMBER_LITERAL = 45;
$._JsonParser_NULL_LITERAL = 110;
$._JsonParser_FALSE_LITERAL = 102;
$._JsonParser_TRUE_LITERAL = 116;
$._JsonParser_WHITESPACE = 32;
$._JsonParser_LAST_ASCII = 125;
$._JsonParser_NULL_STRING = 'null';
$._JsonParser_TRUE_STRING = 'true';
$._JsonParser_FALSE_STRING = 'false';
$._JsonParser_tokens = null;
$.Primitives_hashCodeSeed = 0;
$.Primitives_DOLLAR_CHAR_VALUE = 36;
$._ReceivePortImpl__nextFreeId = 1;
Isolate.$lazy($, 'quoteRegExp', 'quoteRegExp', 'get$quoteRegExp', function() {
  return $.JSSyntaxRegExp$('[-[\\]{}()*+?.,\\\\^$|#\\s]', false, false);
});
var $ = null;
Isolate.$finishClasses($$);
$$ = {};
Isolate = Isolate.$finishIsolateConstructor(Isolate);
var $ = new Isolate();
$.$defineNativeClass = function(cls, desc) {
  var fields = desc[''] || [];
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  for (var i = 0; i < fields.length; i++) {
    generateGetterSetter(fields[i], desc);
  }
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var method in desc) {
    if (method !== '') {
      if (hasOwnProperty.call(desc, method)) {
        $.dynamicFunction(method)[cls] = desc[method];
      }
    }
  }
};

(function(table) {
  for (var key in table) {
    $.defineProperty(Object.prototype, key, table[key]);
  }
})({
 is$JavaScriptIndexingBehavior: function() { return false; },
 is$ArrayBufferView: function() { return false; },
 is$_FileList: function() { return false; },
 is$ArrayBuffer: function() { return false; },
 toString$0: function() { return $.toStringForNativeObject(this); },
 is$Blob: function() { return false; },
 is$File: function() { return false; },
 is$Element: function() { return false; },
 is$Collection: function() { return false; },
 is$ImageData: function() { return false; },
 is$Location: function() { return false; },
 is$List: function() { return false; },
 get$hashCode: function() { return $.hashCodeForNativeObject(this); },
 is$Map: function() { return false; }
});

$.$defineNativeClass('HTMLElement', {"": []
});

$.$defineNativeClass('AbstractWorker', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.AbstractWorkerEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('AnalyserNode', {"": []
});

$.$defineNativeClass('HTMLAnchorElement', {"": ["type>"],
 toString$0: function() {
  return this.toString();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('WebKitAnimation', {"": []
});

$.$defineNativeClass('WebKitAnimationEvent', {"": []
});

$.$defineNativeClass('HTMLAppletElement', {"": ["height<", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAreaElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ArrayBuffer', {"": [],
 is$ArrayBuffer: function() { return true; }
});

$.$defineNativeClass('ArrayBufferView', {"": [],
 is$ArrayBufferView: function() { return true; }
});

$.$defineNativeClass('Attr', {"": ["value="]
});

$.$defineNativeClass('AudioBuffer', {"": ["length>"]
});

$.$defineNativeClass('AudioBufferSourceNode', {"": [],
 start$3: function(when, grainOffset, grainDuration) {
  var t1, t2;
  t1 = $ === grainOffset;
  if (t1)
    grainOffset = null;
  t1 = !t1;
  t2 = $ === grainDuration;
  if (t2)
    grainDuration = null;
  t2 = !t2;
  if (!!this.start)
    if (t2)
      this.start(when, grainOffset, grainDuration);
    else if (t1)
      this.start(when, grainOffset);
    else
      this.start(when);
  else if (t2)
    this.noteOn(when, grainOffset, grainDuration);
  else if (t1)
    this.noteOn(when, grainOffset);
  else
    this.noteOn(when);
},
 start$1: function(when) {
  return this.start$3(when,$,$)
}
});

$.$defineNativeClass('AudioContext', {"": [],
 get$on: function() {
  return $.AudioContextEvents$(this);
}
});

$.$defineNativeClass('AudioDestinationNode', {"": []
});

$.$defineNativeClass('HTMLAudioElement', {"": []
});

$.$defineNativeClass('AudioGain', {"": []
});

$.$defineNativeClass('AudioListener', {"": []
});

$.$defineNativeClass('AudioNode', {"": []
});

$.$defineNativeClass('AudioParam', {"": ["value="]
});

$.$defineNativeClass('AudioProcessingEvent', {"": []
});

$.$defineNativeClass('AudioSourceNode', {"": []
});

$.$defineNativeClass('HTMLBRElement', {"": [],
 clear$0: function() { return this.clear.call$0(); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('BarInfo', {"": []
});

$.$defineNativeClass('HTMLBaseElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLBaseFontElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('BatteryManager', {"": ["level>"],
 get$on: function() {
  return $.BatteryManagerEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('BeforeLoadEvent', {"": []
});

$.$defineNativeClass('BiquadFilterNode', {"": ["type>"]
});

$.$defineNativeClass('Blob', {"": ["type>"],
 is$Blob: function() { return true; }
});

$.$defineNativeClass('HTMLBodyElement', {"": [],
 get$on: function() {
  return $.BodyElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLButtonElement', {"": ["type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('CDATASection', {"": []
});

$.$defineNativeClass('CSSCharsetRule', {"": []
});

$.$defineNativeClass('CSSFontFaceRule', {"": ["style>"]
});

$.$defineNativeClass('CSSImportRule', {"": []
});

$.$defineNativeClass('WebKitCSSKeyframeRule', {"": ["style>"]
});

$.$defineNativeClass('WebKitCSSKeyframesRule', {"": []
});

$.$defineNativeClass('WebKitCSSMatrix', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('CSSMediaRule', {"": []
});

$.$defineNativeClass('CSSPageRule', {"": ["style>"]
});

$.$defineNativeClass('CSSPrimitiveValue', {"": []
});

$.$defineNativeClass('CSSRule', {"": ["type>"]
});

$.$defineNativeClass('CSSStyleDeclaration', {"": ["length>"],
 _getPropertyValue$1: function(propertyName) {
  return this.getPropertyValue(propertyName);
},
 getPropertyValue$1: function(propertyName) {
  var propValue = this._getPropertyValue$1(propertyName);
  return !(propValue == null) ? propValue : '';
},
 setProperty$3: function(propertyName, value, priority) {
  this.setProperty(propertyName, value, priority);
  if (!!this.setAttribute)
    this.setAttribute(propertyName, value);
},
 set$border: function(value) {
  this.setProperty$3('border', value, '');
},
 get$clear: function() {
  return this.getPropertyValue$1('clear');
},
 clear$0: function() { return this.get$clear().call$0(); },
 get$filter: function() {
  return this.getPropertyValue$1($.S($._browserPrefix()) + 'filter');
},
 filter$1: function(arg0) { return this.get$filter().call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.get$filter().call$3(arg0, arg1, arg2); },
 set$height: function(value) {
  this.setProperty$3('height', value, '');
},
 set$marginTop: function(value) {
  this.setProperty$3('margin-top', value, '');
},
 set$opacity: function(value) {
  this.setProperty$3('opacity', value, '');
},
 set$src: function(value) {
  this.setProperty$3('src', value, '');
},
 set$transition: function(value) {
  this.setProperty$3($.S($._browserPrefix()) + 'transition', value, '');
},
 get$width: function() {
  return this.getPropertyValue$1('width');
},
 set$width: function(value) {
  this.setProperty$3('width', value, '');
}
});

$.$defineNativeClass('CSSStyleRule', {"": ["style>"]
});

$.$defineNativeClass('CSSStyleSheet', {"": []
});

$.$defineNativeClass('WebKitCSSTransformValue', {"": []
});

$.$defineNativeClass('CSSUnknownRule', {"": []
});

$.$defineNativeClass('CSSValue', {"": []
});

$.$defineNativeClass('HTMLCanvasElement', {"": ["height<", "width="],
 getContext$1: function(contextId) {
  return this.getContext(contextId);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('CanvasGradient', {"": []
});

$.$defineNativeClass('CanvasPattern', {"": []
});

$.$defineNativeClass('CanvasRenderingContext', {"": ["canvas>"]
});

$.$defineNativeClass('CanvasRenderingContext2D', {"": ["fillStyle<", "strokeStyle<"],
 beginPath$0: function() {
  return this.beginPath();
},
 clearRect$4: function(x, y, width, height) {
  return this.clearRect(x,y,width,height);
},
 drawImage$9: function(canvas_OR_image_OR_video, sx_OR_x, sy_OR_y, sw_OR_width, height_OR_sh, dx, dy, dw, dh) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y,sw_OR_width,height_OR_sh,dx,dy,dw,dh);
},
 drawImage$3: function(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y) {
  return this.drawImage(canvas_OR_image_OR_video,sx_OR_x,sy_OR_y);
},
 fillRect$4: function(x, y, width, height) {
  return this.fillRect(x,y,width,height);
},
 fillText$4: function(text, x, y, maxWidth) {
  return this.fillText(text,x,y,maxWidth);
},
 fillText$3: function(text,x,y) {
  return this.fillText(text,x,y);
},
 lineTo$2: function(x, y) {
  return this.lineTo(x,y);
},
 measureText$1: function(text) {
  return this.measureText(text);
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 stroke$0: function() {
  return this.stroke();
},
 strokeRect$5: function(x, y, width, height, lineWidth) {
  return this.strokeRect(x,y,width,height,lineWidth);
},
 strokeRect$4: function(x,y,width,height) {
  return this.strokeRect(x,y,width,height);
},
 setFillColorRgb$4: function(r, g, b, a) {
  this.fillStyle = 'rgba(' + $.S(r) + ', ' + $.S(g) + ', ' + $.S(b) + ', ' + $.S(a) + ')';
},
 setFillColorRgb$3: function(r,g,b) {
  return this.setFillColorRgb$4(r,g,b,1)
}
});

$.$defineNativeClass('ChannelMergerNode', {"": []
});

$.$defineNativeClass('ChannelSplitterNode', {"": []
});

$.$defineNativeClass('CharacterData', {"": ["length>"],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ClientRect', {"": ["width>"]
});

$.$defineNativeClass('Clipboard', {"": []
});

$.$defineNativeClass('CloseEvent', {"": []
});

$.$defineNativeClass('Comment', {"": []
});

$.$defineNativeClass('CompositionEvent', {"": []
});

Console = (typeof console == 'undefined' ? {} : console);
$.$defineNativeClass('HTMLContentElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ConvolverNode', {"": []
});

$.$defineNativeClass('Coordinates', {"": []
});

$.$defineNativeClass('Counter', {"": []
});

$.$defineNativeClass('Crypto', {"": []
});

$.$defineNativeClass('CustomEvent', {"": []
});

$.$defineNativeClass('HTMLDListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DOMApplicationCache', {"": ["status>"],
 get$on: function() {
  return $.DOMApplicationCacheEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('DOMError', {"": []
});

$.$defineNativeClass('DOMException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMFileSystem', {"": []
});

$.$defineNativeClass('DOMFileSystemSync', {"": []
});

$.$defineNativeClass('DOMImplementation', {"": []
});

$.$defineNativeClass('MimeType', {"": ["type>"]
});

$.$defineNativeClass('MimeTypeArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMParser', {"": []
});

$.$defineNativeClass('Plugin', {"": ["length>"]
});

$.$defineNativeClass('PluginArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Selection', {"": ["type>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('DOMSettableTokenList', {"": ["value="]
});

$.$defineNativeClass('DOMTokenList', {"": ["length>"],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('HTMLDataListElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DataTransferItem', {"": ["type>"]
});

$.$defineNativeClass('DataTransferItemList', {"": ["length>"],
 add$2: function(data_OR_file, type) {
  return this.add(data_OR_file,type);
},
 add$1: function(data_OR_file) {
  return this.add(data_OR_file);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('DataView', {"": []
});

$.$defineNativeClass('Database', {"": []
});

$.$defineNativeClass('DatabaseSync', {"": []
});

$.$defineNativeClass('DedicatedWorkerContext', {"": [],
 get$on: function() {
  return $.DedicatedWorkerContextEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('DelayNode', {"": []
});

$.$defineNativeClass('HTMLDetailsElement', {"": [],
 open$3: function(arg0, arg1, arg2) { return this.open.call$3(arg0, arg1, arg2); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('DeviceMotionEvent', {"": []
});

$.$defineNativeClass('DeviceOrientationEvent', {"": []
});

$.$defineNativeClass('HTMLDirectoryElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('DirectoryEntry', {"": []
});

$.$defineNativeClass('DirectoryEntrySync', {"": []
});

$.$defineNativeClass('DirectoryReader', {"": []
});

$.$defineNativeClass('DirectoryReaderSync', {"": []
});

$.$defineNativeClass('HTMLDivElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Document', {"": ["readyState>"],
 get$on: function() {
  return $.DocumentEvents$(this);
},
 get$$$dom_body: function() {
  return this.body;
},
 $$dom_createElement$1: function(tagName) {
  return this.createElement(tagName);
},
 $$dom_getElementById$1: function(elementId) {
  return this.getElementById(elementId);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 query$1: function(selectors) {
  if ($.RegExp_RegExp('^#[_a-zA-Z]\\w*$', false, false).hasMatch$1(selectors) === true)
    return this.$$dom_getElementById$1($.getInterceptor(selectors).substring$1(selectors, 1));
  return this.$$dom_querySelector$1(selectors);
}
});

$.$defineNativeClass('DocumentFragment', {"": [],
 get$elements: function() {
  if (this._elements == null)
    this._elements = $.FilteredElementList$(this);
  return this._elements;
},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 get$innerHTML: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$innerHTML')) {
  {
  var e, t1;
  e = $.Element_Element$tag('div');
  t1 = e.get$nodes();
  $.getInterceptor(t1).add$1(t1, this.clone$1(true));
  return e.get$innerHTML();
}
  } else {
    return Object.prototype.get$innerHTML.call(this);
  }

},
 set$innerHTML: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$innerHTML')) {
  {
  var t1, e, nodes;
  t1 = this.get$nodes();
  $.getInterceptor(t1).clear$0(t1);
  e = $.Element_Element$tag('div');
  e.set$innerHTML(value);
  nodes = $._ListImpl_List$from(e.get$nodes());
  t1 = this.get$nodes();
  $.getInterceptor(t1).addAll$1(t1, nodes);
}
  } else {
    return Object.prototype.set$innerHTML.call(this, value);
  }

},
 get$id: function() {
  return '';
},
 get$parent: function() {
  return;
},
 get$style: function() {
  return $.Element_Element$tag('div').get$style();
},
 click$0: function() {
},
 get$click: function() { return new $.BoundClosure(this, 'click$0'); },
 set$id: function(value) {
  throw $.$$throw($.UnsupportedError$('ID can\'t be set for document fragments.'));
},
 get$on: function() {
  return $.ElementEvents$(this);
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
}
});

$.$defineNativeClass('DocumentType', {"": [],
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('DynamicsCompressorNode', {"": []
});

$.$defineNativeClass('EXTTextureFilterAnisotropic', {"": []
});

$.$defineNativeClass('Element', {"": ["id=", "innerHTML=", "style>"],
 set$elements: function(value) {
  if (Object.getPrototypeOf(this).hasOwnProperty('set$elements')) {
  {
  var elements = this.get$elements();
  $.getInterceptor(elements).clear$0(elements);
  $.getInterceptor(elements).addAll$1(elements, value);
}
  } else {
    return Object.prototype.set$elements.call(this, value);
  }

},
 get$elements: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$elements')) {
  {
  return $._ChildrenElementList$_wrap(this);
}
  } else {
    return Object.prototype.get$elements.call(this);
  }

},
 query$1: function(selectors) {
  return this.$$dom_querySelector$1(selectors);
},
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.ElementEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 get$$$dom_children: function() {
  return this.children;
},
 click$0: function() {
  return this.click();
},
 get$click: function() { return new $.BoundClosure(this, 'click$0'); },
 get$$$dom_firstElementChild: function() {
  return this.firstElementChild;
},
 get$$$dom_lastElementChild: function() {
  return this.lastElementChild;
},
 $$dom_querySelector$1: function(selectors) {
  return this.querySelector(selectors);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLEmbedElement', {"": ["height<", "src<", "type>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('EntityReference', {"": []
});

$.$defineNativeClass('Entry', {"": [],
 moveTo$4: function(parent, name, successCallback, errorCallback) {
  return this.moveTo(parent,name,$.convertDartClosureToJS(successCallback, 1),$.convertDartClosureToJS(errorCallback, 1));
},
 moveTo$2: function(parent$,name$) {
  return this.moveTo(parent$,name$);
},
 remove$2: function(successCallback, errorCallback) {
  return this.remove($.convertDartClosureToJS(successCallback, 0),$.convertDartClosureToJS(errorCallback, 1));
},
 remove$1: function(successCallback) {
  successCallback = $.convertDartClosureToJS(successCallback, 0);
  return this.remove(successCallback);
}
});

$.$defineNativeClass('EntrySync', {"": [],
 moveTo$2: function(parent, name) {
  return this.moveTo(parent,name);
},
 remove$0: function() {
  return this.remove();
}
});

$.$defineNativeClass('ErrorEvent', {"": []
});

$.$defineNativeClass('Event', {"": ["type>"]
});

$.$defineNativeClass('EventException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('EventSource', {"": ["readyState>"],
 get$on: function() {
  return $.EventSourceEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('EventTarget', {"": [],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.Events$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_addEventListener$3')) {
  {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_addEventListener$3.call(this, type, listener, useCapture);
  }

},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  if (Object.getPrototypeOf(this).hasOwnProperty('$$dom_removeEventListener$3')) {
  {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
  } else {
    return Object.prototype.$$dom_removeEventListener$3.call(this, type, listener, useCapture);
  }

}
});

$.$defineNativeClass('HTMLFieldSetElement', {"": ["elements>", "type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('File', {"": [],
 is$File: function() { return true; }
});

$.$defineNativeClass('FileEntry', {"": []
});

$.$defineNativeClass('FileEntrySync', {"": []
});

$.$defineNativeClass('FileError', {"": []
});

$.$defineNativeClass('FileException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('FileReader', {"": ["readyState>"],
 get$on: function() {
  return $.FileReaderEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileReaderSync', {"": []
});

$.$defineNativeClass('FileWriter', {"": ["length>", "readyState>"],
 get$on: function() {
  return $.FileWriterEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('FileWriterSync', {"": ["length>"]
});

$.$defineNativeClass('Float32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Float64Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLFontElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('FormData', {"": []
});

$.$defineNativeClass('HTMLFormElement', {"": ["length>"],
 reset$0: function() {
  return this.reset();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameElement', {"": ["location>", "src<", "width>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLFrameSetElement', {"": [],
 get$on: function() {
  return $.FrameSetElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('GainNode', {"": []
});

$.$defineNativeClass('Gamepad', {"": ["id>"]
});

$.$defineNativeClass('Geolocation', {"": []
});

$.$defineNativeClass('Geoposition', {"": []
});

$.$defineNativeClass('HTMLHRElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLAllCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLCollection', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLOptionsCollection', {"": [],
 get$length: function() {
  return this.length;
},
 set$length: function(value) {
  this.length = value;
},
 remove$1: function(index) {
  return this.remove(index);
}
});

$.$defineNativeClass('HashChangeEvent', {"": []
});

$.$defineNativeClass('HTMLHeadElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLHeadingElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLDocument', {"": [],
 get$body: function() {
  return $.document().get$$$dom_body();
}
});

$.$defineNativeClass('HTMLHtmlElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('XMLHttpRequest', {"": ["readyState>", "responseText>", "status>", "withCredentials<"],
 get$on: function() {
  return $.HttpRequestEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 open$5: function(method, url, async, user, password) {
  return this.open(method,url,async,user,password);
},
 open$3: function(method,url,async) {
  return this.open(method,url,async);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 send$1: function(data) {
  return this.send(data);
},
 send$0: function() {
  return this.send();
}
});

$.$defineNativeClass('XMLHttpRequestException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XMLHttpRequestProgressEvent', {"": []
});

$.$defineNativeClass('XMLHttpRequestUpload', {"": [],
 get$on: function() {
  return $.HttpRequestUploadEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBAny', {"": []
});

$.$defineNativeClass('IDBCursor', {"": ["key>"],
 update$1: function(value) {
  return this._update_1$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 _update_1$1: function(value) {
  return this.update(value);
}
});

$.$defineNativeClass('IDBCursorWithValue', {"": ["value>"]
});

$.$defineNativeClass('IDBDatabase', {"": [],
 get$on: function() {
  return $.IDBDatabaseEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBDatabaseException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('IDBFactory', {"": []
});

$.$defineNativeClass('IDBIndex', {"": []
});

$.$defineNativeClass('IDBKey', {"": []
});

$.$defineNativeClass('IDBKeyRange', {"": []
});

$.$defineNativeClass('IDBObjectStore', {"": [],
 add$2: function(value, key) {
  var t1 = $ === key;
  if (t1)
    key = null;
  if (!t1)
    return this._add_1$2($._convertDartToNative_PrepareForStructuredClone(value), key);
  return this._add_2$1($._convertDartToNative_PrepareForStructuredClone(value));
},
 add$1: function(value) {
  return this.add$2(value,$)
},
 _add_1$2: function(value, key) {
  return this.add(value,key);
},
 _add_2$1: function(value) {
  return this.add(value);
},
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('IDBOpenDBRequest', {"": [],
 get$on: function() {
  return $.IDBOpenDBRequestEvents$(this);
}
});

$.$defineNativeClass('IDBRequest', {"": ["readyState>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.IDBRequestEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBTransaction', {"": [],
 get$on: function() {
  return $.IDBTransactionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeEvent', {"": []
});

$.$defineNativeClass('IDBVersionChangeRequest', {"": [],
 get$on: function() {
  return $.IDBVersionChangeRequestEvents$(this);
}
});

$.$defineNativeClass('HTMLIFrameElement', {"": ["height<", "src<", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('IceCandidate', {"": []
});

$.$defineNativeClass('ImageData', {"": ["width>"],
 is$ImageData: function() { return true; }
});

$.$defineNativeClass('HTMLImageElement', {"": ["border<", "height<", "src<", "width=", "x>", "y>"],
 complete$1: function(arg0) { return this.complete.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLInputElement', {"": ["height<", "pattern>", "src<", "type>", "value=", "width="],
 get$on: function() {
  return $.InputElementEvents$(this);
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('Int16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Int8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('JavaScriptCallFrame', {"": ["type>"]
});

$.$defineNativeClass('KeyboardEvent', {"": []
});

$.$defineNativeClass('HTMLKeygenElement', {"": ["type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLIElement', {"": ["type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLabelElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLegendElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLLinkElement', {"": ["type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('History', {"": ["length>"]
});

$.$defineNativeClass('Location', {"": [],
 assign$1: function(url) {
  return this.assign(url);
},
 toString$0: function() {
  return this.toString();
},
 is$Location: function() { return true; }
});

$.$defineNativeClass('LocalMediaStream', {"": []
});

$.$defineNativeClass('DOMWindow', {"": ["innerHeight>", "navigator>", "status>"],
 open$3: function(url, name$, options) {
  if (options == null)
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$));
  else
    return $._DOMWindowCrossFrame__createSafe(this.open(url,name$,options));
},
 get$location: function() {
  var result = this.get$_location();
  if ($.LocalWindow__isDartLocation(result) === true)
    return result;
  if (null == this._location_wrapper)
    this._location_wrapper = $._LocationWrapper$(result);
  return this._location_wrapper;
},
 get$_location: function() {
  return this.location;
},
 requestAnimationFrame$1: function(callback) {
  this._ensureRequestAnimationFrame$0();
  return this._requestAnimationFrame$1(callback);
},
 _requestAnimationFrame$1: function(callback) {
  return this.requestAnimationFrame($.convertDartClosureToJS(callback, 1));
},
 _ensureRequestAnimationFrame$0: function() {
  if (!!(this.requestAnimationFrame && this.cancelAnimationFrame))
    return;
    (function($this) {
   var vendors = ['ms', 'moz', 'webkit', 'o'];
   for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
     $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
     $this.cancelAnimationFrame =
         $this[vendors[i]+'CancelAnimationFrame'] ||
         $this[vendors[i]+'CancelRequestAnimationFrame'];
   }
   if ($this.requestAnimationFrame && $this.cancelAnimationFrame) return;
   $this.requestAnimationFrame = function(callback) {
      return window.setTimeout(function() {
        callback(Date.now());
      }, 16 /* 16ms ~= 60fps */);
   };
   $this.cancelAnimationFrame = function(id) { clearTimeout(id); }
  })(this);
},
 get$on: function() {
  return $.LocalWindowEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 clearTimeout$1: function(handle) {
  return this.clearTimeout(handle);
},
 close$0: function() {
  return this.close();
},
 moveTo$2: function(x, y) {
  return this.moveTo(x,y);
},
 _postMessage_1$2: function(message, targetOrigin) {
  return this.postMessage(message,targetOrigin);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('HTMLMapElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLMarqueeElement', {"": ["height<", "width="],
 start$0: function() {
  return this.start();
},
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaController', {"": [],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('HTMLMediaElement', {"": ["readyState>", "src<"],
 get$on: function() {
  return $.MediaElementEvents$(this);
},
 load$0: function() {
  return this.load();
},
 get$load: function() { return new $.BoundClosure(this, 'load$0'); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('MediaElementAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaError', {"": []
});

$.$defineNativeClass('MediaKeyError', {"": []
});

$.$defineNativeClass('MediaKeyEvent', {"": []
});

$.$defineNativeClass('MediaList', {"": ["length>"]
});

$.$defineNativeClass('MediaQueryList', {"": []
});

$.$defineNativeClass('MediaSource', {"": ["readyState>"],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStream', {"": ["readyState>"],
 get$on: function() {
  return $.MediaStreamEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamAudioSourceNode', {"": []
});

$.$defineNativeClass('MediaStreamEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrack', {"": ["readyState>"],
 get$on: function() {
  return $.MediaStreamTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MediaStreamTrackEvent', {"": []
});

$.$defineNativeClass('MediaStreamTrackList', {"": ["length>"],
 get$on: function() {
  return $.MediaStreamTrackListEvents$(this);
},
 add$1: function(track) {
  return this.add(track);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 remove$1: function(track) {
  return this.remove(track);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('MemoryInfo', {"": []
});

$.$defineNativeClass('HTMLMenuElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MessageChannel', {"": []
});

$.$defineNativeClass('MessageEvent', {"": ["ports>"]
});

$.$defineNativeClass('MessagePort', {"": [],
 get$on: function() {
  return $.MessagePortEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('HTMLMetaElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Metadata', {"": []
});

$.$defineNativeClass('HTMLMeterElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLModElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('MouseEvent', {"": ["x>", "y>"]
});

$.$defineNativeClass('MutationEvent', {"": []
});

$.$defineNativeClass('MutationObserver', {"": []
});

$.$defineNativeClass('MutationRecord', {"": ["type>"]
});

$.$defineNativeClass('NamedNodeMap', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Navigator', {"": ["userAgent>"]
});

$.$defineNativeClass('NavigatorUserMediaError', {"": []
});

$.$defineNativeClass('Node', {"": [],
 get$nodes: function() {
  return $._ChildNodeListLazy$(this);
},
 remove$0: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('remove$0')) {
  {
  if (!(this.get$parent() == null))
    this.get$parent().$$dom_removeChild$1(this);
}
  } else {
    return Object.prototype.remove$0.call(this);
  }

},
 replaceWith$1: function(otherNode, exception) {
  var parent$;
  try {
    parent$ = this.get$parent();
    parent$.$$dom_replaceChild$2(otherNode, this);
  } catch (exception) {
    $.unwrapException(exception);
  }

  return this;
},
 get$$$dom_childNodes: function() {
  return this.childNodes;
},
 get$parent: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$parent')) {
  {
  return this.parentNode;
}
  } else {
    return Object.prototype.get$parent.call(this);
  }

},
 set$text: function(value) {
  this.textContent = value;
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_appendChild$1: function(newChild) {
  return this.appendChild(newChild);
},
 clone$1: function(deep) {
  if (Object.getPrototypeOf(this).hasOwnProperty('clone$1')) {
  {
  return this.cloneNode(deep);
}
  } else {
    return Object.prototype.clone$1.call(this, deep);
  }

},
 $$dom_removeChild$1: function(oldChild) {
  return this.removeChild(oldChild);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_replaceChild$2: function(newChild, oldChild) {
  return this.replaceChild(newChild,oldChild);
}
});

$.$defineNativeClass('NodeFilter', {"": []
});

$.$defineNativeClass('NodeIterator', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.filter.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('NodeList', {"": ["length>"],
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  this._parent.$$dom_appendChild$1(value);
},
 addLast$1: function(value) {
  this._parent.$$dom_appendChild$1(value);
},
 addAll$1: function(collection) {
  var t1, t2;
  for (t1 = $.iterator(collection), t2 = this._parent; t1.get$hasNext() === true;)
    t2.$$dom_appendChild$1(t1.next$0());
},
 removeLast$0: function() {
  var result = $.get$last(this);
  if (!(result == null))
    this._parent.$$dom_removeChild$1(result);
  return result;
},
 clear$0: function() {
  this._parent.set$text('');
},
 oprator$indexSet$2: function(index, value) {
  this._parent.$$dom_replaceChild$2(value, this.operator$index$1(index));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._NodeListWrapper$($._Collections_filter(this, [], f));
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._NodeListWrapper$($._Lists_getRange(this, start, rangeLength, []));
},
 operator$index$1: function(index) {
  return this[index];
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Notation', {"": []
});

$.$defineNativeClass('Notification', {"": [],
 get$on: function() {
  return $.NotificationEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('NotificationCenter', {"": []
});

$.$defineNativeClass('OESElementIndexUint', {"": []
});

$.$defineNativeClass('OESStandardDerivatives', {"": []
});

$.$defineNativeClass('OESTextureFloat', {"": []
});

$.$defineNativeClass('OESVertexArrayObject', {"": []
});

$.$defineNativeClass('HTMLOListElement', {"": ["type>"],
 start$0: function() { return this.start.call$0(); },
 start$1: function(arg0) { return this.start.call$1(arg0); },
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLObjectElement', {"": ["border<", "height<", "type>", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OfflineAudioCompletionEvent', {"": []
});

$.$defineNativeClass('HTMLOptGroupElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLOptionElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OscillatorNode', {"": ["type>"],
 start$1: function(when) {
  return this.start(when);
}
});

$.$defineNativeClass('HTMLOutputElement', {"": ["type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('OverflowEvent', {"": []
});

$.$defineNativeClass('PagePopupController', {"": []
});

$.$defineNativeClass('PageTransitionEvent', {"": []
});

$.$defineNativeClass('PannerNode', {"": []
});

$.$defineNativeClass('HTMLParagraphElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLParamElement', {"": ["type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('PeerConnection00', {"": ["readyState>"],
 get$on: function() {
  return $.PeerConnection00Events$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('Performance', {"": []
});

$.$defineNativeClass('PerformanceNavigation', {"": ["type>"]
});

$.$defineNativeClass('PerformanceTiming', {"": []
});

$.$defineNativeClass('WebKitPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('PopStateEvent', {"": []
});

$.$defineNativeClass('PositionError', {"": []
});

$.$defineNativeClass('HTMLPreElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProcessingInstruction', {"": []
});

$.$defineNativeClass('HTMLProgressElement', {"": ["value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ProgressEvent', {"": []
});

$.$defineNativeClass('HTMLQuoteElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('RGBColor', {"": []
});

$.$defineNativeClass('RTCDataChannel', {"": ["readyState>"],
 get$on: function() {
  return $.RTCDataChannelEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCDataChannelEvent', {"": []
});

$.$defineNativeClass('RTCIceCandidate', {"": []
});

$.$defineNativeClass('RTCIceCandidateEvent', {"": []
});

$.$defineNativeClass('RTCPeerConnection', {"": ["readyState>"],
 get$on: function() {
  return $.RTCPeerConnectionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('RTCSessionDescription', {"": ["type>"]
});

$.$defineNativeClass('RTCStatsElement', {"": []
});

$.$defineNativeClass('RTCStatsReport', {"": []
});

$.$defineNativeClass('RTCStatsResponse', {"": []
});

$.$defineNativeClass('RadioNodeList', {"": ["value="]
});

$.$defineNativeClass('Range', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('RangeException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('Rect', {"": []
});

$.$defineNativeClass('SQLError', {"": []
});

$.$defineNativeClass('SQLException', {"": []
});

$.$defineNativeClass('SQLResultSet', {"": []
});

$.$defineNativeClass('SQLResultSetRowList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SQLTransaction', {"": []
});

$.$defineNativeClass('SQLTransactionSync', {"": []
});

$.$defineNativeClass('Screen', {"": ["width>"]
});

$.$defineNativeClass('HTMLScriptElement', {"": ["src<", "type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ScriptProcessorNode', {"": [],
 get$on: function() {
  return $.ScriptProcessorNodeEvents$(this);
}
});

$.$defineNativeClass('ScriptProfile', {"": []
});

$.$defineNativeClass('ScriptProfileNode', {"": []
});

$.$defineNativeClass('HTMLSelectElement', {"": ["length=", "type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SessionDescription', {"": []
});

$.$defineNativeClass('HTMLShadowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('ShadowRoot', {"": ["innerHTML="],
 clone$1: function(deep) {
  return this.cloneNode(deep);
}
});

$.$defineNativeClass('SharedWorker', {"": []
});

$.$defineNativeClass('SharedWorkerContext', {"": [],
 get$on: function() {
  return $.SharedWorkerContextEvents$(this);
}
});

$.$defineNativeClass('SourceBuffer', {"": []
});

$.$defineNativeClass('SourceBufferList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLSourceElement', {"": ["src<", "type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLSpanElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('SpeechGrammar', {"": ["src<"]
});

$.$defineNativeClass('SpeechGrammarList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputEvent', {"": []
});

$.$defineNativeClass('SpeechInputResult', {"": []
});

$.$defineNativeClass('SpeechRecognition', {"": [],
 get$on: function() {
  return $.SpeechRecognitionEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 start$0: function() {
  return this.start();
}
});

$.$defineNativeClass('SpeechRecognitionAlternative', {"": []
});

$.$defineNativeClass('SpeechRecognitionError', {"": []
});

$.$defineNativeClass('SpeechRecognitionEvent', {"": []
});

$.$defineNativeClass('SpeechRecognitionResult', {"": ["length>"]
});

$.$defineNativeClass('Storage', {"": [],
 containsKey$1: function(key) {
  return !(this.$$dom_getItem$1(key) == null);
},
 operator$index$1: function(key) {
  return this.$$dom_getItem$1(key);
},
 oprator$indexSet$2: function(key, value) {
  return this.$$dom_setItem$2(key, value);
},
 remove$1: function(key) {
  var value = this.operator$index$1(key);
  this.$$dom_removeItem$1(key);
  return value;
},
 clear$0: function() {
  return this.$$dom_clear$0();
},
 forEach$1: function(f) {
  var i, key;
  for (i = 0; true; ++i) {
    key = this.$$dom_key$1(i);
    if (key == null)
      return;
    f.call$2(key, this.operator$index$1(key));
  }
},
 get$keys: function() {
  var keys = [];
  this.forEach$1(new $.Storage_keys_anon(keys));
  return keys;
},
 get$values: function() {
  var values = [];
  this.forEach$1(new $.Storage_values_anon(values));
  return values;
},
 get$length: function() {
  return this.get$$$dom_length();
},
 get$isEmpty: function() {
  return this.$$dom_key$1(0) == null;
},
 get$$$dom_length: function() {
  return this.length;
},
 $$dom_clear$0: function() {
  return this.clear();
},
 $$dom_getItem$1: function(key) {
  return this.getItem(key);
},
 $$dom_key$1: function(index) {
  return this.key(index);
},
 $$dom_removeItem$1: function(key) {
  return this.removeItem(key);
},
 $$dom_setItem$2: function(key, data) {
  return this.setItem(key,data);
},
 is$Map: function() { return true; }
});

$.$defineNativeClass('StorageEvent', {"": ["key>"]
});

$.$defineNativeClass('StorageInfo', {"": []
});

$.$defineNativeClass('HTMLStyleElement', {"": ["type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('StyleMedia', {"": ["type>"]
});

$.$defineNativeClass('StyleSheet', {"": ["type>"]
});

$.$defineNativeClass('HTMLTableCaptionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableCellElement', {"": ["height<", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableColElement', {"": ["width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableElement', {"": ["border<", "width="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableRowElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('HTMLTableSectionElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Text', {"": []
});

$.$defineNativeClass('HTMLTextAreaElement', {"": ["type>", "value="],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TextEvent', {"": []
});

$.$defineNativeClass('TextMetrics', {"": ["width>"]
});

$.$defineNativeClass('TextTrack', {"": [],
 get$on: function() {
  return $.TextTrackEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCue', {"": ["id=", "text<"],
 get$on: function() {
  return $.TextTrackCueEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('TextTrackCueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('TextTrackList', {"": ["length>"],
 get$on: function() {
  return $.TextTrackListEvents$(this);
},
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('TimeRanges', {"": ["length>"],
 start$1: function(index) {
  return this.start(index);
}
});

$.$defineNativeClass('HTMLTitleElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Touch', {"": []
});

$.$defineNativeClass('TouchEvent', {"": []
});

$.$defineNativeClass('TouchList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('HTMLTrackElement', {"": ["readyState>", "src<"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('TrackEvent', {"": []
});

$.$defineNativeClass('WebKitTransitionEvent', {"": []
});

$.$defineNativeClass('TreeWalker', {"": [],
 filter$1: function(arg0) { return this.filter.call$1(arg0); },
 filter$3: function(arg0, arg1, arg2) { return this.filter.call$3(arg0, arg1, arg2); }
});

$.$defineNativeClass('UIEvent', {"": ["keyCode>"]
});

$.$defineNativeClass('HTMLUListElement', {"": ["type>"],
 is$Element: function() { return true; }
});

$.$defineNativeClass('Uint16Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint32Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8Array', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  return this[index] = value;
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Uint8ClampedArray', {"": []
});

$.$defineNativeClass('HTMLUnknownElement', {"": [],
 is$Element: function() { return true; }
});

$.$defineNativeClass('URL', {"": []
});

$.$defineNativeClass('ValidityState', {"": []
});

$.$defineNativeClass('HTMLVideoElement', {"": ["height<", "width="]
});

$.$defineNativeClass('WaveShaperNode', {"": []
});

$.$defineNativeClass('WaveTable', {"": []
});

$.$defineNativeClass('WebGLActiveInfo', {"": ["type>"]
});

$.$defineNativeClass('WebGLBuffer', {"": []
});

$.$defineNativeClass('WebGLCompressedTextureS3TC', {"": []
});

$.$defineNativeClass('WebGLContextAttributes', {"": []
});

$.$defineNativeClass('WebGLContextEvent', {"": []
});

$.$defineNativeClass('WebGLDebugRendererInfo', {"": []
});

$.$defineNativeClass('WebGLDebugShaders', {"": []
});

$.$defineNativeClass('WebGLDepthTexture', {"": []
});

$.$defineNativeClass('WebGLFramebuffer', {"": []
});

$.$defineNativeClass('WebGLLoseContext', {"": []
});

$.$defineNativeClass('WebGLProgram', {"": []
});

$.$defineNativeClass('WebGLRenderbuffer', {"": []
});

$.$defineNativeClass('WebGLRenderingContext', {"": []
});

$.$defineNativeClass('WebGLShader', {"": []
});

$.$defineNativeClass('WebGLShaderPrecisionFormat', {"": []
});

$.$defineNativeClass('WebGLTexture', {"": []
});

$.$defineNativeClass('WebGLUniformLocation', {"": []
});

$.$defineNativeClass('WebGLVertexArrayObjectOES', {"": []
});

$.$defineNativeClass('WebKitCSSFilterValue', {"": []
});

$.$defineNativeClass('WebKitNamedFlow', {"": [],
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WebSocket', {"": ["readyState>"],
 get$on: function() {
  return $.WebSocketEvents$(this);
},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 close$2: function(code, reason) {
  return this.close(code,reason);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
}
});

$.$defineNativeClass('WheelEvent', {"": []
});

$.$defineNativeClass('Worker', {"": [],
 get$on: function() {
  return $.WorkerEvents$(this);
},
 postMessage$2: function(message, messagePorts) {
  var t1 = $ === messagePorts;
  if (t1)
    messagePorts = null;
  if (!t1) {
    this._postMessage_1$2($._convertDartToNative_PrepareForStructuredClone(message), messagePorts);
    return;
  }
  this._postMessage_2$1($._convertDartToNative_PrepareForStructuredClone(message));
  return;
},
 postMessage$1: function(message) {
  return this.postMessage$2(message,$)
},
 _postMessage_1$2: function(message, messagePorts) {
  return this.postMessage(message,messagePorts);
},
 _postMessage_2$1: function(message) {
  return this.postMessage(message);
}
});

$.$defineNativeClass('WorkerContext', {"": ["location>", "navigator>"],
 get$on: function() {
  if (Object.getPrototypeOf(this).hasOwnProperty('get$on')) {
  {
  return $.WorkerContextEvents$(this);
}
  } else {
    return Object.prototype.get$on.call(this);
  }

},
 $$dom_addEventListener$3: function(type, listener, useCapture) {
  return this.addEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 clearTimeout$1: function(handle) {
  return this.clearTimeout(handle);
},
 close$0: function() {
  return this.close();
},
 $$dom_removeEventListener$3: function(type, listener, useCapture) {
  return this.removeEventListener(type,$.convertDartClosureToJS(listener, 1),useCapture);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
}
});

$.$defineNativeClass('WorkerLocation', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('WorkerNavigator', {"": ["userAgent>"]
});

$.$defineNativeClass('XMLSerializer', {"": []
});

$.$defineNativeClass('XPathEvaluator', {"": []
});

$.$defineNativeClass('XPathException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('XPathExpression', {"": []
});

$.$defineNativeClass('XPathNSResolver', {"": []
});

$.$defineNativeClass('XPathResult', {"": []
});

$.$defineNativeClass('XSLTProcessor', {"": [],
 reset$0: function() {
  return this.reset();
}
});

$.$defineNativeClass('CSSRuleList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('CSSValueList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$JavaScriptIndexingBehavior: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; }
});

$.$defineNativeClass('ClientRectList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('DOMStringList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArray', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('EntryArraySync', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('FileList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$_FileList: function() { return true; },
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('GamepadList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('MediaStreamList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechInputResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SpeechRecognitionResultList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('StyleSheetList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('WebKitAnimationList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  var t1;
  for (t1 = $.iterator(this); t1.get$hasNext() === true;)
    f.call$1(t1.next$0());
  return;
},
 filter$1: function(f) {
  return $._Collections_filter(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return $._Lists_indexOf(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return $._Lists_getRange(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('Worker', {"": [],
 get$id: function() {
  return this.id;
},
 set$id: function(i) {
  this.id = i;
},
 postMessage$1: function(msg) {
  return this.postMessage(msg);
}
});

$.$defineNativeClass('DOMWindow', {"": [],
 setTimeout$2: function(handler, timeout) {
  return this.setTimeout($.convertDartClosureToJS(handler, 0),timeout);
},
 setInterval$2: function(handler, timeout) {
  return this.setInterval($.convertDartClosureToJS(handler, 0),timeout);
},
 clearTimeout$1: function(handle) {
  return this.clearTimeout(handle);
}
});

$.$defineNativeClass('SVGAElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphDefElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphElement', {"": []
});

$.$defineNativeClass('SVGAltGlyphItemElement', {"": []
});

$.$defineNativeClass('SVGAngle', {"": ["value="]
});

$.$defineNativeClass('SVGAnimateColorElement', {"": []
});

$.$defineNativeClass('SVGAnimateElement', {"": []
});

$.$defineNativeClass('SVGAnimateMotionElement', {"": []
});

$.$defineNativeClass('SVGAnimateTransformElement', {"": []
});

$.$defineNativeClass('SVGAnimatedAngle', {"": []
});

$.$defineNativeClass('SVGAnimatedBoolean', {"": []
});

$.$defineNativeClass('SVGAnimatedEnumeration', {"": []
});

$.$defineNativeClass('SVGAnimatedInteger', {"": []
});

$.$defineNativeClass('SVGAnimatedLength', {"": []
});

$.$defineNativeClass('SVGAnimatedLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedNumber', {"": []
});

$.$defineNativeClass('SVGAnimatedNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimatedPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGAnimatedRect', {"": []
});

$.$defineNativeClass('SVGAnimatedString', {"": []
});

$.$defineNativeClass('SVGAnimatedTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGAnimationElement', {"": []
});

$.$defineNativeClass('SVGCircleElement', {"": []
});

$.$defineNativeClass('SVGClipPathElement', {"": []
});

$.$defineNativeClass('SVGColor', {"": []
});

$.$defineNativeClass('SVGComponentTransferFunctionElement', {"": ["type>"]
});

$.$defineNativeClass('SVGCursorElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGDefsElement', {"": []
});

$.$defineNativeClass('SVGDescElement', {"": []
});

$.$defineNativeClass('SVGDocument', {"": []
});

$.$defineNativeClass('SVGElement', {"": [],
 get$elements: function() {
  return $.FilteredElementList$(this);
},
 set$elements: function(value) {
  var elements = this.get$elements();
  $.getInterceptor(elements).clear$0(elements);
  $.getInterceptor(elements).addAll$1(elements, value);
},
 get$innerHTML: function() {
  var container, cloned, t1;
  container = $.Element_Element$tag('div');
  cloned = this.clone$1(true);
  t1 = container.get$elements();
  $.getInterceptor(t1).addAll$1(t1, cloned.get$elements());
  return container.get$innerHTML();
},
 set$innerHTML: function(svg) {
  var container = $.Element_Element$tag('div');
  container.set$innerHTML('<svg version="1.1">' + $.S(svg) + '</svg>');
  this.set$elements($.index(container.get$elements(), 0).get$elements());
},
 get$id: function() {
  return this.id;
},
 set$id: function(value) {
  this.id = value;
}
});

$.$defineNativeClass('SVGElementInstance', {"": [],
 get$on: function() {
  return $.SVGElementInstanceEvents$(this);
}
});

$.$defineNativeClass('SVGEllipseElement', {"": []
});

$.$defineNativeClass('SVGException', {"": [],
 toString$0: function() {
  return this.toString();
}
});

$.$defineNativeClass('SVGFEBlendElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEColorMatrixElement', {"": ["type>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEComponentTransferElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFECompositeElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEConvolveMatrixElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDiffuseLightingElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDisplacementMapElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEDistantLightElement', {"": []
});

$.$defineNativeClass('SVGFEDropShadowElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEFloodElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEFuncAElement', {"": []
});

$.$defineNativeClass('SVGFEFuncBElement', {"": []
});

$.$defineNativeClass('SVGFEFuncGElement', {"": []
});

$.$defineNativeClass('SVGFEFuncRElement', {"": []
});

$.$defineNativeClass('SVGFEGaussianBlurElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEImageElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEMergeElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEMergeNodeElement', {"": []
});

$.$defineNativeClass('SVGFEMorphologyElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEOffsetElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFEPointLightElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFESpecularLightingElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFESpotLightElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGFETileElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFETurbulenceElement', {"": ["type>", "width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFilterElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGFontElement', {"": []
});

$.$defineNativeClass('SVGFontFaceElement', {"": []
});

$.$defineNativeClass('SVGFontFaceFormatElement', {"": []
});

$.$defineNativeClass('SVGFontFaceNameElement', {"": []
});

$.$defineNativeClass('SVGFontFaceSrcElement', {"": []
});

$.$defineNativeClass('SVGFontFaceUriElement', {"": []
});

$.$defineNativeClass('SVGForeignObjectElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGGElement', {"": []
});

$.$defineNativeClass('SVGGlyphElement', {"": []
});

$.$defineNativeClass('SVGGlyphRefElement', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGGradientElement', {"": []
});

$.$defineNativeClass('SVGHKernElement', {"": []
});

$.$defineNativeClass('SVGImageElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGLength', {"": ["value="]
});

$.$defineNativeClass('SVGLengthList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGLineElement', {"": ["x2>", "y2>"]
});

$.$defineNativeClass('SVGLinearGradientElement', {"": ["x2>", "y2>"]
});

$.$defineNativeClass('SVGMPathElement', {"": []
});

$.$defineNativeClass('SVGMarkerElement', {"": []
});

$.$defineNativeClass('SVGMaskElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGMatrix', {"": []
});

$.$defineNativeClass('SVGMetadataElement', {"": []
});

$.$defineNativeClass('SVGMissingGlyphElement', {"": []
});

$.$defineNativeClass('SVGNumber', {"": ["value="]
});

$.$defineNativeClass('SVGNumberList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPaint', {"": []
});

$.$defineNativeClass('SVGPathElement', {"": []
});

$.$defineNativeClass('SVGPathSeg', {"": []
});

$.$defineNativeClass('SVGPathSegArcAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegArcRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegClosePath', {"": []
});

$.$defineNativeClass('SVGPathSegCurvetoCubicAbs', {"": ["x=", "x2>", "y=", "y2>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicRel', {"": ["x=", "x2>", "y=", "y2>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothAbs', {"": ["x=", "x2>", "y=", "y2>"]
});

$.$defineNativeClass('SVGPathSegCurvetoCubicSmoothRel', {"": ["x=", "x2>", "y=", "y2>"]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegCurvetoQuadraticSmoothRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalAbs', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoHorizontalRel', {"": ["x="]
});

$.$defineNativeClass('SVGPathSegLinetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalAbs', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegLinetoVerticalRel', {"": ["y="]
});

$.$defineNativeClass('SVGPathSegList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGPathSegMovetoAbs', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPathSegMovetoRel', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPatternElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGPoint', {"": ["x=", "y="]
});

$.$defineNativeClass('SVGPointList', {"": [],
 clear$0: function() {
  return this.clear();
}
});

$.$defineNativeClass('SVGPolygonElement', {"": []
});

$.$defineNativeClass('SVGPolylineElement', {"": []
});

$.$defineNativeClass('SVGPreserveAspectRatio', {"": []
});

$.$defineNativeClass('SVGRadialGradientElement', {"": []
});

$.$defineNativeClass('SVGRect', {"": ["height<", "width=", "x=", "y="]
});

$.$defineNativeClass('SVGRectElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGRenderingIntent', {"": []
});

$.$defineNativeClass('SVGSVGElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGScriptElement', {"": ["type>"]
});

$.$defineNativeClass('SVGSetElement', {"": []
});

$.$defineNativeClass('SVGStopElement', {"": []
});

$.$defineNativeClass('SVGStringList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGStyleElement', {"": ["type>"]
});

$.$defineNativeClass('SVGSwitchElement', {"": []
});

$.$defineNativeClass('SVGSymbolElement', {"": []
});

$.$defineNativeClass('SVGTRefElement', {"": []
});

$.$defineNativeClass('SVGTSpanElement', {"": []
});

$.$defineNativeClass('SVGTextContentElement', {"": []
});

$.$defineNativeClass('SVGTextElement', {"": []
});

$.$defineNativeClass('SVGTextPathElement', {"": []
});

$.$defineNativeClass('SVGTextPositioningElement', {"": ["x>", "y>"]
});

$.$defineNativeClass('SVGTitleElement', {"": []
});

$.$defineNativeClass('SVGTransform', {"": ["type>"]
});

$.$defineNativeClass('SVGTransformList', {"": [],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.get$length(), 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 clear$0: function() {
  return this.clear();
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

$.$defineNativeClass('SVGUnitTypes', {"": []
});

$.$defineNativeClass('SVGUseElement', {"": ["width>", "x>", "y>"]
});

$.$defineNativeClass('SVGVKernElement', {"": []
});

$.$defineNativeClass('SVGViewElement', {"": []
});

$.$defineNativeClass('SVGViewSpec', {"": []
});

$.$defineNativeClass('SVGZoomEvent', {"": []
});

$.$defineNativeClass('SVGElementInstanceList', {"": ["length>"],
 operator$index$1: function(index) {
  return this[index];
},
 oprator$indexSet$2: function(index, value) {
  throw $.$$throw($.UnsupportedError$('Cannot assign element of immutable List.'));
},
 iterator$0: function() {
  return $.FixedSizeListIterator$(this);
},
 add$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addLast$1: function(value) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 addAll$1: function(collection) {
  throw $.$$throw($.UnsupportedError$('Cannot add to immutable List.'));
},
 forEach$1: function(f) {
  return this.get$_Collections().forEach$2(this, f);
},
 filter$1: function(f) {
  return this.get$_Collections().filter$3(this, [], f);
},
 get$isEmpty: function() {
  return $.eq($.get$length(this), 0);
},
 indexOf$2: function(element, start) {
  return this.get$_Lists().indexOf$4(this, element, start, $.get$length(this));
},
 indexOf$1: function(element) {
  return this.indexOf$2(element,0)
},
 get$last: function() {
  return this.operator$index$1($.sub(this.length, 1));
},
 removeLast$0: function() {
  throw $.$$throw($.UnsupportedError$('Cannot removeLast on immutable List.'));
},
 removeRange$2: function(start, rangeLength) {
  throw $.$$throw($.UnsupportedError$('Cannot removeRange on immutable List.'));
},
 getRange$2: function(start, rangeLength) {
  return this.get$_Lists().getRange$4(this, start, rangeLength, []);
},
 is$List: function() { return true; },
 is$Collection: function() { return true; },
 is$JavaScriptIndexingBehavior: function() { return true; }
});

// 528 dynamic classes.
// 528 classes
// 41 !leaf
(function(){
  var v0/*class(Uint8Array)*/ = 'Uint8Array|Uint8ClampedArray';
  var v1/*class(AudioSourceNode)*/ = 'AudioSourceNode|AudioBufferSourceNode|MediaElementAudioSourceNode|MediaStreamAudioSourceNode|OscillatorNode';
  var v2/*class(_CSSValueList)*/ = 'CSSValueList|WebKitCSSTransformValue|WebKitCSSFilterValue';
  var v3/*class(SVGColor)*/ = 'SVGColor|SVGPaint';
  var v4/*class(Text)*/ = 'Text|CDATASection';
  var v5/*class(SVGTextPositioningElement)*/ = 'SVGTextPositioningElement|SVGAltGlyphElement|SVGTRefElement|SVGTSpanElement|SVGTextElement';
  var v6/*class(SVGAnimationElement)*/ = 'SVGAnimationElement|SVGAnimateColorElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGSetElement';
  var v7/*class(SVGComponentTransferFunctionElement)*/ = 'SVGComponentTransferFunctionElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement';
  var v8/*class(SVGGradientElement)*/ = 'SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement';
  var v9/*class(SVGTextContentElement)*/ = [v5/*class(SVGTextPositioningElement)*/,'SVGTextContentElement|SVGTextPathElement'].join('|');
  var v10/*class(MediaElement)*/ = 'HTMLMediaElement|HTMLAudioElement|HTMLVideoElement';
  var v11/*class(SVGElement)*/ = [v6/*class(SVGAnimationElement)*/,v7/*class(SVGComponentTransferFunctionElement)*/,v8/*class(SVGGradientElement)*/,v9/*class(SVGTextContentElement)*/,'SVGElement|SVGAElement|SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGCircleElement|SVGClipPathElement|SVGCursorElement|SVGDefsElement|SVGDescElement|SVGEllipseElement|SVGFEBlendElement|SVGFEColorMatrixElement|SVGFEComponentTransferElement|SVGFECompositeElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEGaussianBlurElement|SVGFEImageElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEMorphologyElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFETurbulenceElement|SVGFilterElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGForeignObjectElement|SVGGElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGImageElement|SVGLineElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGPathElement|SVGPatternElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSVGElement|SVGScriptElement|SVGStopElement|SVGStyleElement|SVGSwitchElement|SVGSymbolElement|SVGTitleElement|SVGUseElement|SVGVKernElement|SVGViewElement'].join('|');
  var v12/*class(MouseEvent)*/ = 'MouseEvent|WheelEvent';
  var v13/*class(ProgressEvent)*/ = 'ProgressEvent|XMLHttpRequestProgressEvent';
  var v14/*class(UIEvent)*/ = [v12/*class(MouseEvent)*/,'UIEvent|CompositionEvent|KeyboardEvent|TextEvent|TouchEvent|SVGZoomEvent'].join('|');
  var v15/*class(CharacterData)*/ = [v4/*class(Text)*/,'CharacterData|Comment'].join('|');
  var v16/*class(Document)*/ = 'Document|HTMLDocument|SVGDocument';
  var v17/*class(DocumentFragment)*/ = 'DocumentFragment|ShadowRoot';
  var v18/*class(Element)*/ = [v10/*class(MediaElement)*/,v11/*class(SVGElement)*/,'Element|HTMLElement|HTMLAnchorElement|HTMLAppletElement|HTMLAreaElement|HTMLBRElement|HTMLBaseElement|HTMLBaseFontElement|HTMLBodyElement|HTMLButtonElement|HTMLCanvasElement|HTMLContentElement|HTMLDListElement|HTMLDataListElement|HTMLDetailsElement|HTMLDirectoryElement|HTMLDivElement|HTMLEmbedElement|HTMLFieldSetElement|HTMLFontElement|HTMLFormElement|HTMLFrameElement|HTMLFrameSetElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLIFrameElement|HTMLImageElement|HTMLInputElement|HTMLKeygenElement|HTMLLIElement|HTMLLabelElement|HTMLLegendElement|HTMLLinkElement|HTMLMapElement|HTMLMarqueeElement|HTMLMenuElement|HTMLMetaElement|HTMLMeterElement|HTMLModElement|HTMLOListElement|HTMLObjectElement|HTMLOptGroupElement|HTMLOptionElement|HTMLOutputElement|HTMLParagraphElement|HTMLParamElement|HTMLPreElement|HTMLProgressElement|HTMLQuoteElement|HTMLScriptElement|HTMLSelectElement|HTMLShadowElement|HTMLSourceElement|HTMLSpanElement|HTMLStyleElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableElement|HTMLTableRowElement|HTMLTableSectionElement|HTMLTextAreaElement|HTMLTitleElement|HTMLTrackElement|HTMLUListElement|HTMLUnknownElement'].join('|');
  var v19/*class(AbstractWorker)*/ = 'AbstractWorker|SharedWorker|Worker';
  var v20/*class(IDBRequest)*/ = 'IDBRequest|IDBOpenDBRequest|IDBVersionChangeRequest';
  var v21/*class(MediaStream)*/ = 'MediaStream|LocalMediaStream';
  var v22/*class(Node)*/ = [v15/*class(CharacterData)*/,v16/*class(Document)*/,v17/*class(DocumentFragment)*/,v18/*class(Element)*/,'Node|Attr|DocumentType|EntityReference|Notation|ProcessingInstruction'].join('|');
  var v23/*class(WorkerContext)*/ = 'WorkerContext|DedicatedWorkerContext|SharedWorkerContext';
  var table = [
    // [dynamic-dispatch-tag, tags of classes implementing dynamic-dispatch-tag]
    ['AbstractWorker', v19/*class(AbstractWorker)*/],
    ['Uint8Array', v0/*class(Uint8Array)*/],
    ['ArrayBufferView', [v0/*class(Uint8Array)*/,'ArrayBufferView|DataView|Float32Array|Float64Array|Int16Array|Int32Array|Int8Array|Uint16Array|Uint32Array'].join('|')],
    ['AudioSourceNode', v1/*class(AudioSourceNode)*/],
    ['AudioNode', [v1/*class(AudioSourceNode)*/,'AudioNode|AnalyserNode|AudioDestinationNode|BiquadFilterNode|ChannelMergerNode|ChannelSplitterNode|ConvolverNode|DelayNode|DynamicsCompressorNode|GainNode|PannerNode|ScriptProcessorNode|WaveShaperNode'].join('|')],
    ['AudioParam', 'AudioParam|AudioGain'],
    ['Blob', 'Blob|File'],
    ['CSSRule', 'CSSRule|CSSCharsetRule|CSSFontFaceRule|CSSImportRule|WebKitCSSKeyframeRule|WebKitCSSKeyframesRule|CSSMediaRule|CSSPageRule|CSSStyleRule|CSSUnknownRule'],
    ['CSSValueList', v2/*class(_CSSValueList)*/],
    ['SVGColor', v3/*class(SVGColor)*/],
    ['CSSValue', [v2/*class(_CSSValueList)*/,v3/*class(SVGColor)*/,'CSSValue|CSSPrimitiveValue'].join('|')],
    ['CanvasRenderingContext', 'CanvasRenderingContext|CanvasRenderingContext2D|WebGLRenderingContext'],
    ['Text', v4/*class(Text)*/],
    ['CharacterData', v15/*class(CharacterData)*/],
    ['DOMTokenList', 'DOMTokenList|DOMSettableTokenList'],
    ['Document', v16/*class(Document)*/],
    ['DocumentFragment', v17/*class(DocumentFragment)*/],
    ['HTMLMediaElement', v10/*class(MediaElement)*/],
    ['SVGAnimationElement', v6/*class(SVGAnimationElement)*/],
    ['SVGComponentTransferFunctionElement', v7/*class(SVGComponentTransferFunctionElement)*/],
    ['SVGGradientElement', v8/*class(SVGGradientElement)*/],
    ['SVGTextPositioningElement', v5/*class(SVGTextPositioningElement)*/],
    ['SVGTextContentElement', v9/*class(SVGTextContentElement)*/],
    ['SVGElement', v11/*class(SVGElement)*/],
    ['Element', v18/*class(Element)*/],
    ['Entry', 'Entry|DirectoryEntry|FileEntry'],
    ['EntrySync', 'EntrySync|DirectoryEntrySync|FileEntrySync'],
    ['ProgressEvent', v13/*class(ProgressEvent)*/],
    ['MouseEvent', v12/*class(MouseEvent)*/],
    ['UIEvent', v14/*class(UIEvent)*/],
    ['Event', [v13/*class(ProgressEvent)*/,v14/*class(UIEvent)*/,'Event|WebKitAnimationEvent|AudioProcessingEvent|BeforeLoadEvent|CloseEvent|CustomEvent|DeviceMotionEvent|DeviceOrientationEvent|ErrorEvent|HashChangeEvent|IDBVersionChangeEvent|IDBVersionChangeEvent|MediaKeyEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|PopStateEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SpeechInputEvent|SpeechRecognitionError|SpeechRecognitionEvent|StorageEvent|TrackEvent|WebKitTransitionEvent|WebGLContextEvent'].join('|')],
    ['IDBRequest', v20/*class(IDBRequest)*/],
    ['MediaStream', v21/*class(MediaStream)*/],
    ['Node', v22/*class(Node)*/],
    ['WorkerContext', v23/*class(WorkerContext)*/],
    ['EventTarget', [v19/*class(AbstractWorker)*/,v20/*class(IDBRequest)*/,v21/*class(MediaStream)*/,v22/*class(Node)*/,v23/*class(WorkerContext)*/,'EventTarget|AudioContext|BatteryManager|DOMApplicationCache|EventSource|FileReader|FileWriter|XMLHttpRequest|XMLHttpRequestUpload|IDBDatabase|IDBTransaction|DOMWindow|MediaController|MediaSource|MediaStreamTrack|MediaStreamTrackList|MessagePort|Notification|PeerConnection00|Performance|RTCDataChannel|RTCPeerConnection|SourceBufferList|SpeechRecognition|TextTrack|TextTrackCue|TextTrackList|WebKitNamedFlow|WebSocket|SVGElementInstance'].join('|')],
    ['HTMLCollection', 'HTMLCollection|HTMLOptionsCollection'],
    ['IDBCursor', 'IDBCursor|IDBCursorWithValue'],
    ['NodeList', 'NodeList|RadioNodeList'],
    ['StyleSheet', 'StyleSheet|CSSStyleSheet'],
    ['SVGPathSeg', 'SVGPathSeg|SVGPathSegArcAbs|SVGPathSegArcRel|SVGPathSegClosePath|SVGPathSegCurvetoCubicAbs|SVGPathSegCurvetoCubicRel|SVGPathSegCurvetoCubicSmoothAbs|SVGPathSegCurvetoCubicSmoothRel|SVGPathSegCurvetoQuadraticAbs|SVGPathSegCurvetoQuadraticRel|SVGPathSegCurvetoQuadraticSmoothAbs|SVGPathSegCurvetoQuadraticSmoothRel|SVGPathSegLinetoAbs|SVGPathSegLinetoHorizontalAbs|SVGPathSegLinetoHorizontalRel|SVGPathSegLinetoRel|SVGPathSegLinetoVerticalAbs|SVGPathSegLinetoVerticalRel|SVGPathSegMovetoAbs|SVGPathSegMovetoRel']];
$.dynamicSetMetadata(table);
})();

var $globalThis = $;
var $globalState;
var $globals;
var $isWorker = false;
var $supportsWorkers = false;
var $thisScriptUrl;
function $static_init(){};

function $initGlobals(context) {
  context.isolateStatics = new Isolate();
}
function $setGlobals(context) {
  $ = context.isolateStatics;
  $globalThis = $;
}
$.main.call$0 = $.main

//
// BEGIN invoke [main].
//
if (typeof document !== 'undefined' && document.readyState != 'complete') {
  document.addEventListener('readystatechange', function () {
    if (document.readyState == 'complete') {
      if (typeof dartMainRunner === 'function') {
        dartMainRunner(function() { $.startRootIsolate($.main); });
      } else {
        $.startRootIsolate($.main);
      }
    }
  }, false);
} else {
  if (typeof dartMainRunner === 'function') {
    dartMainRunner(function() { $.startRootIsolate($.main); });
  } else {
    $.startRootIsolate($.main);
  }
}
//
// END invoke [main].
//

function init() {
Isolate.$isolateProperties = {};
Isolate.$defineClass = function(cls, fields, prototype) {
  var generateGetterSetter =   function(field, prototype) {
    var len = field.length;
    var lastCharCode = field.charCodeAt(len - 1);
    var needsAccessor = (lastCharCode & 63) >= 60;
    if (needsAccessor) {
      var needsGetter = (lastCharCode & 3) > 0;
      var needsSetter = (lastCharCode & 2) == 0;
      var renaming = (lastCharCode & 64) != 0;
      var accessorName = field = field.substring(0, len - 1);
      if (renaming) {
        var divider = field.indexOf(":");
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (needsGetter) {
        var getterString = "return this." + field + ";";
        prototype["get$" + accessorName] = new Function(getterString);
      }
      if (needsSetter) {
        var setterString = "this." + field + " = v;";
        prototype["set$" + accessorName] = new Function("v", setterString);
      }
    }
    return field;
  };
  var constructor;
  if (typeof fields == 'function') {
    constructor = fields;
  } else {
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0) str += ", ";
      var field = fields[i];
      field = generateGetterSetter(field, prototype);
      str += field;
      body += "this." + field + " = " + field + ";\n";
    }
    str += ") {" + body + "}\n";
    str += "return " + cls + ";";
    constructor = new Function(str)();
  }
  constructor.prototype = prototype;
  return constructor;
};
var supportsProto = false;
var tmp = Isolate.$defineClass('c', ['f?'], {}).prototype;
if (tmp.__proto__) {
  tmp.__proto__ = {};
  if (typeof tmp.get$f !== 'undefined') supportsProto = true;
}
Isolate.$pendingClasses = {};
Isolate.$finishClasses = function(collectedClasses) {
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  for (var cls in collectedClasses) {
    if (hasOwnProperty.call(collectedClasses, cls)) {
      var desc = collectedClasses[cls];
      Isolate.$isolateProperties[cls] = Isolate.$defineClass(cls, desc[''], desc);
      if (desc['super'] !== "") Isolate.$pendingClasses[cls] = desc['super'];
    }
  }
  var pendingClasses = Isolate.$pendingClasses;
  Isolate.$pendingClasses = {};
  var finishedClasses = {};
  function finishClass(cls) {
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (hasOwnProperty.call(finishedClasses, cls)) return;
    finishedClasses[cls] = true;
    var superclass = pendingClasses[cls];
    if (!superclass) return;
    finishClass(superclass);
    var constructor = Isolate.$isolateProperties[cls];
    var superConstructor = Isolate.$isolateProperties[superclass];
    var prototype = constructor.prototype;
    if (supportsProto) {
      prototype.__proto__ = superConstructor.prototype;
      prototype.constructor = constructor;
    } else {
      function tmp() {};
      tmp.prototype = superConstructor.prototype;
      var newPrototype = new tmp();
      constructor.prototype = newPrototype;
      newPrototype.constructor = constructor;
      for (var member in prototype) {
        if (member == '' || member == 'super') continue;
        if (hasOwnProperty.call(prototype, member)) {
          newPrototype[member] = prototype[member];
        }
      }
    }
  }
  for (var cls in pendingClasses) finishClass(cls);
};
Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
  var sentinelUndefined = {};
  var sentinelInProgress = {};
  prototype[fieldName] = sentinelUndefined;
  var getter = new Function("{ return $." + fieldName + ";}");
  prototype[getterName] = function() {
    var result = $[fieldName];
    try {
      if (result === sentinelUndefined) {
        $[fieldName] = sentinelInProgress;
        try {
          result = $[fieldName] = lazyValue();
        } catch (e) {
          if ($[fieldName] === sentinelInProgress) {
            $[fieldName] = null;
          }
          throw e;
        }
      } else if (result === sentinelInProgress) {
        $.throwCyclicInit(staticName);
      }
      return result;
    } finally {
      $[getterName] = getter;
    }
  };
};
Isolate.$finishIsolateConstructor = function(oldIsolate) {
  var isolateProperties = oldIsolate.$isolateProperties;
  var isolatePrototype = oldIsolate.prototype;
  var str = "{\n";
  str += "var properties = Isolate.$isolateProperties;\n";
  for (var staticName in isolateProperties) {
    if (Object.prototype.hasOwnProperty.call(isolateProperties, staticName)) {
      str += "this." + staticName + "= properties." + staticName + ";\n";
    }
  }
  str += "}\n";
  var newIsolate = new Function(str);
  newIsolate.prototype = isolatePrototype;
  isolatePrototype.constructor = newIsolate;
  newIsolate.$isolateProperties = isolateProperties;
  return newIsolate;
};
}

//@ sourceMappingURL=scrunch.dart.js.map